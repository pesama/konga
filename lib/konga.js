'use strict';/** * @ngdoc overview * @name index * @description * * <img src="http:.io/wp-content/uploads/2015/03/konga-logo.png"> * * # konga ui * Welcome to `Konga Reference` documentation! Hope you like how we arranged everything. Otherwise please let us know! * Remember that you can go anytime to http:.io for more abstract reading. * * ## What does Konga offer me? * konga is an Angular-powered application engine, that relies on metadata definitions for creating a whole application context that defines CRUD forms over your defined entities. It enhances native components and also gives you a full set of rich Konga Reference for data management and other handy stuff. * * ### Metadata management * You can use konga to generate the administration pane of your web project automatically, by just defining its entities and their metadata. *  * Take a look to the {@link DataTypes.Metadata `metadata`}, {@link DataTypes.Entity `entity`} and {@link DataTypes.Field `field`} definitions to see all information you can assign to your entities. * For generating your own metadata, go to the {@link http:.konga.io/metadata `metadata.konga`} project's documentation. * * ### Customization * konga-powered apps are, in essence, Angular-powered apps. Therefore, you can use every angular feature within a konga project.  every app starts with your custom <b>HomeCtrl</b>. There you can define where do you want to use konga automation features and where not to. Furthermore, konga gives you customization entry points via its {@link Konga Reference.actionManager `action-driven-framework`} everywhere.  * * ### Step-by-step tutorial * TODO * * ## Installation * * You can install <b>Konga Reference</b> in your existing project via _bower_. * ``` * bower install Konga Reference --save * ``` *  * Then go to the {@link Konga Reference.configuration `Configuring your app`} section to prepare your application to be launched.  * * ### From scratch * * If you want to start a project from scratch, it's easier to use _Yeoman_ and the *generator-konga*: * ``` * npm install -g yo generator-konga * yo konga * ``` *  * This option will create a full _Angular_ scaffolding (it's based on _generator-angular_) with all custom Konga folders, some sample content, and a bunch of building tools to launch, deploy and publish your brand new Konga app. *  * If you follow this method, you should be directly able to launch the application by typing `grunt serve`. *  * ## Building *  * *  */ /** * @ngdoc overview * @name Konga Reference * @module Konga Reference * @description * # Konga Engine *  * Konga Engine is a tool for constructing <i>AngularJS-powered</i> forms using metadata that defines the entities forms should manage. It's based on two sub-projects (i.e. `Konga Metadata` and `Konga UI`). This documentation describes how the UI works, every component it has, and how the flow is. * * ## Runtime flow *  * <b>TODO</b> Describe flow and append diagram. * * ## Components *  * `Konga Reference` contains several components, that build the application and all its parts. *  * ### Controllers *  * * {@link Konga Reference.controller:EntitySearchCtrl `entity-search`}: This controller builds-up a standard {@link Konga Reference.directive:searchPane search pane} with all fields configured in the metadata to be <i>searchable</i>. It also appends a {@link Konga Reference.directive:resultTable result table} with the search results (having as columns every one declared to be <i>shown in results</i>). * * {@link Konga Reference.controller.EntityUpdateCtrl `entity-update`}: This controller builds-up a standard {@link Konga Reference.directive:updateForm update form} with all fields configured in the metadata to be <i>shown in update</i>. * * #### Component controllers * * * {@link Konga Reference.controller.MultiSelectCtrl multi-select}: Controls all processes for the multi-select UI component. <b>TODO</b> Move to a directive, and `deprecate`. * * {@link Konga Reference.controller.SingleSelectCtrl single-select}: Controls all processes for the single-select UI component. <b>TODO</b> Move to a directive, and `deprecate`. * * * ### Directives *  * #### Form directives *  * * {@link Konga Reference.directive:searchPane `search-pane`}: Creates a search pane with all the fields configured to be <i>searchable</i>. * * {@link Konga Reference.directive:resultTable `result-pane`}: Creates a result table with all fields configured to be <i>shown in results</i>. * * {@link Konga Reference.directive:updateForm `update-form`}: Creates a form with all fields configured to be <i>shown in update</i>. * * #### Component directives * * * {@link Konga Reference.directive:rawInput `raw-input`}: Creates a form field that changes it's appearance depending on the field type. * * {@link Konga Reference.directive:listInput `list-input`}: Creates a list to render a complex field. * * {@link Konga Reference.directive:tableHeader `table-header`}: Creates a header for a table column. * * {@link Konga Reference.directive:tableCell `table-cell`}: Creates a cell for a table. * * {@link Konga Reference.directive:kongaSelect `konga-select`}: Provides functionality to the `single-select` and `multi-select` components. * * #### Util directives *  * * {@link Konga Reference.directive:scrollWatcher `scroll-watcher`}: Provides a method for listening to scroll changes on the target UI component. * * #### Misc directives * * * {@link Konga Reference.directive:menu `menu`}: Renders a menu for the application (i.e. navbar). * * {@link Konga Reference.directive:menuItem `menu-item`}: Renders a menu item. * * {@link Konga Reference.directive:formInfo `form-info`}: Creates a component that displays basic data for the entity being shown in update mode. * * * ### Filters * * * {@link Konga Reference.filter:mapField `map-eds-field`}: Receives an entity and a field metadata definition, and returns the value of such field within the entity.  * * {@link Konga Reference.filter:quickSearch `quick-search`}: Returns the fields within an entity definition configured to be used as <i>quick search</i> fields. * * {@link Konga Reference.filter:searchParams `search-params`}: Returns all fields from a entity metadata definition configured to be <i>searchable</i> * * {@link Konga Reference.filter:resultParams `result-params`}: Returns all fields from a entity metadata definition configured to be <i>shown in results</i> * * {@link Konga Reference.filter:updateParams `update-params`}: Returns all fields from a entity metadata definition configured to be <i>shown in updates</i> * * {@link Konga Reference.filter:selectData `select-data`}: Receives a set of entities, and returns the same list but with only the fields required for a single-select or multi-select. * * {@link Konga Reference.filter:shortify `shortify`}: Receives an String and a length, and returns a substring of that length. * * {@link Konga Reference.filter:tableRendererComplex `table-renderer-complex`}: Serializes a complex field to be shown in a table cell. * * {@link Konga Reference.filter:translateComplex `translate-complex`}: Configures a complex field to be translated using standard `translate` filter.  * * * ### Services * * * {@link Konga Reference.actionManager `action-manager`}: Defines and controls all available actions to dispatch from the application. <b>TODO</b> extract the action definitions elsewhere. * * {@link Konga Reference.Api `api`}: Connects the UI with the REST services that handle the information. * * {@link Konga Reference.Common `common`}: Stores stuff that's accessible all across the application. * * {@link Konga Reference.configurationManager `configuration-manager`}: Handles all configuration for the application (defined via metadata). * * {@link Konga Reference.fieldMapper `field-mapper`}: Helps mapping a field's value into a given entity.  * * {@link Konga Reference.metadata `metadata`}: Connects to the metadata REST service to receive all application definition. * * {@link Konga Reference.permissionManager `permission-manager`}: Handles the permissions for the application. * * {@link Konga Reference.Scaffold `scaffold`}: Builds-up new entities for creating, and queries for searching. * *//** * @ngdoc overview * @name Konga Reference * @module Konga Reference * @description * #New konga UI * # Processes *  * ## Authentication * TODO Document *  * ## Metadata retrieval * Once the user is authenticated, all service calls for the api will have an authentication header, that will be used in the service to verify the identity, and provide the permissions the user has.  * Such permissions would allow the user to manage entities from the interface, and perform some of the <i>CRUD</i> operations (those she has permissions for).  * * ## Interface management * Entity information is received from the api, and it contains enough information to build a user interface using it. Thus, the metadata information must contain all fields involved, including its data types, validation information, default values, etcetera (please see the <a href="NGE_DEV_GUIDE">Technical Documentation</a> for details on available metadata information). * The system is capable of building user interfaces for searching entities, updating them, or creating new ones. Thanks to Angular's `$resource` class, all entities are engaged to the service they come from, and therefore you can permanently persist a change on the database by just calling the methods `$save` and `$create`, and scaffold new service-engaged entities by instantiating the class. * * # Routes * `/home`: Goes to the home screen and displays the favorites and other stuff. * `/eds/:edsType/search`: Allows to search for entities. * `/eds/:edsType/:edsId`: Updates an entity. If the `edsId` value is 'new', it creates a new entity. * `/login`: Logs in into the application */angular.module('konga', [  'ngAnimate',  'ngCookies',  'ngResource',  'ngRoute',  'ngSanitize',  'ngTouch',  'ui.bootstrap',  'ui.bootstrap.datetimepicker',  'mgcrea.ngStrap.popover',  'mgcrea.ngStrap.select',  'pascalprecht.translate',  'dialogs.main',  'config',  'angularFileUpload',  'ui.calendar']).config(['$httpProvider',  function($httpProvider) {    $httpProvider.defaults.useXDomain = true;    delete $httpProvider.defaults.headers.common['X-Requested-With'];  }]).config(['$locationProvider', '$routeProvider', function($locationProvider, $routeProvider) {    $routeProvider      .when('/entity/:entityType/search/', {        templateUrl: '/konga/views/entity-search.html',        controller: 'EntitySearchCtrl'      })      .when('/entity/:entityType/:entityId/', {        templateUrl: '/konga/views/entity-update.html',        controller: 'EntityUpdateCtrl'      });  }]).config(['$translateProvider', 'i18n', function($translateProvider, i18n) {    for(var lang in i18n) {      $translateProvider.translations(lang, i18n[lang]);    }        $translateProvider.preferredLanguage('en');    moment.locale('en');  }]);"use strict"; angular.module('config', []).constant('i18n', {es:{'message.login.title':'Acceso a la aplicación','message.login.description':'Introduzca sus datos de acceso para utilizar la aplicación','message.login.username':'Correo electrónico','message.login.password':'Contraseña','message.login.rememberme':'Recordarme en este equipo','message.login.proceed':'Acceder','message.login.incorrect-data':'Usuario o contraseña inválidos','message.action.validate':'Validar','message.action.save':'Guardar','message.action.cancel':'Cancelar','message.action.add':'Añadir','message.action.delete':'Eliminar','message.action.clean':'Limpiar','message.action.search':'Buscar','message.action.close':'Cerrar','message.action.proceed-order':'Pedido','message.discard-changes.title':'Confirma tu acción','message.discard-changes.message':'¿Deseas cancelar tus cambios?','message.delete-entity.title':'Confirma tu acción','message.delete-entity.message':'¿Deseas eliminar este elemento?','message.action-confirmation.create.success':'Elemento creato con éxito','message.action-confirmation.update.success':'Elemento actualizado con éxito','message.action-confirmation.delete.success':'Elemento borrado con éxito','message.search-filters.title':'Filtros de búsqueda','message.field-validation.required':'Este campo es obligatorio','message.boolean.yes':'Sí','message.boolean.no':'No',DIALOGS_YES:'Sí',DIALOGS_NO:'No',DIALOGS_CLOSE:'Cerrar','message.tabs.home':'Home','message.tabs.admin':'Admin','message.tabs.entity.search':'Buscar {{ label }}','message.tabs.entity.update':'Actualizar {{ label }} {{ id }}','message.tabs.entity.create':'Crear {{ label }}','message.menu.entity-management':'Gestionar elementos','message.menu-internal-news':'Mensajes internos','field.searchResults.noresults':'Sin resultados','panel.admin-options.title':'Opciones de administración','panel.admin-options.control-panel':'Administración','panel.admin-options.sales-panel':'Comercial','panel.select-store.title':'Selecciona tu tienda','field.date-search.comparator':'Comparador','field.date-search.date':'Fecha','field.date-search.otherdate':'Otra fecha','field.date-search.LOWER_THAN':'Anterior','field.date-search.LOWER_EQUALS':'Anterior o igual','field.date-search.EQUALS':'Igual','field.date-search.GREATER_EQUALS':'Posterior o igual','field.date-search.GREATER_THAN':'Posterior','field.date-search.BETWEEN':'Entre','field.number-range.comparator':'Comparador','field.number-range.number':'Valor','field.number-range.othernumber':'Otro valor','field.number-range.LOWER_THAN':'Menor','field.number-range.LOWER_EQUALS':'Menor o igual','field.number-range.EQUALS':'Igual','field.number-range.GREATER_EQUALS':'Mayor o igual','field.number-range.GREATER_THAN':'Mayor','field.number-range.BETWEEN':'Entre','message.table-input.not-yet-configured':'La tabla aún no ha sido configurada','field.list-input.actions':'Acciones','field.file-input.upload':'Seleccionar archivo','message.pagination.results-per-page':'Resultados por página','message.pagination.results':'Mostrando  resultados {{ (offset-1) * limit + 1 }} a {{ count < ((offset-1)*limit)+limit ? count : ((offset-1)*limit+limit) }} de {{ count }} ','message.single-select.title':'Elija un elemento','combobox.placeholder':'Seleccionar un valor',DUPLICATED_ELEMENT:'Error de integridad: Ese elemento ya existe','entity.catalog-product-details.cart.add.success':'{{ product.description }} añadido al carrito','entity.catalog-product-details.cart.edit.success':'{{ product.description }} editado con éxito','entity.catalog-product-details.cart.add.no-stock':'No hay stock de este producto','entity.catalog-product-details.cart.add.not-enough-stock':'No hay stock de este producto','entity.catalog-product-details.cart.add.from-total-stock':'Este producto pertenece a un almacén externo a Storpanel, y puede estar fuera de su embalaje original.'},en:{'message.action.validate':'Validate','message.action.save':'Save','message.action.cancel':'Cancel','message.action.add':'Add','message.action.delete':'Delete','message.action.clean':'Clean','message.action.search':'Search','message.action.close':'Close','message.discard-changes.title':'Confirm your action','message.discard-changes.message':'Do you want to discard your changes?','message.delete-entity.title':'Confirm your action','message.delete-entity.message':'Do you want to remove this item?','message.action-confirmation.create.success':'Item successfully created','message.action-confirmation.update.success':'Item successfully updated','message.action-confirmation.delete.success':'Item successfully deleted','message.search-filters.title':'Search filters','message.field-validation.required':'Mandatory field','message.boolean.yes':'Yes','message.boolean.no':'No',DIALOGS_YES:'Yes',DIALOGS_NO:'No',DIALOGS_CLOSE:'Close','message.tabs.home':'Home','message.tabs.admin':'Admin','message.tabs.entity.search':'Find {{ label }}','message.tabs.entity.update':'Update {{ label }} {{ id }}','message.tabs.entity.create':'New {{ label }}','field.searchResults.noresults':'No results','field.date-search.comparator':'Comparator','field.date-search.date':'Date','field.date-search.otherdate':'Other date','field.date-search.LOWER_THAN':'Lower than','field.date-search.LOWER_EQUALS':'Lower or equal','field.date-search.EQUALS':'Equal','field.date-search.GREATER_EQUALS':'Greater or equal','field.date-search.GREATER_THAN':'Greater','field.date-search.BETWEEN':'Between','field.number-range.comparator':'Comparator','field.number-range.number':'Value','field.number-range.othernumber':'Other value','field.number-range.LOWER_THAN':'Lower than','field.number-range.LOWER_EQUALS':'Lower or equal','field.number-range.EQUALS':'Equal','field.number-range.GREATER_EQUALS':'Greater or equal','field.number-range.GREATER_THAN':'Greater than','field.number-range.BETWEEN':'Between','field.link.text':'Select value','message.table-input.not-yet-configured':'The table hasn\'t been configured yet','field.list-input.actions':'Actions','field.file-input.upload':'Select file','message.pagination.results-per-page':'Items per page','message.pagination.results':'Showing items {{ (offset-1) * limit + 1 }} to {{ count < ((offset-1)*limit)+limit ? count : ((offset-1)*limit+limit) }} from {{ count }} ','message.single-select.title':'Select an item','combobox.placeholder':'Select a value',DUPLICATED_ELEMENT:'Data integrity exception. Item exists already'},fr:{'message.login.title':'Acceso a la aplicación','message.login.description':'Introduzca sus datos de acceso para utilizar la aplicación','message.login.username':'Correo electrónico','message.login.password':'Contraseña','message.login.rememberme':'Recordarme en este equipo','message.login.proceed':'Acceder','message.login.incorrect-data':'Usuario o contraseña inválidos','message.action.validate':'Validar','message.action.save':'Guardar','message.action.cancel':'Cancelar','message.action.add':'Añadir','message.action.delete':'Eliminar','message.action.clean':'Limpiar','message.action.search':'Buscar','message.action.close':'Cerrar','message.action.proceed-order':'Pedido','message.discard-changes.title':'Confirma tu acción','message.discard-changes.message':'¿Deseas cancelar tus cambios?','message.delete-entity.title':'Confirma tu acción','message.delete-entity.message':'¿Deseas eliminar este elemento?','message.action-confirmation.create.success':'Elemento creato con éxito','message.action-confirmation.update.success':'Elemento actualizado con éxito','message.action-confirmation.delete.success':'Elemento borrado con éxito','message.search-filters.title':'Filtros de búsqueda','message.field-validation.required':'Este campo es obligatorio','message.boolean.yes':'Sí','message.boolean.no':'No',DIALOGS_YES:'Sí',DIALOGS_NO:'No',DIALOGS_CLOSE:'Cerrar','message.tabs.home':'Home','message.tabs.admin':'Admin','message.tabs.entity.search':'Buscar {{ label }}','message.tabs.entity.update':'Actualizar {{ label }} {{ id }}','message.tabs.entity.create':'Crear {{ label }}','message.menu.entity-management':'Gestionar elementos','message.menu-internal-news':'Mensajes internos','field.searchResults.noresults':'Sin resultados','panel.admin-options.title':'Opciones de administración','panel.admin-options.control-panel':'Administración','panel.admin-options.sales-panel':'Comercial','panel.select-store.title':'Selecciona tu tienda','field.date-search.comparator':'Comparador','field.date-search.date':'Fecha','field.date-search.otherdate':'Otra fecha','field.date-search.LOWER_THAN':'Anterior','field.date-search.LOWER_EQUALS':'Anterior o igual','field.date-search.EQUALS':'Igual','field.date-search.GREATER_EQUALS':'Posterior o igual','field.date-search.GREATER_THAN':'Posterior','field.date-search.BETWEEN':'Entre','field.number-range.comparator':'Comparador','field.number-range.number':'Valor','field.number-range.othernumber':'Otro valor','field.number-range.LOWER_THAN':'Menor','field.number-range.LOWER_EQUALS':'Menor o igual','field.number-range.EQUALS':'Igual','field.number-range.GREATER_EQUALS':'Mayor o igual','field.number-range.GREATER_THAN':'Mayor','field.number-range.BETWEEN':'Entre','message.table-input.not-yet-configured':'La tabla aún no ha sido configurada','field.list-input.actions':'Acciones','field.file-input.upload':'Seleccionar archivo','message.pagination.results-per-page':'Resultados por página','message.pagination.results':'Mostrando  resultados {{ (offset-1) * limit + 1 }} a {{ count < ((offset-1)*limit)+limit ? count : ((offset-1)*limit+limit) }} de {{ count }} ','message.single-select.title':'Elija un elemento','combobox.placeholder':'Seleccionar un valor',DUPLICATED_ELEMENT:'Error de integridad: Ese elemento ya existe','entity.catalog-product-details.cart.add.success':'{{ product.description }} añadido al carrito','entity.catalog-product-details.cart.edit.success':'{{ product.description }} editado con éxito','entity.catalog-product-details.cart.add.no-stock':'No hay stock de este producto','entity.catalog-product-details.cart.add.not-enough-stock':'No hay stock de este producto','entity.catalog-product-details.cart.add.from-total-stock':'Este producto pertenece a un almacén externo a Storpanel, y puede estar fuera de su embalaje original.'}});'use strict';/** * @ngdoc object * @name Konga Reference.constants * @description * Stores common constants used all across the application * @property {String} API_HOST Defines where is the api located * @property {String} ENTITY_ID_PREFFIX Defines the preffix for ENTITY operations * @property {String} SEARCH_SUFFIX Defines the suffix for search purposes * @property {String} STRING_SEPARATOR Defines the separator for Strings * @property {String} NEW_ENTITY_ID Defines the eds id when creating a new one * @property {String} SOURCE_METADATA Defines the entity name of the metadata * @property {String} SCOPE_SEARCH Defines the search scope name * @property {String} SCOPE_UPDATE Defines the update scope name * @property {String} FIELD_BOOLEAN Defines the type name of a boolean field * @property {String} FIELD_CHECKBOX Defines the type name of a checkbox field * @property {String} FIELD_DATE Defines the type name of a date field * @property {String} FIELD_TEXT Defines the type name of a text field * @property {String} FIELD_COMPLEX Defines the type name of a complex field * @property {String} DATE_DEFAULT_NOW Defines the default value for date objects, to set-up as current date * @property {String} MULTIPLICITY_ONE Defines the String to define one-to-one multiplicity * @property {String} MULTIPLICITY_MANY Defines the String to define many-to-many multiplicity * */var constants = {	ALERT_TYPE_ERROR 					: 'danger',	ALERT_TYPE_SUCCESS 					: 'success',	ALERT_TYPE_DEFAULT 					: 'default',	ALERT_TYPE_WARNING 					: 'warning',	ENTITY_ID_PREFFIX 					: 'entity_',	SEARCH_SUFFIX 						: '_search',	STRING_SEPARATOR					: '_',	NEW_ENTITY_ID 						: 'new',	REFRESH_SEARCH_KEY 					: 'refreshSearchKey_',	SCOPE_SEARCH 						: 'search',	SCOPE_RESULTS 						: 'results',	SCOPE_UPDATE 						: 'update',	FIELD_STRING 						: 'STRING',	FIELD_NUMBER 						: 'NUMBER',	FIELD_PLAIN 						: 'PLAIN',	FIELD_PASSWORD 						: 'PASSWORD',	FIELD_BOOLEAN 						: 'BOOLEAN',	FIELD_CHECKBOX 						: 'CHECKBOX',	FIELD_COMBOBOX 						: 'COMBOBOX',	FIELD_DATE 							: 'DATE',	FIELD_DATETIME 						: 'DATETIME',	FIELD_DATESEARCH 					: 'DATE-SEARCH',	FIELD_TEXT 							: 'TEXT',	FIELD_TEXTAREA 						: 'TEXTAREA',	FIELD_COMPLEX 						: 'COMPLEX',	FIELD_LIST 							: 'LIST',	FIELD_PICK_LIST 					: 'PICK_LIST',	FIELD_SELECT 						: 'SELECT',	FIELD_FILTERED_SELECT 				: 'FILTERED_SELECT',	FIELD_TICS 							: 'TICS',	FIELD_COLOR 						: 'COLOR',	FIELD_CSS 							: 'CSS',	FIELD_FILE 							: 'FILE',	FIELD_IMAGE 						: 'IMAGE',	FIELD_PRICE 						: 'PRICE',	FIELD_CUSTOM 						: 'CUSTOM',	FIELD_PLAIN_FILTERED 				: 'PLAIN_FILTERED',	FIELD_TABLE 						: 'TABLE',	: 'list_search',	: 'list_link',	DATE_DEFAULT_NOW 					: 'now',	MULTIPLICITY_ONE 					: 'ONE',	MULTIPLICITY_MANY 					: 'MANY',	TRIGGER_MOMENT_IMMEDIATE 			: 'IMMEDIATE',	TRIGGER_MOMENT_COMMIT 				: 'COMMIT',	TRIGGER_TYPE_CONFIRM 				: 'CONFIRM',	TRIGGER_TYPE_ALERT 					: 'ALERT',	TRIGGER_PARAM_LABEL 				: 'label',	TRIGGER_MATCH_VALUE 				: 'VALUE',	TRIGGER_MATCH_LENGTH 				: 'LENGTH',	TRIGGER_MATCH_TYPE_EXACT			: 'EXACT_MATCH',	TRIGGER_MATCH_TYPE_RANGE	  		: 'RANGE',	CASCADE_FORM 						: 'CASCADE',	TABBED_FORM 						: 'TABBED',	CUSTOM_TABBED_FORM 					: 'CUSTOM_TABBED',	CUSTOM_FORM 						: 'CUSTOM',	CATEGORIZED_CASCADE_FORM 			: 'CATEGORIZED_CASCADE',	LANGUAGE_MESSAGE_PREFFIX 			: 'message.languages.',	DATE_COMPARATOR_LOWER_THAN 			: 'LOWER_THAN',	DATE_COMPARATOR_LOWER_EQUALS 		: 'LOWER_EQUALS',	DATE_COMPARATOR_EQUALS 				: 'EQUALS',	DATE_COMPARATOR_GREATER_EQUALS 		: 'GREATER_EQUALS',	DATE_COMPARATOR_GREATER_THAN 		: 'GREATER_THAN',	DATE_COMPARATOR_BETWEEN 			: 'BETWEEN',	NUMBER_COMPARATOR_LOWER_THAN 		: 'LOWER_THAN',	NUMBER_COMPARATOR_LOWER_EQUALS 		: 'LOWER_EQUALS',	NUMBER_COMPARATOR_EQUALS 			: 'EQUALS',	NUMBER_COMPARATOR_GREATER_EQUALS 	: 'GREATER_EQUALS',	NUMBER_COMPARATOR_GREATER_THAN 		: 'GREATER_THAN',	NUMBER_COMPARATOR_BETWEEN 			: 'BETWEEN',	VALIDATOR_EXACT_MATCH 				: 'EXACT_MATCH',	VALIDATOR_RANGE 					: 'RANGE',		MAXLEN_FILTER_NAME              	: 30,	ACTION_TYPE_MODAL 					: 'modal',	ACTION_TYPE_NOTIFY 					: 'notify',	ACTION_TYPE_CONFIRM 				: 'confirm',	ACTION_TYPE_TAB 					: 'tab',	ACTION_TYPE_FUNCTION 				: 'function',		ACTION_RESTRICTION_POLICY_ALL 		: 'all'	,	USER_ID								: 'userId',		COMBO_NATURE_TIERS					: 'natTiers',		CONFIGURATION_IGNORE_PARENT_FIELD 	: 'IGNORE_PARENT_FIELD',	CONFIGURATION_USE_VIEW 				: 'USE_VIEW',	TAB_TYPE_SEARCH 					: 'glyphicon glyphicon-search',	TAB_TYPE_UPDATE 					: 'glyphicon glyphicon-pencil',	TAB_TYPE_HOME 						: 'glyphicon glyphicon-home',	TAB_TYPE_TASKS 						: 'glyphicon glyphicon-tasks',	TAB_TYPE_GRID 						: 'glyphicon glyphicon-th',	TAB_TYPE_GRID_LARGE 				: 'glyphicon glyphicon-th-large',	TAB_TYPE_STORE 						: 'glyphicon glyphicon-shopping-cart',	TAB_TYPE_CONFIG 					: 'glyphicon glyphicon-cog',	FORM_STYLE_HORIZONTAL 				: 'HORIZONTAL',	USE_SHORT_LABEL 					: 'USE_SHORT_LABEL',		FILE_TYPE_PDF						: 'application/pdf',	FILE_TYPE_PNG						: 'image/png',	FILE_TYPE_JPG						: 'image/jpeg',	FILE_TYPE_GIF						: 'image/gif',	FILE_EXT_PNG						: '.png',	FILE_EXT_JPG						: '.jpg',	FILE_EXT_GIF						: '.gif',	CASCADE_UPDATE 						: 'CASCADE_UPDATE',	PROPAGATE_UPDATE 					: 'PROPAGATE_UPDATE',	DISABLE_COMPLEX_FIELD 				: 'DISABLE_FIELD',	SELF_FIELD 							: '$self',	COMPLEX_FIELD_AS					: 'as',		UPDATE_CUSTOM_VIEW 					: 'UPDATE_CUSTOM_VIEW',	SEARCH_CUSTOM_VIEW 					: 'SEARCH_CUSTOM_VIEW',	UPDATE_HIDE_BUTTONS 				: 'UPDATE_HIDE_BUTTONS',	WEEKDAYS 							: ['day.sunday', 'day.monday', 'day.tuesday', 'day.wednesday', 'day.thursday', 'day.friday', 'day.saturday'],	WEEKEND_DAYS 						: ['day.saturday', 'day.sunday'],	MONTHS 								: ['month.january', 'month.february', 'month.march', 'month.april', 'month.may', 'month.june', 'month.july', 'month.august', 'month.september', 'month.october', 'month.november', 'month.december'],	SEARCH_USE_CATEGORY 				: 'USE_SEARCH_CATEGORY',	RESULTS_USE_CATEGORY 				: 'USE_RESULTS_CATEGORY',	HIDE_CATEGORY_HEADER 				: 'HIDE_CATEGORY_HEADER',	QUERY_PARAM_REGEXP 					: /^{\w+}$/,	QUERY_COMPLEX_PARAM_REGEXP 			: /^{(\w+\.\w+)*}$/,	SHOW_PAGINATION 					: 'SHOW_PAGINATION',	TABLE_CELL_RENDERER 				: 'TABLE_CELL_RENDERER',	TABLE_CELL_FILTER 					: 'TABLE_CELL_FILTER',	READ_ONLY 							: 'READ_ONLY',	TABLE_CONF_X_AXIS_PROPERTY 			: 'X_AXIS_PROPERTY',	TABLE_CONF_Y_AXIS_PROPERTY 			: 'Y_AXIS_PROPERTY',	TABLE_CONF_X_AXIS_MIN 				: 'X_AXIS_MIN',	TABLE_CONF_Y_AXIS_MIN 				: 'Y_AXIS_MIN',	TABLE_CONF_X_AXIS_MAX 				: 'X_AXIS_MAX',	TABLE_CONF_Y_AXIS_MAX 				: 'Y_AXIS_MAX',	TABLE_CONF_X_AXIS_STEP 				: 'X_AXIS_STEP',	TABLE_CONF_Y_AXIS_STEP 				: 'Y_AXIS_STEP',	LOOK_AND_FEEL_PLAIN 				: 'plain',	LOOK_AND_FEEL_TABS 					: 'tabs',	CONFIG_LOOK_AND_FEEL 				: 'look-and-feel',	HIDE_WHEN_CREATING 					: 'hide-when-creation',	HIDE_WHEN_UPDATING 					: 'hide-when-updating'};'use strict';/** * @ngdoc function * @name uikongaApp.controller:AppLoaderCtrl * @description * # AppLoaderCtrl * Controller of the uikongaApp */angular.module('konga')  .controller('AppLoaderCtrl', ['$scope', '$rootScope', '$routeParams', '$location',   	function ($scope, $routeParams, $location) {  		var after = $routeParams.after ? decodeURIComponent($routeParams.after) : '/';  		$scope.$on('load-ready', function(evt, data) {  			var code = data.code;  			var loaders = $rootScope.status.loaders;  			var index = loaders.indexOf(code);  			if(index !== -1) {  				loaders.splice(index, 1);  			}  			if(!loaders.length) {  				$location.path(after);  			}  		});	}]);'use strict';/** * @ngdoc function * @name uikongaApp.controller:EntityDetailsCtrl * @description * # EntityDetailsCtrl * Controller of the uikongaApp */angular.module('konga.ui')  .controller('EntityDetailsCtrl', function ($scope) {    $scope.awesomeThings = [      'HTML5 Boilerplate',      'AngularJS',      'Karma'    ];  });'use strict';/** * @ngdoc controller * @name Konga Reference.controller:EntitySearchCtrl * @description * Controller used for search ENTITY entities. It's route provides information about what type of entity are we searching for *  * * # Route configuration * This controller uses the path to get configured. Depending on the entity type it needs to manage, the parameter `entityType` received via the `$routeParams` would have one value or another. This parameter is used thereafter to determine the local endpoint to perform the calls to.  * * * # Local endpoint * Using the {@link Konga Reference.Api api} service, and sending the `entityType` parameter defined above, the service returns the proper endpoint, depending on which type of entity is received. Afterwards all CRUD operations between the UI and the web service will be performed to the appropriate endpoint.  * *  * # Using `pageData` * Thanks to the {@link Konga Reference.Common#methods_getPageData `getPageData`} method of the {@link Konga Reference.Common common} storage, this controller can save information about where it was when the tab was changed to one another. Thus, the controller can restore its previous state once we come back to such tab.  * * * # Pagination * To avoid retrieving too many results at once, they are paginated so the user could only see the number of results she decides.  * <br /> * * * * @param {$scope} $scope Local scope for the controller * @param {Api} api Api connector for REST service connection * @param {$routeParams} $routeParams Parameters of the route * @param {Common} common Common storage * @param {$rootScope} $rootScope Global scope (for receiving propagated data) * @param {$filter} $filter Filters for managing data * @param {Scaffold} scaffold Used to generate new entities */angular.module('konga')  .controller('EntitySearchCtrl', ['$scope', 'api', '$routeParams', 'common', '$rootScope', '$filter', 'scaffold', '$timeout', '$log', 'permissionManager',   	function ($scope, api, $routeParams, common, $rootScope, $filter, scaffold, $timeout, $log, permissionManager) {  		      = $scope.entityType = $routeParams.entityType;      = api.getLocalEndpoint(entityType);            = $rootScope.pageData;      = $log.getInstance('EntitySearchCtrl', entityType);            $scope.searchResults = [];            ,  (!$rootScope.currentQuery) {$rootScope.currentQuery = {}; }            $scope.pageItems = [];      var pageData = $rootScope.pageData;            if (!$rootScope.paginationData) {        $rootScope.paginationData = {};      }      if (!$rootScope.paginationData[entityType]) {        $rootScope.paginationData[entityType] = {};        $rootScope.paginationData[entityType].count = 0;        $rootScope.paginationData[entityType].limit = 20;        $rootScope.paginationData[entityType].offset = 1;      }      $scope.paginationCount = $rootScope.paginationData[entityType].limit + "";      = $scope.entityMetadata = common.getMetadata(entityType);      $scope.isCreateable = metadata.createable !== null && permissionManager.isAllowed(metadata.createable);      , we setup the controller      (pageData.init) {        $scope.searchResults = pageData.searchResults;        $scope.query = pageData.query;        $scope.filterOpened = pageData.filterOpened;        $scope.filterClass = pageData.filterClass;        $scope.resultTableWidth = pageData.resultTableWidth;        $scope.quickSearchEnabled = pageData.quickSearchEnabled;              } else {        pageData.searchResults = $scope.searchResults;        $scope.quickSearchEnabled = pageData.quickSearchEnabled = false;        $scope.query = pageData.query = scaffold.newQuery($scope.entityMetadata);        $scope.filterOpened = pageData.filterOpened = true;                .init = true;      }      $scope.init = function() {        if($scope.entityMetadata.searchable === null) {          $scope.hideFilter();        }        else {          $scope.showFilter();        }      };      var quickSearchFields = $scope.quickSearch = $filter('quickSearch')(metadata);      = util.getEntityFields($scope.entityMetadata); - jsHint : not used      = $scope.codeField = util.getEntityCode($scope.entityMetadata, undefined, true);      = util.getEntityLabel($scope.entityMetadata, undefined, true);            = $filter('orderBy')(util.getEntityFields($scope.entityMetadata), '+priority.search');      $scope.fieldsShowInResult = $filter('resultParams')(allFields, $scope.entityMetadata);            $scope.productCodes = common.read('product-codes');       $scope.operations = $rootScope.operations;            $scope.resetPaginationData = function (onlyPagination) {    	  $rootScope.paginationData[entityType].count = 0;        $rootScope.paginationData[entityType].offset = 1;        if(!onlyPagination) {          $rootScope.paginationData[entityType].limit = 20;        }      };            $scope.submit = function(query, sorting) {        $rootScope.operations.requestLoading('search_' + entityType);        var paging = $rootScope.paginationData;                if (query === undefined) {        	query = angular.copy($scope.query);        }                if (query.resetPaging) {            $scope.resetPaginationData(true);            query.resetPaging = false;        }                if (query.resetSorting) {        	$scope.fieldsShowInResult = $filter('resultParams')($scope.fieldsShowInResult, $scope.entityMetadata);          query.resetSorting = false;        }        $scope.query = query;                .limit = paging[entityType].limit;        query.offset = (paging[entityType].offset - 1) * paging[entityType].limit;                ?        if(sorting) {          var apiName = sorting.field.apiName;          if(!apiName) apiName = sorting.field.name;          query.sortBy = apiName;          query.sortAs = sorting.type;        }                console.log(query);        var sendQuery = $scope.oldQuery = {};        rootifyQuery(sendQuery, query);                var path = metadata.apiPath;        sendQuery.path = path;        pageData.searchResults = $scope.searchResults = localEndpoint.search(sendQuery, function() {        	(by page)        	var count = $rootScope.paginationData[entityType].count = $routeParams.count;        	$scope.currentItems();          $rootScope.operations.freeLoading('search_' + entityType);        }, function(error) {          var exceptionCode = error.data && error.data.length ? error.data[0].exceptionCode : 'GENERIC_TECHNICAL_ERROR';          $rootScope.operations.freeLoading('search_' + entityType);          $rootScope.operations.addAlert(constants.ALERT_TYPE_ERROR, exceptionCode);        });      };	      $scope.submitSorting = function(field, type) {    	  $scope.fieldsShowInResult = sortBy;    	  .log(sortBy);    	  $scope.resetPaginationData();    	  $scope.submit($scope.query, { field: field, type: type });      };            $scope.timeout = 1;      $scope.executeQuickSearch = function() {    	  $timeout.cancel($scope.timeout);    	  $scope.timeout = $timeout(function() {            $scope.quickSearchEnabled = pageData.quickSearchEnabled = false;        	  var quickSearchQuery = angular.copy($scope.query);            for(var i = 0; i < quickSearchFields.length; i++) {              var field = quickSearchFields[i];              var name = field.metadata.apiName ? field.metadata.apiName : field.metadata.name;              [name] = field.value;              if(!quickSearchQuery[name].length) {                delete quickSearchQuery[name];              }              else {                $scope.quickSearchEnabled = pageData.quickSearchEnabled = true;              }            }        	  $scope.submit(quickSearchQuery);        	  		      }, 1000);      };      function rootifyQuery(query, obj, metadata, fields) {          function getField(fields, name) {            = $filter('filter')(fields, { name: name }, true)[0];            ?            if(!field) {              field = $filter('filter')(fields, { apiName: name }, true)[0];            }            return field;          }          if(!metadata) {            metadata = $scope.entityMetadata;          }          if(!fields) fields = util.getEntityFields(metadata);          for(var i in obj) {            var value = obj[i];            var field = getField(fields, i);            (typeof(value) === 'object') {              if(field.type.type === constants.FIELD_COMPLEX) {                var complexMetadata = util.getMetadata(field.type.complexType);                if(field.fieldType.search === constants.FIELD_COMPLEX) {                  var complexFields = util.getEntityFields(complexMetadata);                  var nestFields = field.searchable.fields;                  var selectedFields = $filter('selectedFields')(complexFields, nestFields, field);                  rootifyQuery(query, value, complexMetadata, selectedFields);                  continue;                }                rootifyQuery(query, value, complexMetadata);                continue;              }              (field.searchConf.multiplicity === constants.MULTIPLICITY_MANY) {                if(!value instanceof Array) {                  }                value = value.join(',');              }              (field.searchConf.policy === constants.VALIDATOR_RANGE) {                . Value = value :D              }            }            -object values go as-is            if(!!value || value === false || value === null || value === 0) {              query[i] = value;            }          }        }            if (!pageData.init) {        var query = rootifyQuery($scope.query);        $scope.submit(query);        pageData.init = true;      } else {    	  = constants.REFRESH_SEARCH_KEY + entityType;          console.log(common.read(refreshSearchKey));          if (common.read(refreshSearchKey)) {        	  $scope.submit($scope.query);        	  common.deleteKey(refreshSearchKey);          }      }      $scope.toggleFilter = function() {        if($scope.entityMetadata.searchable === null) {          return;        }        if($scope.filterOpened) {          $scope.hideFilter();        }        else {          $scope.showFilter();        }      };            $scope.hideFilter = function() {        $scope.filterOpened = pageData.filterOpened = false;        $scope.filterClass = pageData.filterClass = 'filterHide';        $scope.resultTableWidth = pageData.resultTableWidth = 'widthUp';      };      $scope.showFilter = function() {        $scope.filterOpened = pageData.filterOpened = true;        $scope.filterClass = pageData.filterClass = 'filterShow';        $scope.resultTableWidth = pageData.resultTableWidth = 'widthDown';      };      $scope.currentItems = function() {    		if ($rootScope.paginationData[entityType].count > 0) {    			  var items = $rootScope.paginationData[entityType].offset * $rootScope.paginationData[entityType].limit;    			  $rootScope.paginationData[entityType].currentItems = (items > $rootScope.paginationData[entityType].count)? $rootScope.paginationData[entityType].count : items;    			  $rootScope.paginationData[entityType].startingItem =  (($rootScope.paginationData[entityType].offset - 1)*$rootScope.paginationData[entityType].limit)+1; = $rootScope.paginationData[entityType].startingItem +  parseInt($rootScope.paginationData[entityType].limit)-1;    			  $rootScope.paginationData[entityType].endingItem = (endingItem > $rootScope.paginationData[entityType].count)?$rootScope.paginationData[entityType].count:endingItem;    		} else {    			$rootScope.paginationData[entityType].currentItems = 0;    		}     	  };  	  $scope.paginationSubmit = function() {        $scope.paginationData[entityType].limit = parseInt($scope.paginationCount);    		$scope.submit($scope.oldQuery);  		$scope.submit($rootScope.currentQuery[entityType]);  	  };  	        $scope.paginationUpdate = function() {        $rootScope.paginationData[entityType].count = $routeParams.total;        $scope.currentItems();      };            $scope.$on('entity-search', function (conf, data){    	  if(entityType == data.type) {    		  $scope.submit();    	  }      });  	  	  $scope.report = function (type) {        var queryReport = angular.copy($scope.query);        var sendQuery = {}; 	      rootifyQuery(sendQuery, queryReport); 	      sendQuery.path=metadata.apiPath;		  delete sendQuery.limit;		  delete sendQuery.offset;  		  $rootScope.operations.requestLoading('searchReport_' + type);  		  = localEndpoint.search(sendQuery, function() {      (by page)      $rootScope.operations.freeLoading('searchReport_' + entityType);  	   .generate({typeEntity: entityType, typeReport: type}, searchReport, 	    	(resp) {			   .log(resp);			   = new Date().getTime();			   ;	    	  			   ;					 (resp.mimetype.indexOf("pdf") > -1) {						= 'data:' + resp.mimetype + ';base64, ' + resp.value;						= ".pdf";					 }	else if (resp.mimetype.indexOf("excel") > -1) {						= 'data:' + resp.mimetype + ';base64, ' + resp.value;						= ".xls" ;					 } else {						= escape(window.atob(resp.value));						= util.convertUtf8ToWindow1250(unBase64);						= window.btoa(encoded);						= 'data:' + resp.mimetype + ';base64, ' + reBase64;						= ".csv" ;					 }			   .downloadFile(href, 'report_' + timestamp + extension);	     }, 	     () {	     .error('POST Error');			   $rootScope.operations.addAlert(constants.ALERT_TYPE_ERROR, 'global.operation-incomplete'); 	     });  		  });	        	 	};            $scope.dispatchSearchAction = function(action) {        var queryObj = {};        rootifyQuery(queryObj, $scope.query);        = {          : true,          query: queryObj,          metadata: $scope.entityMetadata,          results: $scope.searchResults,          self: $scope        };        $scope.operations.dispatchAction(action, parameters);      };      $scope.$on('entity-search', function(evt, data) {        if(data.entityType === entityType) {          $scope.submit();        }      })  	    	}]);'use strict';/** * @ngdoc controller * @name Konga Reference.controller:EntityUpdateCtrl * @description * # EntityUpdateCtrl * Controller used for update ENTITY entities. It is route provides information about what type of entity we are searching for. *  *  # Local endpoint * Using the {@link Konga Reference.Api api} service, and sending the `entityType` parameter defined above, the service returns the proper endpoint, depending on which type of entity is received. Afterwards all CRUD operations between the UI and the web service will be performed to the appropriate endpoint.  * *  * # Pagination * To avoid retrieving too many results at once, they are paginated so the user could only see the number of results she decides.  * <br /> * * * @param {$scope} $scope Local scope for the controller * @param {Api} api Api connector for REST service connection * @param {$routeParams} $routeParams Parameters of the route * @param {Common} common Common storage * @param {$rootScope} $rootScope Global scope (for receiving propagated data) * @param {$filter} $filter Filters for managing data * @param {Scaffold} scaffold Used to generate new entities * @param {$timeout} $timeout for returning value of registering a timeout function is promise, which will resolved when the timeout is reached and the timeout function is executed. * @param {permissionManager} permissionManager Service * @param {FieldMapper} filedMapper for managing the connection between the entities and their forms within the UI. */angular.module('konga').controller('EntityUpdateCtrl', ['$scope', '$routeParams', 'api', 'standardApi', 'common', 'fieldMapper', '$filter', '$rootScope', 'scaffold', '$timeout', 'permissionManager',   	function ($scope, $routeParams, api, standardApi, common, fieldMapper, $filter, $rootScope, scaffold, $timeout, permissionManager) {	  	= $routeParams.entityType;		var entityId	= $routeParams.entityId;		$scope.alreadyValidated = false;		function updateChanges() {			= false;			if ($scope.changes.length > 0) {			  = true;			}			$scope.$emit('changes', { pageId: pageData.pageId, hasChanges: hasChanges });			$scope.$emit('changesCtrOperat', { type: entityType, hasChanges : hasChanges });		}		function verifyMatchType(matchType, fieldValue, triggerValue) {			var matches = false;			switch(matchType) {	        	case constants.TRIGGER_MATCH_TYPE_EXACT:	        		matches = (fieldValue+"") === triggerValue;	        		break;	        	case constants.TRIGGER_MATCH_TYPE_RANGE:	        		matches = fieldValue >= triggerValue;	        		break;	        	}	        	;		}		function verifyTrigger(trigger, value, okHandler, koHandler) {			var matchType = trigger.matchType;        	var matches = false;        	(trigger.match) {        	case constants.TRIGGER_MATCH_VALUE:        		matches = verifyMatchType(matchType, value, trigger.value);        		break;        	case constants.TRIGGER_MATCH_LENGTH:        		var length = 0;        		if (value != null) length = value.length;        		matches = verifyMatchType(matchType, length, trigger.value);        		break;        	}	          ?          if (matches) {            = [];          	for(var f = 0; f < trigger.parameters.length; f++) {          		var strParam = trigger.parameters[f];          		var arrParam = strParam.split('#');          		var param = null;          		switch(arrParam[0]) {          		case constants.TRIGGER_PARAM_LABEL:          			param = arrParam[1];          			break;          		}          		params.push(param);          	}            (trigger.type) {            case constants.TRIGGER_TYPE_CONFIRM:				(trigger.moment == constants.TRIGGER_MOMENT_IMMEDIATE && trigger.name == 'disable-entity'){            		            		if($scope.creating == undefined || $scope.creating == null || $scope.creating == false) {            			?            			if($scope.entityUpdate.$invalid || $scope.invalid) {            				var actionDefinition = {            					name: 'action-form-invalid'            				};            				$rootScope.operations.dispatchAction(actionDefinition);            				return;            			}            			$rootScope.operations.confirm(params[0], params[1], okHandler, koHandler);            		}            	}            	else{            		$rootScope.operations.confirm(params[0], params[1], okHandler, koHandler);            	}              break;             case constants.TRIGGER_TYPE_ALERT:             	$rootScope.operations.notify(params[0], params[1]);              break;            :              break;            }          }		}		function verifyTriggers(moment, metadata, value, okHandler, koHandler) {	        (moment) {			.TRIGGER_MOMENT_IMMEDIATE: 				var triggers = $filter('filter')(metadata.triggers, { moment: moment });		      	for (var i = 0; i < triggers.length; i++) {	 				verifyTrigger(triggers[i], value, okHandler, koHandler);		        } 				break; 			case constants.TRIGGER_MOMENT_COMMIT: 				angular.forEach(metadata.fields, function(field) { 					var triggers = $filter('filter')(field.triggers, { moment: moment }); 					var fieldValue = value[field.name];			      	for (var i = 0; i < triggers.length; i++) {		 				verifyTrigger(triggers[i], fieldValue);			        } 				}); 				break;			}		}		(¿?¿?¿?¿?)		var metadata = $scope.entityMetadata = common.getMetadata(entityType);		var localEndpoint = api.getLocalEndpoint(metadata.name);		$scope.entity = {};		$scope.params = {};		, as it's a 'standard' form      	$scope.formStyle = '';      	switch($scope.metadata.updateStyle) {      	case constants.FORM_STYLE_HORIZONTAL:      		$scope.formStyle = 'form-horizontal';      		break;      	}			    $scope.deletable = $scope.entityMetadata.deleteable != null && (entityId !== constants.NEW_ENTITY_ID);	    $scope.disabledDelete = false;	    		var allFields = util.getEntityFields($scope.entityMetadata);		$scope.fields = $filter('filter')(allFields, { editable: true });		= $scope.productCodes = common.read('product-codes');		$scope.showActions = true;		var configuration = $scope.entityMetadata.configuration;		var buttonConfiguration = $filter('filter')(configuration, { key: constants.UPDATE_HIDE_BUTTONS }, true)[0];		if(buttonConfiguration && buttonConfiguration.value === 'true') {			$scope.showActions = false;		}		var pageData = $rootScope.pageData;				var validationData = null;		$scope.invalid = false;		$scope.customDisableValider = false;		if(pageData.init) {			$scope.entity = pageData.entity;			$scope.changes = pageData.changes;			validationData = pageData.validationData;			if($rootScope.pageData.creating){				$scope.creating = $rootScope.pageData.creating;			}						updateChanges();		} 		else {			validationData = pageData.validationData = {};			(entityId != constants.NEW_ENTITY_ID) {			  $rootScope.operations.requestLoading('update_' + entityId);			  = metadata.apiPath;			  = common.read(entityId);			  if(entity) {			  	$scope.entity = pageData.entity = entity;			  	entityId = util.getEntityId(metadata, entity);			  }			  else {				  $scope.entity = pageData.entity = localEndpoint.get({path: path, id: entityId}, function(data) {					: (Future general annotation rework)annotate a custom-action on the  resultClick from materiel and execute a function to control if ctrOperat is valid					if(entityType==="Materiel" && !data.validCtrOperat){						$rootScope.operations.notify('entity.materiel.warning-ctr-operat-title', 'entity.materiel.warning-ctr-operat');					}				    pageData.original = angular.copy($scope.entity);				    $rootScope.operations.freeLoading('update_' + entityId);				    if(entityType == 'ctrOperat'){						$scope.entity.societes = $scope.entityMetadata.societes;						$scope.entity.agences = $scope.entityMetadata.agences;						$scope.entity.secteurs = $scope.entityMetadata.secteurs;						$scope.entity.ctrMecaniques = $scope.entityMetadata.ctrMecaniques;						$scope.entity.chantieres = $scope.entityMetadata.chantieres;					}				  });			  }			} else {			  $scope.creating = true;			  $rootScope.pageData.creating = $scope.creating;			  var newEntity = scaffold.newEntity($scope.entityMetadata, localEndpoint);			  			  $scope.entity = pageData.entity = newEntity;			  pageData.original = angular.copy($scope.entity);			  .deleteKey('new-entity'); 			}			$scope.changes = pageData.changes = [];			pageData.init = true;		}		function waitEntityResolve(escaped, path, extraPath) {			(escaped.$resolved !== false) {	        }	        {	          var resolveWatcher = $scope.$watch('entity.' + path + extraPath + '.$resolved', function() {	            if(escaped.$resolved) {	              	              /*	               * Let's propagate!!	               */	              = util.getEntityFields($scope.entityMetadata);	              (var i = 0; i < fields.length; i++) {	                = fields[i];	                = field.fieldPath;	                /*	                 * With the path of the updated field, we could know if a field is related	                 * by comparing index of.	                 * e.g. path = 'parentAgence' & fieldPath = 'parentAgence.parentSociete.codeEds' => RELATED	                 */	                var fieldRelated = fieldPath.indexOf(path) === 0;	                ?	                if (fieldRelated) {	                  var message = {	                    value: $filter('mapField')($scope.entity, fieldPath)	                  };	                  $scope.$broadcast('update_' + fieldPath, message);	                }	              }	              resolveWatcher();	            }	          });	        }		}				function hasPermission(permission) {			var isAllowed = false;			(permissionManager.isAllowed(permission)) {  				  isAllowed = true;    								  = $scope.entity;				  				  -role 				  var emptyRoleForSomeCtrOperat = false;				  if(entity.hasOwnProperty(constants.USER_ID)){					  if(entity.roleCoUser==null || entity.roleCoUser.length==0){						  $rootScope.operations.notify('entity.user.warning-no-pair-role-ctr-operat-title', 'entity.user.warning-no-pair-role-ctr-operat');					  }else{					  						  for(var i=0;i<entity.roleCoUser.length;i++){							  => ERROR							  if(entity.roleCoUser[i].role==null || entity.roleCoUser[i].role.length==0){ 								  emptyRoleForSomeCtrOperat = true;								  break;							  }						  }					  }				  }				  				  ($scope.entityMetadata.name == constants.SOURCE_ROLE){					  if(entity.relActionRoles==null || entity.relActionRoles.length==0){						  $rootScope.operations.notify('entity.user.warning-no-actions-role-title', 'entity.user.warning-no-actions-role-message');					  }				  }				  				  if(emptyRoleForSomeCtrOperat){					  $rootScope.operations.notify('entity.user.warning-no-role-ctr-operat-title', 'entity.user.warning-no-role-ctr-operat','error');					  isAllowed = false;				  }  			}  			  			if(!isAllowed && !emptyRoleForSomeCtrOperat){ $rootScope.operations.dispatchAction({ name: 'action-forbidden'}, {});  			}  			return isAllowed;		}								$scope.operations = {							dispatchEntityAction: function(name) {				$scope.alreadyValidated = true;				-enable the validate button (delayed)				$timeout(function() {					$scope.alreadyValidated = false;				}, 3000);				= $scope.entityMetadata.overrideDefaults;		  		var matchingActions = null;		  		if(overrideDefaults.length) {		  			matchingActions = $filter('filter')(overrideDefaults, { overrides: name });		  		}						  		var actionParams =  {	  					id: entityId, 	  					entityType: entityType, 	  					self: $scope, 	  					item: $scope.entity,	  					data: $scope.params	  			};		  						switch(name){			  	case 'save':			  		var permission = $scope.entityMetadata.editable;					(hasPermission(permission)) {			  						  	    (matchingActions && matchingActions.length) {				  			$rootScope.operations.dispatchActionBatch(matchingActions, actionParams);				  		} else {				  		$scope.operations.saveEntity();				  		}				  						  		= true, when we comeback to search screen, it will run the search again						var refreshSearchKey = constants.REFRESH_SEARCH_KEY + entityType;						common.store(refreshSearchKey,true);				  							} 			  					  		break;			  	case 'delete':			  		;				}			},											updateChanges: function() {				updateChanges();			},									saveEntity: function(handlerOK, handlerKO) {				var actionParams =  {		  					id: entityId, 		  					entityType: entityType, 		  					self: $scope, 		  					item: $scope.entity,		  					params: $scope.params				};				(constants.TRIGGER_MOMENT_COMMIT, $scope.entityMetadata, $scope.entity);				var entity = $scope.entity;				function handlerDefaultOK(data) {					actionParams.data = data;					$rootScope.operations.dispatchAction({name: 'save-ok'}, actionParams);				}				function handlerDefaultKO(error) {					actionParams.error = error;					$rootScope.operations.dispatchAction({name: 'save-ko'}, actionParams);				}				if (!handlerOK) handlerOK = handlerDefaultOK;				if (!handlerKO) handlerKO = handlerDefaultKO;				$scope.params.path = metadata.apiPath;								 (entityId === constants.NEW_ENTITY_ID) {				    .$create($scope.params, handlerOK, handlerKO);				  } else { 				    .$save($scope.params, handlerOK, handlerKO);				  }			},			cancelUpdate: function() {							  .init = false;			  $rootScope.operations.closeTabById(pageData.pageId);			},			: function () {() {$scope.operations.saveEntity();}() {}$rootScope.operations.confirm('message.entiteDeletable.deleting.title', 'message.entiteDeletable.deleting.message', okSaveEntity, koSaveEntity);},						deleteEntity: function() {										var actionParams =  {	  					id: entityId, 	  					entityType: entityType, 	  					self: $scope, 	  					item: $scope.entity,	  					params: $scope.params			    };								function okDeleteEntity() {					var path = $scope.entityMetadata.apiPath;					localEndpoint.delete({ path: path, id: util.getEntityId($scope.entityMetadata, entity)}, 							function success() {								$rootScope.operations.addAlert(constants.ALERT_TYPE_SUCCESS, 'message.action-confirmation.delete.success'); 								.init = false;								$scope.$emit('changes', { pageId: pageData.pageId, hasChanges: false });								$rootScope.operations.closeTabById(pageData.pageId);							}, 							function error(error) {																							actionParams.error = error;								$rootScope.operations.dispatchAction({name: 'delete-ko'}, actionParams);															});				}											function koDeleteEntity() {									}		      				= $scope.entityMetadata.deleteable;	  			if(permissionManager.isAllowed(permission)) {					var entity = $scope.entity;		 			    (entityId !== constants.NEW_ENTITY_ID) {					  $rootScope.operations.confirm('message.delete-entity.title', 'message.delete-entity.message', okDeleteEntity, koDeleteEntity);				    }					    				    = true, when we comeback to search screen, it will run the search again					  var refreshSearchKey = constants.REFRESH_SEARCH_KEY + entityType;					  common.store(refreshSearchKey,true);	  			} else {		  			 var forbidden = {		  			 	name: 'action-forbidden'		  			 };		  			$rootScope.operations.dispatchAction(forbidden);	  			}	  			},					changeEntityField: function(metadata, result) {				() {					var refreshSearchKey = constants.REFRESH_SEARCH_KEY + entityType;					common.store(refreshSearchKey,true);            		$scope.operations.saveEntity();            	}            	function koHandler() {            		.	                var undoValue = angular.copy(result);	                undoValue.text = oldValue;	                $scope.operations.updateEntityField(metadata, undoValue, $scope.entity);	                $scope.$broadcast('update_' + metadata.owner + '_' + metadata.name, {});            	}				var fieldValue = result.text;				if ($scope.entity.$resolved === false) {					return;				}				?				var oldValue = $filter('mapField')(pageData.original, metadata);				var differs = fieldValue !== oldValue;			    var index = $scope.changes.indexOf(metadata.name);			    ?			    if (differs && index === -1) {			      $scope.changes.push(metadata.fieldName);			      	(constants.TRIGGER_MOMENT_IMMEDIATE, metadata, fieldValue, okHandler, koHandler);			    } else if(!differs && index !== -1) {				  ?			      $scope.changes.splice(index, 1);			    }			    updateChanges();			    			    return differs;			},						updateEntityField: function(metadata, value, entity, parentField, parentEntity) {			  = fieldMapper.unmapField(metadata, entityType, entity, value, parentField, parentEntity);			  			  if (result) {			    = result.escaped;			    if (escaped) {			      (see if field type is 'complex')			      var fieldType = metadata.fieldType;			      var multiplicity = metadata.multiplicity;			      if (fieldType === constants.FIELD_COMPLEX || fieldType == constants.FIELD_LIST) {			    	, we create an array only with it			      	= result.path;			      	var extraPath = '';			      	if(escaped.$resolved !== false) {				      	, we update the field as-is				      	if (!escaped.length) {				      		var eventName = 'update_' + metadata.owner + '_' + metadata.name;				      		$scope.$broadcast(eventName, {});				      	}				      	(var i = 0; i < escaped.length; i++) {				      		if (multiplicity === constants.MULTIPLICITY_MANY) {				      			extraPath += '[' + i + ']';				      		}				      		waitEntityResolve(escaped[i], path, extraPath);				      	}			      	} else {			      		waitEntityResolve(escaped, path, '');			      	}			      }			    }			  }			  return result;			}		};		$scope.$on('entity-deletable', function(conf, data) {			$scope.deletable = data.deletable;			$scope.disabledDelete = data.disabledDelete;				});				$scope.$on('entity-updatable-custom', function(conf, data) {			$scope.customDisableValider = data.disabledUpdate;						});				$scope.$on('discard', function(conf, data) {			if (data.pageId === pageData.pageId) {			  ?			  if (entityType !== 'new') {			    $scope.entity = pageData.entity = localEndpoint.get({id: entityType});			  }			}		});		$scope.$on('tab-has-changes', function(conf, data) {						(data.hasChange) ? $scope.changes.push(data.field) : $scope.changes.pop(data.field);			updateChanges();		});		function controlValidation() {			$scope.invalid = false;			for(var field in validationData) {				if(validationData[field].length) {					$scope.invalid = true;					break;				}			}		}		controlValidation();		$scope.$on('form-invalid', function(conf, invalid) {			var fieldName = invalid.owner + '-' + invalid.field;			var validation = invalid.validation;			var valid = invalid.valid;			if(valid) {				if(validationData[fieldName]) {					var index = validationData[fieldName].indexOf(validation);					if(index !== -1) {						validationData[fieldName].splice(index, 1);					}					if(!validationData[fieldName].length) {						delete validationData[fieldName];					}				}			}			else {				if(!validationData[fieldName]) {					validationData[fieldName] = [];				}				var index = validationData[fieldName].indexOf(validation);				if(index === -1) {					validationData[fieldName].push(validation);				}			}			controlValidation();		});				$scope.$on('form-reset-invalid-date', function() {			(var name in validationData) {			    if (validationData.hasOwnProperty(name)) {			    	var clone = validationData[name].slice(0);			    	for (var i = 0 ; clone != undefined && i < clone.length; i++) {				        (clone[i]) {						case "DATE_GE":						case "DATE_GT":						case "DATE_LE":						case "DATE_LT":								validationData[name].splice(i, 1);							if (validationData[name].length == 0) {								delete validationData[name];							}							break;						}			    	}			    }			}			controlValidation();		});		$scope.$on('closeCtrOperat', function() {			$rootScope.operations.closeTabById(pageData.pageId);		});		$scope.$on('createCtrOperat', function() {			var refreshSearchKey = constants.REFRESH_SEARCH_KEY + entityType;			common.store(refreshSearchKey,true);			$scope.operations.saveEntity();		});  }]);'use strict';/** * @ngdoc controller * @name Konga Reference.controller:KongaCtrl * @module Konga Reference * @description * This must be the root controller of the application, and it's suggested to be placed at the `<body>` element. It contains all common {@link Standards.Operations `operations`}.  *   *  * * # Tab management * The application uses tabs to locate their content, and separate it from other sections with different content. All functionalities of this tab management are located within this controller.  * ## Adding a tab * You can add a new tab by including a new <i>tab definition</i> object inside the tab stack, which lays under the `$scope`. This stack is propagated to the `$rootScope` to allow other controllers to access such information. * A <i>tab definition</i> must be a plain JS object, with the following structure: * ``` * { *		*		id: tabId,  * *		*		title: tabTitle,  * *		(i.e. the route) *		href:'/entity/' + entityMetadata.name + '/search',  * *		*		closable: true, * *		*		entityMetadata : entityMetadata *	} * ``` * The example above is the exact tab object that's used to launch an <b>ENTITY search</b> form, with a given <i>metadata</i>. Within the `entityMetadata` parameter is located the definition of the entity, which may be required elsewhere. * * ## Remove tabs * Tabs are configured so they could be closed directly by the user via a small &2718; located on the tab's header. This is only possible if the tab has its `closable` flag set to `true`. * Internally, tab closing is just a matter of removing its definition from the stack. `Angular` and `ui.bootstrap` will handle its removal from the view. * * ## Predefined methods * There are several methods within this controller that provide tab management for the existing tabs that the application use. This eases the development as the methods generate the tab object automatically, and the tab is brought to front when created. All such methods are part of an object called `operations`, that belongs to the local `$scope` and it's furthermore propagated through the `$rootScope` to be accessible by the other controllers.  *  * ### goHome * By calling this function, a `/home` tab will be created, and the location will change to the application's home page. *  * ### openEntitySearch * It creates a new tab for <i>entity</i> searching. It <b>must</b> receive an entity definition, like the ones defined within the {@link Konga Reference.Metadata metadata} service calls. * * ### openEntityUpdate * When called, it launches a new tab whose purpose is to update an <i>entity</i> It must receive the {@link Konga Reference.Metadata metadata} information from the entity, as well as the entity itself. * * ### openEntityCreate * This method does the exactly same operation as the `openEntityUpdate`, but with the purpose of creating a new <i>entity</i>. It only requires to receive the {@link Konga Reference.Metadata metadata} information, and a new {@link Konga Reference.Scaffold scaffold} object for the received entity type will be created.  *  * # Notifications * This controller handles the notifications, that are shown to the user in the form of a <i>bootstrap</i> `alert`. Every controller within the application can use this system, by calling the operation `addAlert` available on the `$rootScope`. It's useful to notify the user when a server-related operation finished, both for success and error response types. Notification system is engaged on any place where the `$rootScope` dependency is included.  * *  * # Loading processes * When the data required to use some specific view is not yet received, you can append a loader to the application, that would block every possible interaction with the interface until the loading process ends. For such purpose, you have the possibility of <b>requesting a load</b>, and of <b>freeing it</b> once your data is ready. You can use the operations `requestLoading(code)` and `freeLoading(code)`, where `code` is a unique string that identifies the source who requested the loader. The value of such variable is up to you, but it should be unique in order for the loader to work properly. Both operations are available from the `$rootScope.Operations` object.  * * @param {$scope} $scope Contains the scope variables for the controller * @param {$location} $location Controls the location of the app (for changing paths) * @param {$filter} $filter Uses filters to manage data * @param {$rootScope} $rootScope Propagates functionality to other levels * @param {Common} common Common methods for storing data  * @param {Scaffold} scaffold Used to create new objects for the entities */angular.module('konga')	.controller('KongaCtrl', ['$scope', '$location', '$filter', '$rootScope', '$timeout','common', 'scaffold', 'Metadata', 'dialogs', '$translate', 'userData', 'auth', 'User', '$cookieStore', 'actionManager', '$modal', 'permissionManager', 'kongaConfig', 		function($scope, $location, $filter, $rootScope, $timeout,common, scaffold, Metadata, dialogs, $translate, Session, auth, User, $cookieStore, actionManager, $modal, permissionManager, kongaConfig) {			$scope.configConstants = kongaConfig;			/**			 * @name tabs			 * @object			 * @description			 * Tabs array			 * Object for home tab. 			 * Tab must have id, title to display, href if change controller needed,			 * closable set true to display close tab button, templateInclude is the html template to display in the tab content.			 */			$rootScope.tabs = $scope.tabs = [];			$scope.tabId = null;			$scope.tabExtra = {};			$rootScope.alerts = $scope.alerts = [];			$rootScope.tabWatch = $scope.tabWatch = {				enabled: true			};			$scope.loading = [];			$scope.loadingMessage = null;			.js		  	$rootScope.Operations = $scope.Operations = {		  		/**		  		 * @ngdoc method		  		 * @name addAlert		  		 * @methodOf Standards.Operations		  		 * @param {String} type The type of alert (e.g. `success`, `error`). It inherites _Bootstrap_'s `bg-...` classes.		  		 * @param {String} message The message for the alert		  		 * @param {Object=} parameters If the message provided is a placeholder for a locale-provided text, you can give the translator a key-value parameters for the message.		  		 * @description		  		 * Show a toast alert to the user, with a translatable/parametrizeable message.		  		 */		  		addAlert: function(type, msg, parameters) {		  			var alert = {		  				type: type,		  				msg: msg,		  				parameters: parameters ? parameters : {},		  				expired: false		  			};		  			 var newLength = $scope.alerts.push(alert);		  					  			$timeout(function() {		  				$scope.alerts.splice(newLength-1, 1);		  				 alert.expired = true;		  	          }, 4000); },		  		/**		  		 * @ngdoc method		  		 * @name removeAlert		  		 * @methodOf Standards.Operations		  		 * @param {Number} index the position of the alert within the stack.		  		 * @description		  		 * Removes an alert from the stack, and therefore from the screen. This method is executed automatically after alert timeout's reached		  		 */		  		removeAlert: function(index) {		  			$scope.alerts.splice(index, 1);		  		},		  		/**		  		 * @ngdoc method		  		 * @name confirm		  		 * @methodOf Standards.Operations		  		 * @param {String} title The title for the confirmation dialog.		  		 * @param {String} message The message for the confirm dialog		  		 * @param {Function=} okHandler Callback to execute when the user confirms		  		 * @param {Function=} koHandler Callback to execute when the user cancels		  		 * @param {Object=} params Parameters for the translation messages and the handlers.		  		 * @description		  		 * Shows a confirm dialog, and execute custom actions depending on user's response.		  		 */		  		confirm: function(title, message, okHandler, koHandler, params) {		  			var dlg = null;		  			var localeTitle = $filter('translate')(title, params);		  			var localeMessage = $filter('translate')(message, params);		  			dlg = dialogs.confirm(localeTitle, localeMessage);			        dlg.result.then(function(btn) {			        	if (okHandler) {			        		okHandler(btn, params);			        	}			        },function(btn){			        	if (koHandler) {			        		koHandler(btn, params);			        	}			        });		  		},		  				  		/**		  		 * @ngdoc method		  		 * @name notify		  		 * @methodOf Standards.Operations		  		 * @param {String} title The title for the confirmation dialog.		  		 * @param {String} message The message for the confirm dialog		  		 * @param {String=} [type=notify] Type of dialog (inherited from Bootstrap's `bg...` classes)		  		 * @param {Object=} params Parameters for the translation messages and the handlers.		  		 * @description		  		 * Shows a notification to the user.		  		 */ 		  		notify: function(title, message, type, params) {		  			, we notify		  			if(!type) type = 'notify';		  			var actionParameters = params ? params.parameters : {};		  			if(type === 'confirm') {		  				this.confirm(title, message, params.okHandler, params.koHandler, actionParameters);		  				return;		  			}		  			var dlg = null;		  			var localeTitle = $filter('translate')(title, actionParameters);		  			var localeMessage = $filter('translate')(message, actionParameters);		  			dlg = dialogs[type](localeTitle, localeMessage);		  		},		  		/**		  		 * @ngdoc method		  		 * @name goHome		  		 * @methodOf Standards.Operations		  		 * @description		  		 * Takes the user to the home screen. You must define the `/home/` route with home's content		  		 */		  		goHome: function() {		  			var homeTab = {						id:'home', 						title: 'message.tabs.home', 						href:'/home/', : false,						type: constants.TAB_TYPE_HOME					};					this.addTab(homeTab);		  		},		  		/**		  		 * @ngdoc method		  		 * @name goAdmin		  		 * @methodOf Standards.Operations		  		 * @description		  		 * If your application has an _admin_ section, use this link to go to that page. You must direct the `/admin/` route to the admin's content.		  		 */		  		goAdmin: function() {		  			var homeTab = {						id:'admin', 						title: 'message.tabs.admin', 						href:'/admin/', 						closable: true,						type: constants.TAB_TYPE_HOME					};					this.addTab(homeTab);		  		},		  		/**		  		 * @ngdoc method		  		 * @name openEntitySearch		  		 * @methodOf Standards.Operations		  		 * @param {Entity|String} metadata The metadata of the entity (or it's name) to be searched.		  		 * @oaram {Object=} params Parameters to create custom configuration for the pane		  		 * @description		  		 * Opens an entity-search tab to search an entity.		  		 */		  		openEntitySearch: function(entityMetadata, params) {		  			if(typeof entityMetadata === 'string') {		  				entityMetadata = util.getMetadata(entityMetadata);		  			}		  			= constants.ENTITY_ID_PREFFIX + 		  						entityMetadata.name + 		  						constants.SEARCH_SUFFIX;		  			var tabTitle = 'message.tabs.entity.search';		  			var extra = $scope.tabExtra[tabId] = {};		  			extra.label = $filter('translate')(entityMetadata.label);		  			extra.labelPlaceholder = entityMetadata.label;		  			var tab = {						id : tabId, 						title : tabTitle, 						href : '/entity/' + entityMetadata.name + '/search/', 						closable : true,						: entityMetadata,						type: constants.TAB_TYPE_SEARCH					};					if(params) {						for(var param in params) {							tab[param] = params[param];						}					}					$scope.Operations.addTab(tab);		  		},		  		/**		  		 * @ngdoc method		  		 * @name openEntityUpdate		  		 * @methodOf Standards.Operations		  		 * @param {Entity|String} metadata The metadata of the entity (or it's name) to be updated.		  		 * @param {Object} entity The entity to be updated		  		 * @oaram {Object=} params Parameters to create custom configuration for the pane		  		 * @description		  		 * Opens an entity-update tab to update a given entity.		  		 */		  		openEntityUpdate: function(entityMetadata, entity, params) {		  			if(typeof entityMetadata === 'string') {		  				entityMetadata = util.getMetadata(entityMetadata);		  			}		  			var entityId = null;		  			if(!params || !params.useEntity) {		  				entityId = util.getEntityId(entityMetadata, entity);		  			}		  			else {		  				entityId = 'stored-entity-' + new Date().getTime();		  				common.store(entityId, entity);		  			}		  			= constants.ENTITY_ID_PREFFIX + 		  					entityMetadata.name + constants.STRING_SEPARATOR + entityId;		  			var entityCode = util.getEntityCode(entityMetadata, entity);		  			= entity ? 		  					'message.tabs.entity.update' : 'message.tabs.entity.create';	  				var extra = $scope.tabExtra[tabId] = {};	  				extra.label = $filter('translate')(entityMetadata.label);	  				extra.code = entityCode;	  				extra.labelPlaceholder = entityMetadata.label;	  					  				var tab = {	  						id : tabId, 	  						title : tabTitle, 	  						href : '/entity/' + entityMetadata.name + '/' + entityId + '/',	  						closable : true,	  						hasChanges : false,	  						: entityMetadata,							type: constants.TAB_TYPE_UPDATE	  				};	  				if(params) {						for(var param in params) {							tab[param] = params[param];						}					}					$scope.Operations.addTab(tab);		  		},		  		/**		  		 * @ngdoc method		  		 * @name openEntityCreated		  		 * @methodOf Standards.Operations		  		 * @param {Entity} metadata The metadata of the entity to be updated.		  		 * @description		  		 * Opens an entity-update tab to create a new entity of the metadata given.		  		 */		  		openEntityCreate: function(entityMetadata, params) {		  			if(typeof entityMetadata === 'string') {		  				entityMetadata = util.getMetadata(entityMetadata);		  			}		  			= entityMetadata.createable;		  			if(permissionManager.isAllowed(permission)) {		  				$scope.Operations.openEntityUpdate(entityMetadata, null, params);		  			}		  			else {		  				var forbidden = {		  					name: 'action-forbidden'		  				};		  				$scope.Operations.dispatchAction(forbidden);		  			}		  		},		  		/**		  		 * @ngdoc method		  		 * @name openModal		  		 * @methodOf Standards.Operations		  		 * @param {Modal} parameters The parameters that define the action. {@link lib.konga.types.Modal `See Modal specification`}		  		 * @description		  		 * Opens an entity-update tab to update a given entity. The parameters are given in a {@link lib.konga.types.Modal `Modal`} object.		  		 */		  		openModal: function(action) {		  			var config = action.parameters.config || {		  				size: 'md'		  			};		  			$rootScope.$broadcast('suspend', {});		  			var currentTab = null;			  			  			var modalInstance = $modal.open({				      templateUrl: action.template,				      controller: action.controller,				      size: config.size,				      resolve:{				  		params: function(){				  			return action.parameters;				  		}					      }				    });						    modalInstance.result.then(function() {				    	$rootScope.$broadcast('resume', {});				    	action.okHandler.apply(action, arguments);				    }, function() {				    	$rootScope.$broadcast('resume', {});				    	action.koHandler.apply(action, arguments);				    });		  		},		  		/**		  		 * @ngdoc method		  		 * @name addTab		  		 * @methodOf Standards.Operations		  		 * @param {Tab} tab The tab configuration		  		 * @description		  		 * Opens a tab with the configured {@link DataTypes.Tab `parameters`}.		  		 */				addTab : function(newTab) {					= $filter('filter')($scope.tabs, { active: true })[0];					= $filter('filter')($scope.tabs, { id: newTab.id }, true);					['active'] = true;					if (!existingTabs.length) {						’un onglet depuis un formulaire de recherche, 						’onglet doit s’ouvrir à la suite du formulaire d’ouverture et non en dernier						if (newTab.type === constants.TAB_TYPE_UPDATE) {							var indexActive = $scope.tabs.indexOf(tabActive);							$scope.tabs.splice(indexActive + 1, 0, newTab);							existingTabs.push(newTab);						} else {							$rootScope.tabs.push(newTab);							existingTabs.push(newTab);						}						= $scope.tabExtra[newTab.id] = {};						(var tabParam in newTab) {						(newTab.hasOwnProperty(tabParam)) {						[tabParam] = newTab[tabParam];						}						}						-up the metadata?						if(!newTab.entityMetadata && newTab.entityType) {							newTab.entityMetadata = util.getMetadata(newTab.entityType);						}						, translate the label						(newTab.entityMetadata) {				  .label = $filter('translate')(newTab.entityMetadata.label);				  .labelPlaceholder = newTab.entityMetadata.label;						}					}										[0].previousTab = tabActive;					$scope.Operations.redirectTo(existingTabs[0]);				},				/**		  		 * @ngdoc method		  		 * @name closeTab		  		 * @methodOf Standards.Operations		  		 * @param {Tab} tab tab to be closed		  		 * @param {Boolean=} force whether to force closing (and discard changes - if any)		  		 * @description		  		 * Closes the tab given. If the tab has change management enabled, and there is any change on the model, a confirmation will show. If you pass force=true, you will override confirmation and the tab will be instantly closed.		  		 */				closeTab : function(tab, force) {					var changesOKHandler = function() {						deleteTab(i, tab);						$scope.$broadcast('discard', { pageId: tab.id });					};					var changesKOHandler = function() {						};					for (var i = 0; i < $rootScope.tabs.length; i++) {						if ($scope.tabs[i].id === tab.id) {														?							if (tab.hasChanges && !force) {								$scope.Operations.confirm(									"message.discard-changes.title", 									"message.discard-changes.message",									changesOKHandler,									changesKOHandler								);							} else {								deleteTab(i, tab);							}							return;						}					}					function deleteTab(index, tab) {						$rootScope.tabs.splice(i,1);						if ($scope.updateData && $scope.updateData['tab.id']) {							delete $scope.updateData['tab.id'];						}						.deletePageData(tab.id);						, go to previously opened one						if(tab.previousTab && $rootScope.tabs.indexOf(tab.previousTab) !== -1) {							$timeout(function() {								$scope.Operations.redirectTo(tab.previousTab);							}, 500);						}											}				},				/**		  		 * @ngdoc method		  		 * @name closeTabById		  		 * @methodOf Standards.Operations		  		 * @param {id} id id of the tab to be closed		  		 * @description		  		 * Closes the tab that matches an id given. If no tab is found, it doesn't do anything.		  		 */								closeTabById: function(id) {					for(var i=0; i<$rootScope.tabs.length; i++){						if ($scope.tabs[i].id === id) {							$scope.Operations.closeTab($scope.tabs[i], false);							break;						}					}				},								/**		  		 * @ngdoc method		  		 * @name closeAllTabs		  		 * @methodOf Standards.Operations		  		 * @param {Boolean=} force whether to force closing (and discard changes - if any)		  		 * @description		  		 * Closes all opened tabs		  		 */				closeAllTabs: function(force) {					var copyTabs = $rootScope.tabs.slice(0);					for(var i=0; i<copyTabs.length; i++){						$scope.Operations.closeTab(copyTabs[i], force);					}				},				/**		  		 * @ngdoc method		  		 * @name redirectTo		  		 * @methodOf Standards.Operations		  		 * @param {Tab} tab tab to be focused		  		 * @description		  		 * Switches the system into a tab. The tab <b>must be</b> in the `tab stack`.		  		 */				redirectTo : function(tab) {										angular.forEach($rootScope.tabs, function(item){item.active = false;});					$rootScope.pageData = $scope.pageData = common.getPageData(tab.id);					$rootScope.pageData.parameters = tab.parameters;					$rootScope.tabs[$rootScope.tabs.indexOf(tab)].active = true;					if ($location.path() !== tab.href) {						$location.path(tab.href);					}					$scope.tabId = tab.id;				},				/**		  		 * @ngdoc method		  		 * @name requestLoading		  		 * @methodOf Standards.Operations		  		 * @param {String} id Unique id for the loader. It will be identified with this parameter for deletion when freed.		  		 * @param {String=} message If defined, appends a message to the loader (useful for heavy loading)		  		 * @description		  		 * Appends a loader into the `loader stack`. When the stack contains elements, the whole screen is blocked until all loaders are freed.		  		 */				requestLoading: function(source, message) {					$scope.loading.push(source);					$scope.loadingMessage = message;				},				/**		  		 * @ngdoc method		  		 * @name freeLoading		  		 * @methodOf Standards.Operations		  		 * @param {String} id Unique id for the loader. It must be the same id given when the loader was requested.		  		 * @description		  		 * Removes a loader from the `loader stack`. When the stack is emptied, the user recovers control of the screen.		  		 */				freeLoading: function(source) {					var index = $scope.loading.indexOf(source);					if (index === -1) {						}					$scope.loading.splice(index, 1);				},				/**		  		 * @ngdoc method		  		 * @name setLoadingMessage		  		 * @methodOf Standards.Operations		  		 * @param {String=} message The message to set into the loading process		  		 * @description		  		 * During longer loading processes, you can redefine the message being shown via this method. The message will be live-updated, and you could provide the user with more information. This method is useful for uploading progresses.		  		 */				setLoadingMessage: function(message) {					$scope.loadingMessage = message;				},				/**		  		 * @ngdoc method		  		 * @name changeLocale		  		 * @methodOf Standards.Operations		  		 * @param {String=} locale The language to change to		  		 * @description		  		 * This mehtod changes the language of the full engine and its running application. It also notifies via a {@link Events.locale-change `locale-change`} event broadcasted to all listening controllers.		  		 */				changeLocale: function(newLocale) {					$scope.selectedLanguage = constants.LANGUAGE_MESSAGE_PREFFIX + newLocale;					= $translate.use();					$translate.use(newLocale);					moment.locale(newLocale);					$scope.$broadcast('locale-change', { 'old': oldLocale, 'new': newLocale });				},								: Add function for Search Action				action: function() {		  			= "action";		  			= 'message.tabs.action.search';		  			$scope.tabExtra.label = $filter('translate')(entityMetadata.label);		  			var tab = {						id : tabId, 						title : tabTitle, 						href : '/action/', 						closable : true,						: entityMetadata					};					$scope.Operations.addTab(tab);		  		},		  		/**				 * Decodes a String and converts it into an action				 * The form of the action String MUST BE:				 *  - Action name				 *  - Entity type				 *  - '#' Entity id (Optional)				 *				 * Parameters are concat using the ':' separator				 */				decodeAction : function(actionStr, dispatch) {					var action = {					  name: '',					  scope: '',					  label: ''					};					var actionParameters = {};					var actionParams = actionStr.split(':');					if(actionParams.length < 2) {					  }					action.name = actionParams[0];					var entityType = actionParams[1];					actionParameters.entityType = entityType;					(var i = 2; i < actionParams.length; i++) {					  var currentParam = actionParams[i];					  ?					  if(currentParam.indexOf('#') === 0) {					    actionParameters.id = currentParam.substring(1);					  }					}					if(dispatch) {						this.dispatchAction(action, actionParameters);					}					return action;				},		  		dispatchAction: function(action, parameters) {		  			if(!parameters) parameters = {}; 		  			actionManager.dispatch(action, parameters);		  		},		  		dispatchActionBatch: function(actions, parameters) {		  			for(var i = 0; i < actions.length; i++) {		  				$scope.Operations.dispatchAction(actions[i], parameters);		  			}		  		}		  				  	};		  	$scope.$on('changes', function(conf, data) {		  		= $scope.tabs;		  		var tab = null;		  		for(var i = 0; i < tabs.length; i++) {		  			tab = tabs[i];		  			if (tab.id === data.pageId) {		  				break;		  			}		  		}		  		if (!tab) {		  			}		  		.hasChanges = data.hasChanges;		  	});		  	$scope.$on('locale-change', function() {		  		(var item in $scope.tabExtra) {		  			var extra = $scope.tabExtra[item];		  			extra.label = $filter('translate')(extra.labelPlaceholder);		  		}		  	});			$scope.showHeader = function() {				return !!userData.user;			};		}]);'use strict';/* * @ngdoc directive * @name uikongaApp.directive:calendarInput * @description * # calendarInput */angular.module('konga')  .directive('calendarInput', function () {    return {      templateUrl: '/konga/views/calendar-input.html',      restrict: 'E',      replace: true,      link: function postLink(scope, element, attrs) {        scope.uiConfig = {	      calendar:{	        height: 600,	        editable: true,	        header:{	          left: '',	          center: 'title',	          right: 'today prev,next'	        },	        firstDay: 1,	        events: scope.value.entity,	        dayClick: function(date, jsEvent, view, resourceObj) {	        	scope.$emit('calendar-day-click', 	        		{ 	        			date: date, 	        			jsEvent: jsEvent, 	        			view: view, 	        			resourceObj: resourceObj 	        		});	        },	        eventClick: function(date, jsEvent, view) {	        	scope.$emit('calendar-event-click', {	        		date: date,	        		jsEvent: jsEvent,	        		view: view	        	});	        },	        eventDrop: function() {	        },	        eventResize: function() {	        },	        eventRender: function(event, element, view) {	        	scope.$emit('calendar-event-render', 	        		{ 	        			event: event, 	        			element: element,	        			view: view	        		});	        }	      }	    };      }    };  });'use strict';/* * @ngdoc directive * @name Konga Reference.directive:fileInput * @description * # fileInput */angular.module('konga')  .directive('fileInput', ['$upload', function () {    return {      templateUrl: '/konga/views/file-input.html',      restrict: 'E',      replace: true,      link: function postLink(scope, element, attrs) {        scope.fileSelected = function(files, event) {          scope.value.files = files;        };      }    };  }]);'use strict';/* * @ngdoc directive * @name uikongaApp.directive:kongaContent * @description * # kongaContent */angular.module('konga')  .directive('kongaContent', ['$filter',   	function ($filter) {	    return {	      templateUrl: '/konga/views/konga-content.html',	      restrict: 'E',	      replace: true,	      link: function postLink(scope, element, attrs) {	        function init() {	        	var appConfiguration = util.getConfiguration();	        		        var appLookAndFeel = constants.LOOK_AND_FEEL_PLAIN;		        var lookAndFeelConf = $filter('filter')(appConfiguration, { key: constants.CONFIG_LOOK_AND_FEEL }, true)[0];		        if(lookAndFeelConf) {		        	appLookAndFeel = lookAndFeelConf.value;		        }		        scope.contentView = '/konga/views/konga-content-' + appLookAndFeel + '.html';	        }	        if(util.metadataObject) {	        	init();	        }	        else {	        	scope.$on('metadata-ready', function() {	        		init();	        	});	        }	      }	    };	  }]);'use strict';/* * @ngdoc directive * @name Konga Reference.directive:kongaSelect * @description * # kongaSelect */angular.module('konga')  .directive('kongaSelect', function () {    return {      restrict: 'A',      link: function postLink(scope, element, attrs) {        scope.removeItem = function(index) {          scope.value.entity.splice(index, 1);          var value = scope.value.text.split(',');                    value.splice(index, 1);          scope.value.text = value.join(',');        }        scope.writeValue = function() {        	if(scope.value.entity instanceof Array) {        		scope.value.entity.splice(0, scope.value.entity.length);        	}        	else {        		scope.value.entity = {};        	}        };      }    };  });'use strict';/* * @ngdoc directive * @name Konga Reference.directive:listInput * @description * # listInput */angular.module('konga')  .directive('listInput', function () {    return {  		templateUrl : '/konga/views/list-input.html',  		restrict: 'E',  		transclude : false,  		replace: true,  		scope : {  			originalFields : '=fields',  			list : '=',  			actions: '=',  			metadata : '=',  			property: '=?',  			setSelectedElements : '=',  			disabledIds : '=',  			dispatchFieldAction : '='  		},  		controller: function ($scope, $filter) {  			$scope.paginate = true;  			= $scope.property.fieldType.configuration[0];  			= $filter('filter')(configuration, { key: constants.SHOW_PAGINATION, value: 'false' }, true);  			if(paginationConfiguration && paginationConfiguration.length) {  				$scope.paginate = false;  			}  			$scope.filteredList = $scope.list;  			function filterList() {				?				if ($scope.property) {					var filter = $scope.property.type.filter;					var newList = $scope.list;					if(filter && filter.length) {						newList = $filter(filter)($scope.list);					}					$scope.filteredList = newList;				}  			}  			var listenerName = $scope.property.owner + '_' + $scope.property.name; 			$scope.$on('updateFilter_'+listenerName, function() {	         	filterList();	        });  			$scope.$watchCollection('originalFields', function(newFields){  					  			$scope.originalFields = newFields;	  			= $filter('orderBy')($scope.originalFields, '+priority.results');		        var allFields = newFields;		        		        $scope.fields = [];				        function divideComplexField(field) {		          var relatedMetadata = util.getMetadata(field.type.complexType);		          var relatedFields = util.getEntityFields(relatedMetadata);		          var nestFields = field.showInResults.fields;		          var selectedFields = $filter('selectedFields')(relatedFields, nestFields);		          for(var fi = 0; fi < selectedFields.length; fi++) {		            if(selectedFields[fi].fieldType.results === constants.FIELD_COMPLEX) {		              divideComplexField(selectedFields[fi]);		            }		            else {		              [fi].derivedPath.splice(0, 0, field);		              $scope.fields.push(selectedFields[fi]);		            }		          }		        }		        (var f = 0; f < allFields.length; f++) {		          var field = allFields[f];		          if(field.type.type === constants.FIELD_COMPLEX && field.fieldType.results === constants.FIELD_COMPLEX && field.showInResults.fields.length) {		            divideComplexField(field);		          }		          else {		            $scope.fields.push(field);		          }        		}  			});  			  			$scope.selectAllItmsData = false;  			$scope.selectedData = false;  			$scope.paginationData = {	  			currentItems : 0,	  			totalItems : 0,	  			limit : $scope.paginate ? 10 : 1000, : 1,	  			maxPages : 1  			};  			$scope.selected = [];  			$scope.selectedIds = {};  			$scope.quickSearchParams = {				value: '',				param:{}			};  			$scope.getTotalItems = function () {  				var totalItems = $scope.paginationData.count = ($scope.list)? $scope.list.length:0;		  		var count = 0;		  		if ($scope.selectedData) {		  			angular.forEach($scope.list, function (item) {		  				if (item.selected) {		  					count++;		  				}		  			});		  			totalItems = count;		  		}		  		return totalItems;  			};  			  			$scope.currentItems = function() {  				var totalItems = $scope.getTotalItems();		    	if (totalItems>0) {		    		var items = $scope.paginationData.offset * $scope.paginationData.limit;		    		$scope.paginationData.currentItems = (items > totalItems)? totalItems : items;		    	} else {		    		$scope.paginationData.currentItems =  0;		    	}   		  	};		  	  		  	  		  	$scope.maxPages = function () {		  		var totalItems = $scope.getTotalItems();		  		$scope.paginationData.maxPages = Math.ceil(totalItems/$scope.paginationData.limit);		  		if ($scope.paginationData.maxPages < $scope.paginationData.offset && $scope.paginationData.maxPages > 0) {		  			$scope.paginationData.offset = $scope.paginationData.maxPages;		  		}		  	};		  	/**		  	 * Handle Table pagination		  	 * @function pageChanged		  	 */			  	$scope.pageChanged = function(orientation) {		  		switch (orientation) {		  			case 'first':		  				$scope.paginationData.offset = 1;		  				break;		  			case 'previous':		  				$scope.paginationData.offset = ($scope.paginationData.offset-1 > 1)? $scope.paginationData.offset-1: 1;		  				break;		  			case 'next':		  				$scope.paginationData.offset = ($scope.paginationData.offset+1 < $scope.paginationData.maxPages)? $scope.paginationData.offset+1: $scope.paginationData.maxPages;		  				break;		  			case 'last':		  				$scope.paginationData.offset = $scope.paginationData.maxPages;		  				break;		  		}		  		if (!orientation || typeof orientation == 'undefined') {		  			$scope.maxPages();		  		}   		  	   		  	    $scope.currentItems();		  	};		  	$scope.selectAllHandler = function () {				var length = ($scope.list)? $scope.list.length:0;				for (var i = 0; i < length; i++) {					if ((typeof $scope.disabledIds !== 'undefined' && !$scope.disabledIds[$scope.list[i].id]) 							|| (typeof $scope.disabledIds === 'undefined')) {						$scope.list[i].selected = $scope.selectAllItmsData;					}				}				$scope.pageChanged();			};			$scope.onDisplaySelectedItems = function() {				$scope.paginationData.offset = 1;				$scope.pageChanged();			};			$scope.onSelectListEds = function () {				$scope.pageChanged();				$scope.filteredList = $scope.list;			};			$scope.quickSearchHandler = function () {				var result = {};				angular.forEach($scope.quickSearchParams.param, function (item, key) {					if (key.indexOf('.')>0) {						var keyList = key.split('.');						result[keyList[0]] = {};						switch (keyList.length) {							case 2:								result[keyList[0]][keyList[1]] = item;							break;							case 3:								result[keyList[0]][keyList[1]] = {};								result[keyList[0]][keyList[1]][keyList[2]] = item;							break;							case 4:								result[keyList[0]][keyList[1]] = {};								result[keyList[0]][keyList[1]][keyList[2]] = {};								result[keyList[0]][keyList[1]][keyList[2]][keyList[3]] = item;							break;						}					}else{						result[key]=item;					}				});				$scope.quickSearchParams.value =	result;				$scope.paginationData.offset = 1;				$scope.pageChanged();			};						if($scope.property.fieldType.update == constants.FIELD_PICK_LIST) {				var validation = $scope.property.validation;				var length = $scope.list ? $scope.list.length : 0;								if(validation.minLength && length < validation.minLength) {.addClass('invalid-min-length');					$scope.$emit('form-invalid', {						field: $scope.property.name,						owner: $scope.property.owner,						validation: 'min-length',						valid: false					});				}			}  			$scope.validate = function () {  				var dataFilter = $filter('filter')($scope.list, { selected: true }, transclude);  		= [];  		(var i = 0; i < dataFilter.length; i++) {				[dataFilter[i].id]=true;				};  		$scope.selectedIds[$scope.edsType] = listIds;  				$scope.setSelectedElements($scope.edsType, dataFilter);  			};  			$scope.cancel = function () {  				$scope.selectAllItmsData = false;  				$scope.selectAllHandler();  			};  			  			/*$scope.dispatchFieldAction = function(action, entitySelected) {		  		var actions = $scope.actions;		  		var matchingActions = null;		  		if(actions.length) {		  			matchingActions = $filter('filter')(actions, { name: action.name });		  		}		  		(matchingActions && matchingActions.length) {		  			$rootScope.operations.dispatchActionBatch(matchingActions, { id: util.getEntityId($scope.metadata, $scope.entity), entityType: $scope.metadata.name, self: $scope, item: $scope.entity, field: $scope.property, entitySelected : entitySelected});		  		}			};*/			var watchers = null;	        $scope.$on('suspend', function() {	          watchers = $scope.$$watchers;	          $scope.$$watchers = [];	        });	        $scope.$on('resume', function() {	          $scope.$$watchers = watchers;	        });  		},  		link : function (scope) {			scope.$watchCollection('selectAllItmsData', scope.selectAllHandler);			scope.$watchCollection('selectedData', scope.onDisplaySelectedItems);			scope.$watchCollection('list', scope.onSelectListEds);			scope.$watchCollection('quickSearchParams.param',scope.quickSearchHandler);			scope.$watchCollection('disabledIds', function () {				console.log('disabledIds '+scope.disabledIds);				});  		}  	};  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Option input * @description * # optionInput */angular.module('konga')  .directive('optionInput', function () {    return {      template: '<div></div>',      restrict: 'E',      link: function postLink(scope, element, attrs) {        element.text('this is the optionInput directive');      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Price input * @description * # priceInput */angular.module('konga')  .directive('priceInput', ['$filter', '$timeout', function ($filter, $timeout) {    return {      templateUrl: '/konga/views/price-input.html',      restrict: 'E',      link: function postLink(scope, element, attrs) {        scope.currency = '';        scope.inner = {          text: '',          timeout: null        };        var configuration = scope.property.fieldType.configuration[0];        var currency = $filter('filter')(configuration, {key: 'CURRENCY'}, true)[0];        scope.currency = currency.value;        scope.$watch('value.text', function() {          scope.formatInput(true);        });        scope.formatInput = function(inverse) {          var value = null;          if(inverse) {            value = $filter('number')(scope.value.text, 2);            scope.inner.text = value;          }          else {            if(scope.inner.timeout) {              $timeout.cancel(scope.inner.timeout);            }            scope.inner.timeout = $timeout(function() {              scope.value.text = scope.inner.text;              .formatInput(true);            }, 1000);          }        };      }    };  }]);'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Raw input * @scope * @restrict E * @description * Defines an input that changes its appearance depending on the type the input field has. * *  *  * @param {Object} property Field to modify with the input * @param {*} vertical TODO Document * @param {Boolean} disabled Defines whether the field is disabled * @param {Function} setValues Function called to set up the values (for complex inputs) * @param {Object} operations Available operations for the directive * @param {Boolean} ngRequired Defines whether the field is required * @param {Object} entity Defines the real entity to manage * @param {Object=} rootEntity Defines the root entity (for complex fields) * @param {Object} metadata Defines the metadata of the entity * @param {Object=} rootMetadata Defines the root metadata (for complex fields) * @param {Function} updateEntity Function to call when the field is updated to update the entity * @param {Function} changeEntity Function to call when the field is updated to control changes * @param {String} mode Defines the mode of the field (i.e. Search, Update). See {@link kongaTools.Constants constants} * @param {Boolean} creating Defines whether the field is in creation mode or in update * @param {Object} parentField Defines the parent field (for complex fields) * @param {Object=} style If set, it overrides the default styling options for the field */angular.module('konga')  .directive('rawInput', ['$filter', '$modal', '$timeout', 'common', 'api', '$rootScope', 'configurationManager', 'standardApi', 'permissionManager', function($filter, $modal, $timeout, common, api, $rootScope, configurationManager, standardApi, permissionManager) {	    return {	      restrict: 'E',	      replace: true,	      scope: {	    	property: '=',	    	vertical: '=',	    	disabled: '=',	    	setValues: '&',	    	operations: '=',	    	ngRequired: '=',	    	entity: '=',	    	rootEntity: '=?',	    	metadata: '=',	    	rootMetadata: '=?',	    	updateEntity: '=onUpdate',	    	changeEntity: '=onChange',	    	mode: '@',	    	creating: '=',	    	parentField: '=',			style: '=?',			index: '=?'	      },	      link: function(scope, element, attrs) {	      		      	var resolveWatcher = null, valueWatcher = null;	      	var init = undefined, initCheck = false, initactive = true, initinactive = false;	      		      	.globalValidation = true;	      	.cascadeEnabled = true;	      	scope.propagateEnabled = true;	      	scope.watchersEnabled = true;	      	if(!scope.rootMetadata) {	      		scope.rootMetadata = scope.metadata;	      	}	      	if(!scope.rootEntity) {	      		scope.rootEntity = scope.entity;	      	}	      	var fieldConfig = scope.config = {	      		hidden: false,	      		init: true	      	};	      	var fieldValue = scope.value = {	      		text: '',	      		list: [],	      		entity: {},	      		date: {	      			startDate: '',	      			endDate: '',	      			comparator: constants.DATE_COMPARATOR_EQUALS	      		},	      		range: {	      			from: '',	      			to: '',	      			comparator: constants.NUMBER_COMPARATOR_BETWEEN	      		},	      		fields: [],	      		files: []	      	};	      	.fieldLabel = scope.property.label;	      	var configurationSource = [];	      	var sourceField = scope.parentField ? scope.parentField : scope.property;	        switch(scope.mode) {	        case constants.SCOPE_SEARCH:	          configurationSource = sourceField.searchable.configuration;	          break;	        case constants.SCOPE_UPDATE:	          configurationSource = sourceField.showInUpdate.configuration;	          break;	        }	        = $filter('filter')(configurationSource, { key: constants.USE_SHORT_LABEL });	      	if(shortLabelConf && shortLabelConf.length && shortLabelConf[0].value === 'true') {	      		scope.fieldLabel = scope.property.shortLabel;	      	}	      	.readonly = false;  			var readonlyConf = $filter('filter')(configurationSource, { key: constants.READ_ONLY, value: 'true' }, true);  			if(readonlyConf && readonlyConf.length) {  				scope.readonly = true;  			}	      	() {	      		return fieldValue.list;	      	}	      	scope.label = '';	      	var related = scope.parentField != null;	      	var entityLabel = null;	      	var entityLabelPlaceholder = null;	      	, the entity type is the entity being updated	      	!	      	if(!related) {	      		entityLabel = $filter('translate')(scope.metadata.label);	      		entityLabelPlaceholder = scope.metadata.label;	      	}	      	else {	      		var relatedMetadata = util.getMetadata(scope.property.owner);	      		entityLabel = $filter('translate')(relatedMetadata.label);	      		entityLabelPlaceholder = relatedMetadata.label;	      	}	      	.extra = {	      		label: entityLabel,	      		labelPlaceholder: entityLabelPlaceholder	      	};			scope.update = function(init) {				var value = '';				if(this.entity && this.entity.$resolved !== false) {					var value;					if(this.mode === constants.SCOPE_UPDATE) {					    value = $filter('mapField')(scope.entity, scope.property);					} else {						value = scope.entity[scope.property.name];					}					(value == null ) {						var parent = scope.parentField;						if (parent) {							var apiNames = parent.apiName;							= scope.mode === constants.SCOPE_SEARCH ? parent.searchable.fields : parent.showInUpdate.fields;							= fields.indexOf(scope.property.name);							(scope) {								value = scope.entity[scope.property.apiName];							}						}					}					, get the source list for the related entity					var complexProperty = null;					var complexEntity = scope.entity;					(scope.property.isSelf) {						complexEntity = scope.rootEntity;					}					if(scope.property.type.type === constants.FIELD_COMPLEX) {						complexProperty = scope.property;					}					else if(scope.parentField && scope.parentField.type.type === constants.FIELD_COMPLEX) {						complexProperty = scope.parentField;					}					if(complexProperty) {						var related = complexProperty.type.complexType;						= common.getMetadata(related);						.value.metadata = realMetadata;						(scope.mode === constants.SCOPE_UPDATE) {							var realEntity;							if(!scope.parentField || scope.parentField.multiplicity === constants.MULTIPLICITY_ONE) {								realEntity = $filter('mapField')(complexEntity, scope.property);																= configurationManager.getConf(constants.JSON_IDENTITY_INFO, 1);								if(configuration.length) {									var followJsonIdentity = configuration[0];									if(followJsonIdentity.value) {										(scope.property.type.type === constants.FIELD_COMPLEX && realEntity && realEntity.reason === constants.JSON_IDENTITY_INFO) {											= util.getMetadata(scope.property.type.complexType);											var apiPath = metadata.apiPath;											var entityId = realEntity.id;											realEntity = standardApi.get({ path: apiPath, id: entityId }, 												function(data) {													.value.entity = data;													var sendValue = angular.copy(scope.value);													var result = scope.updateEntity(scope.property, sendValue, scope.entity);													scope.update(true);												}, function(error) {												});											return;										}									}								}							}							else {								realEntity = [];								for(var i = 0; i < complexEntity.length; i++) {									realEntity.push($filter('mapField')(complexEntity[i], scope.property));								}							}							{								scope.setLabel(realMetadata, realEntity);							}catch(e) {								}														(scope.property.isExtended){								scope.value.extended = scope.property.labelExtended;								scope.value.isExtended = scope.property.isExtended; 							}														scope.value.entity = realEntity;							var entityCode = util.getEntityCode(realMetadata, realEntity);							(entityCode !== null) {								scope.value.text = entityCode;							}							else {								scope.value.text = '';							}														$timeout(function(){								(scope.property.derived) {									var source = scope.parentField;									var	configuration = source.showInUpdate.configuration;									var listenerName = scope.parentField.owner + '_' + scope.parentField.name;									var cascadeConfiguration = $filter('filter')(configuration, { key: constants.CASCADE_UPDATE });									if(cascadeConfiguration.length) {										scope.$emit('reset_cascade_' + listenerName, { reset: false, source: scope.property, configuration: cascadeConfiguration, query: scope.value.text });									}								}							}, 50);						}						, go on						var nestFields = null;						if(scope.mode === constants.SCOPE_SEARCH && scope.property.searchable.fields && scope.property.searchable.fields.length) {							nestFields = scope.property.searchable.fields;						} :)						else if(scope.mode === constants.SCOPE_UPDATE && scope.property.showInUpdate.fields.length) { !							nestFields = scope.property.showInUpdate.fields;						}						?						if(nestFields && init) {							var allFields = util.getEntityFields(realMetadata);							var selectedFields = $filter('selectedFields')(allFields, nestFields, scope.property);							for (var i = 0; i < selectedFields.length; i++){								[i].derivedPath.splice(0, 0, scope.property);								scope.value.fields.push(selectedFields[i]);							}														}						if(scope.mode === constants.SCOPE_SEARCH) {							scope.value.text = value;						}					}					switch(scope.property.type.type) {					case constants.FIELD_COMPLEX:						;					case constants.FIELD_BOOLEAN:						if(scope.mode === constants.SCOPE_SEARCH) {							scope.value.text = value;							if(scope.value.text === '' || scope.value.text === null) {								scope.value.active = true;								scope.value.inactive = true;							}															else {								scope.value.active = !!scope.value.text;								scope.value.inactive = !scope.value.text;							}						}						else {							scope.value.text = !!value;						}						break;					case constants.FIELD_DATE:						if (scope.mode === constants.SCOPE_UPDATE) {							scope.value.text = value;							if (scope.property.fieldType.update == constants.FIELD_DATE) {								scope.value.text = $filter('date')(value, 'yyyy-MM-dd');							} 													} else if (scope.mode === constants.SCOPE_SEARCH) {							scope.value.date = value;						}						break;					default:						if(scope.property.type.type === constants.FIELD_NUMBER && value!="" && value!=null){							scope.value.text = Number(value);						}else{							scope.value.text = value;						}						if(scope.property.type.list) {							scope.value.list = angular.copy(scope.property.type.list);							var multi = null;							if(scope.mode === constants.SCOPE_SEARCH) {								multi = fieldToMatch.searchConf.multiplicity;							}							else {								multi = fieldToMatch.multiplicity;							}							, append a null value to de-select							if(multi === constants.MULTIPLICITY_ONE) {								scope.value.list.splice(0, 0, { key: null, value: 'combobox.placeholder'});							}						}						if (value == undefined && scope.property.defaults != undefined && scope.creating) {							.value.text = scope.property.defaults;						}					}				}				else if(this.entity && this.entity.$resolved === false) {					resolveWatcher = scope.$watch('entity.$resolved', function() {						if(scope.entity.$resolved !== false) {							resolveWatcher();							scope.update(true);						}					});				}				if(init && (this.entity && this.entity.$resolved !== false || scope.creating)) {					.$watch('value.text', function(newValue, oldValue) {						if(scope.watchersEnabled && newValue !== oldValue) {							scope.fieldValidation();							$timeout(valueWatcher, 50);						}					});										if (scope.value.entity && scope.value.entity instanceof Array) {						scope.$watchCollection('value.entity', function(newValue, oldValue) {							if(!angular.equals(newValue, oldValue)) {								scope.fieldValidation();								$timeout(valueWatcher, 50);							}						}, true);					}					else if(scope.property.type.type === constants.FIELD_COMPLEX) {						scope.$watch('value.entity', function(newValue, oldValue) {							if(!angular.equals(newValue, oldValue)) {								scope.fieldValidation();								$timeout(valueWatcher, 50);							}						}, true);					}					(scope.mode === constants.SCOPE_SEARCH && scope.property.type.type == constants.FIELD_BOOLEAN) {						scope.$watch('value.active', valueWatcher);						scope.$watch('value.inactive', valueWatcher);					}					(scope.mode === constants.SCOPE_SEARCH && scope.property.type.type == constants.FIELD_DATE) {						scope.$watch('value.date.startDate', valueWatcher);						scope.$watch('value.date.endDate', valueWatcher);						scope.$watch('value.date.comparator', valueWatcher);					}					(scope.mode === constants.SCOPE_SEARCH && scope.property.type.type == constants.FIELD_NUMBER && scope.property.searchConf.policy === constants.VALIDATOR_RANGE) {						scope.$watch('value.range.from', valueWatcher);						scope.$watch('value.range.to', valueWatcher);						scope.$watch('value.range.comparator', valueWatcher);					}					(scope.property.type.type == constants.FIELD_FILE) {						scope.$watchCollection('value.files', valueWatcher);					}					$timeout(function() {						$rootScope.$broadcast('field-updated', { field: scope.property, value: scope.value, init: true });					}, 50);				}			};			scope.reset = function() {				-boxes				if(scope.property.fieldType.search === constants.FIELD_BOOLEAN) {					scope.value.active = scope.property.defaults === 'true';					scope.value.inactive = scope.property.defaults !== 'true';				}				else if(scope.property.fieldType.search === constants.FIELD_DATE) {					.value.date.comparator = constants.DATE_COMPARATOR_EQUALS;					scope.value.date.startDate = 0;					scope.value.date.endDate = 0;				}				else if(scope.property.searchConf.policy === constants.VALIDATOR_RANGE) {					.value.range.comparator = constants.NUMBER_COMPARATOR_BETWEEN;					scope.value.range.from = '';					scope.value.range.to = '';				}				-complex fields				else if(scope.property.fieldType[scope.mode] !== constants.FIELD_COMPLEX) {					scope.value.text = scope.property.defaults == null ? '' : scope.property.defaults;					if(scope.property.multiplicity === constants.MULTIPLICITY_MANY) {						var length = scope.value.entity.length;						scope.value.entity.splice(0, length);					}					else {						scope.value.entity = {};					}				}				scope.label = "";			};				  		scope.disableField = function(mode, field) {	  			= field.editable;				= field.isId;	  			/* 	  			 * If we are in search mode and the field is shown, 	  			 * it will NEVER be disabled	  			 */	  			if(mode === constants.SCOPE_SEARCH) {	  				return false;	  			}	  			(scope.property.derived) {	  				var configuration = scope.parentField.showInUpdate.configuration;	  				var matchingConfiguration = $filter('filter')(configuration, { key: constants.DISABLE_COMPLEX_FIELD, value: scope.property.apiPath }, true);	  				if(matchingConfiguration.length) {	  					return true;	  				}	  			}	  			/*	  			 * In update mode, the disabled fields are:	  			 * - Non-editable fields	  			 * - Entity ids (on update mode only)	  			 */	  			var isEditable = editable.value !== null;	  			var isAllowed = null;	  			if(isEditable) {	  				isAllowed = permissionManager.isAllowed(editable.value);	  			}	  			var bEditable = !isEditable || !isAllowed || (isId && !scope.creating);	  			return bEditable;	  		};	  			  			  		scope.showRemove = function(field) {	  			return scope.value.text !== null && scope.value.text !== '' && (scope.mode === constants.SCOPE_SEARCH || !scope.disableField(scope.mode, scope.property));	  		};	  			  		/**	  		 * Determines whether to disable a multi/single select based on their properties	  		 */	  		scope.disableSelect = function(field) {	  			if (typeof(field.singleSelectCustom) === 'object' && field.singleSelectCustom.disableSelect) {	  				return true;	  			} else {	  				return scope.disableField(scope.mode, scope.property);	  			}	  		};	  		#7422	  		scope.disableSelectInput = function(mode, field) {	  			var editable = field.editable;	  			(avoid user writing stuff)	  			if(mode === constants.SCOPE_UPDATE && field.fieldType.update === constants.FIELD_SELECT) {	  				if (field.disabledSelect) {	  					return true;	  				}	  				if (editable.value === 'true') {	  					return false;	  				}	  				return true;	  			}	  			return false;	  		};	  			  			  		scope.removeField = function(field) {				scope.value.text = null;				scope.value.list = [];				scope.value.entity = null;				scope.value.date.startDate = '';				scope.value.date.endDate = '';				scope.value.date.comparator = constants.DATE_COMPARATOR_EQUALS;	  			scope.label = '';	  			if (typeof(field.singleSelectCustom) === 'object') {	  				 field.singleSelectCustom.deleteField = false;	  				 field.singleSelectCustom.updateOtherFields = true;	  			}	  		};	  		scope.validation = {	  			pattern: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return "/.*/";	  				}                    	  				(scope.property.validation.validators && scope.property.validation.validators.length > 0	  						&& scope.property.validation.validators[0].type == "REGEXP") {	  							  					var regexp = scope.property.validation.validators[0].value;	  					return regexp;	  				}	  				= "/.*/";	  				return regexp;	  			},	  				  			forbiddenCharacters: function() {	  				return ["/","\\"];	  			},	  			required: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return false;	  				}	  				return scope.property.validation.required;	  			},	  			minlength: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return 0;	  				}	  				var minLength = scope.property.validation.minLength;	  				return minLength !== null ? minLength : 0;	  			},	  			maxlength: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return 524288;	  				}	  				var maxLength = scope.property.validation.maxLength;	  				return !maxLength ? maxLength : 524288;	  			},	  			minvalue: function() {	  				var minLength = scope.property.validation.minLength;	  				return minLength !== null ? minLength : Number.MIN_SAFE_INTEGER;	  			},	  			maxvalue: function() {	  				var maxLength = scope.property.validation.maxLength;	  				return maxLength !== null ? maxLength : Number.MAX_SAFE_INTEGER;	  			},	  			valid_required: function() {	  				switch(scope.property.type.type) {	  				case constants.FIELD_STRING:	  					return scope.validation.required() ? scope.value.text && scope.value.text.length > 0 : true;	  				case constants.FIELD_COMPLEX:	  					var relatedMetadata = util.getMetadata(scope.property.type.complexType);	  					var idField = util.getEntityId(relatedMetadata, null, true);	  					.validation.required() ? scope.value.entity && scope.value.entity[idField] !== undefined : true;	  					break;	  				case constants.FIELD_FILE:	  					return scope.validation.required() ? scope.value.files.length > 0 : true;	  					break;	  				}	  				return true;	  			},	  			valid_pattern: function() {	  				if(!scope.value.text || scope.property.type.type !== constants.FIELD_STRING) {	  					return true;	  				}	  				. To fix on bug #7424	  				if(!scope.value.text.match) {	  					return true;	  				}	  				var parts = scope.value.text.split("\n");	  				for(var i = 0; i<parts.length; i++){	  					 var matches = parts[i].match(scope.validation.pattern());		  				 if(!matches || !matches.length || matches[0] != parts[i]){		  					 return false;		  				 }	  				}	  					  				return true;	  			},	  				  			valid_forbiddenCharacters: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return true;	  				}	  				if(scope.property.isId){		  				for(var i=0;i<scope.validation.forbiddenCharacters().length;i++){		  					var char = scope.validation.forbiddenCharacters()[i];		  					if(scope.value.text!=null && scope.value.text.indexOf(char) != -1){			  					return false;			  				}		  				}	  				}	  					  				return true;	  			},	  			valid_minlength: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return true;	  				}	  				var minLength = scope.minLength = scope.property.validation.minLength;					if (scope.property.type.type === constants.FIELD_COMPLEX) {						return minLength ? scope.value.entity.length >= minLength : true;					}	  				return minLength ? scope.value.text.length > minLength : true;	  			},	  			valid_maxlength: function() {	  				(scope.mode === constants.SCOPE_SEARCH) {	  					return true;	  				}	  				var maxLength = scope.property.validation.maxLength;	  				return maxLength ? scope.value.text.length < maxLength : true;	  			}	  		};	  		  			scope.templating = {	  			inputSize: 'col-md-8',	  			fieldSize: 'col-md-6',	  			labelStyle: 'col-md-12',	  			labelWeight: 'font-normal',	  			labelDecoration: '',	  			validationStyle: 'col-md-12',	  			adjusted : false	  		};	  			  		!	  		scope.classFormInput = ([constants.FIELD_PICK_LIST, constants.FIELD_TABLE].indexOf(scope.property.fieldType[scope.mode]) === -1) ? "form-input-content" : "";	  		scope.displayMode = ([constants.FIELD_PICK_LIST, constants.FIELD_TABLE].indexOf(scope.property.fieldType[scope.mode]) === -1) ? "" : "pickListDispBlock padding-cero";	  		(scope.mode === constants.SCOPE_UPDATE) {	  			(scope.property.fieldType.update) {		  		case constants.FIELD_SELECT:		  			if(!(!scope.parentField && scope.property.isKey)) {		  				scope.templating.inputSize = 'col-md-12';		  				scope.templating.fieldSize = 'col-md-8';		  				scope.templating.adjusted = true;		  			}		  			break;		  		case constants.FIELD_DATE:		  		case constants.FIELD_NUMBER:		  		case constants.FIELD_COMBOBOX:		  		case constants.FIELD_PRICE:		  			scope.templating.inputSize = 'col-md-6';		  			scope.templating.fieldSize = 'col-md-4';		  			scope.templating.adjusted = true;		  			break;		  		case constants.FIELD_COMPLEX:		  			scope.templating.inputSize = '';		  			scope.templating.fieldSize = 'col-md-12 no-padding';					scope.templating.labelWeight = 'font-bold';					scope.templating.adjusted = true;		  			break;		  		case constants.FIELD_PICK_LIST:		  		case constants.FIELD_IMAGE:		  		case constants.FIELD_TABLE:		  			scope.templating.inputSize = 'col-md-12';		  			scope.templating.fieldSize = 'col-md-12 no-padding';					scope.templating.labelWeight = 'font-bold';					scope.templating.labelDecoration = 'font-underline';					scope.templating.adjusted = true;		  			break;		  		case constants.FIELD_FILE:		  			scope.templating.inputSize = 'col-md-12';		  			scope.templating.fieldSize = 'col-md-8 no-padding';					scope.templating.labelWeight = 'font-bold';					scope.templating.labelDecoration = 'font-underline';					scope.templating.adjusted = true;		  			break;		  		}		  		if(!scope.templating.adjusted && scope.property.validation.maxLength) {	  				if(scope.property.validation.maxLength < 14) {	  					scope.templating.inputSize = 'col-md-6';		  				scope.templating.fieldSize = 'col-md-4';		  			}		  			else if(scope.property.validation.maxLength > 100) {		  				scope.templating.inputSize = 'col-md-12';		  				scope.templating.fieldSize = 'col-md-8';		  			}		  		}	  		}	  		(scope.mode === constants.SCOPE_SEARCH) {	  			scope.templating.inputSize = 'col-md-12';	  			scope.templating.fieldSize = 'col-md-12';	  			if(scope.property.fieldType.search === constants.FIELD_COMPLEX) {					scope.templating.fieldSize = 'col-md-12 no-padding';					scope.templating.labelWeight = 'font-bold';				}				else if(scope.property.fieldType.search === constants.FIELD_DATE ||					(scope.property.fieldType.search === constants.FIELD_NUMBER && scope.property.searchConf.policy === constants.VALIDATOR_RANGE)) {					scope.templating.labelWeight = 'font-bold';				}	  		}	  		if(scope.property.fieldType[scope.mode] !== constants.FIELD_COMPLEX) {	  			, as it's a 'standard' form		      	switch(scope.rootMetadata[scope.mode + 'Style']) {		      	case constants.FORM_STYLE_HORIZONTAL:		      		scope.templating.inputSize = 'col-md-12';		      		scope.templating.labelStyle = 'col-md-4 control-label';		      		scope.templating.validationStyle = 'col-md-offset-4 col-md-8';		      		break;		      	}	  		}	  		?	  		if(scope.style) {	  			(var item in scope.style) {	  				scope.templating[item] = scope.style[item];	  			}	  		}			valueWatcher = function() {				fieldConfig.init = false;				initactive = scope.value.active;				initinactive = scope.value.inactive;				(scope.value.text === 'null') {					scope.value.text = null;				}				, NEVER copy				var forceNotCopy = false;				if([constants.FIELD_FILE, constants.FIELD_TABLE].indexOf(scope.property.type.type) !== -1) {					forceNotCopy = true;				}				var configuration = $filter('filter')(scope.metadata.configuration, { key: 'DONT_CREATE_COPY', value: scope.property.name }, true);				var sendValue = null;				if(forceNotCopy || configuration.length) {					sendValue = scope.value;				}				else {					sendValue = angular.copy(scope.value);				}				var result = scope.updateEntity(scope.property, sendValue, scope.entity, scope.parentField, scope.rootEntity);				(scope.property.derived) {					var configuration = [];					var path = scope.property.derivedPath;					var source = scope.parentField;					switch(scope.mode) {					case constants.SCOPE_SEARCH:						configuration = source.searchable.configuration;						break;					case constants.SCOPE_UPDATE:						configuration = source.showInUpdate.configuration;						break;					}					var listenerName = scope.parentField.owner + '_' + scope.parentField.name;					var cascadeConfiguration = $filter('filter')(configuration, { key: constants.CASCADE_UPDATE });					if(cascadeConfiguration.length) {						.$emit('reset_cascade_' + listenerName, { source: scope.property, configuration: cascadeConfiguration, query: scope.value.text });					}					var propagateConfiguration = $filter('filter')(configuration, { key: constants.PROPAGATE_UPDATE });					if(propagateConfiguration.length) {						.$emit('complex_update_' + listenerName, { source: scope.property, configuration: propagateConfiguration });					}				}				if(sendValue.isExtended == true) {					scope.value.extended = sendValue.extended;				}				scope.value.isExtended = (sendValue.isExtended == true);								(verify if there's someone listening too)				if(result && scope.changeEntity) {					= angular.copy(result);					scope.changeEntity(scope.property, sendResult, scope.entity);				}				$rootScope.$broadcast('field-updated', { field: scope.property, value: scope.value });			};			. On search mode with the field name 			var listenerName = scope.property.owner + '_' + scope.property.name;			.$on('manually_change_' + listenerName, function(events, args) {				?				valueWatcher();			});						scope.$on('update_' + listenerName, function(events, args) {				if(args && args.self && !scope.property.isSelf) {					return;				}				if(scope.property.fieldType[scope.mode] === constants.FIELD_COMPLEX) {					var innerFields = scope.value.fields;					var innerEntity = scope.entity[scope.property.name];					.$broadcast('setup-cascade', { enabled: false });					scope.$broadcast('setup-propagation', { enabled: false });					scope.$broadcast('setup-watchers', { enabled: false });					for(var i = 0; i < innerFields.length; i++) {						var innerField = innerFields[i];						var innerListenerName = 'update_' + innerField.owner + '_' + innerField.name;						scope.$broadcast(innerListenerName, { newEntity: innerEntity });					}					-enable cascade filters					scope.$broadcast('setup-cascade', { enabled: true, delay: 500 });					scope.$broadcast('setup-propagation', { enabled: true, delay: 500 });					scope.$broadcast('setup-watchers', { enabled: true, delay: 500 });				}				else {					if(scope.parentField && args.newEntity) {						scope.entity = args.newEntity;					}					scope.update();				}			});			if(scope.property.fieldType[scope.mode] === constants.FIELD_COMPLEX && !scope.property.isSelf) {				scope.$on('complex_update_' + listenerName, function(events, args) {					if(!scope.propagateEnabled) {						return;					}					= args.source;					= args.configuration;					= args.query;					(var i = 0; i < configuration.length; i++) {						var currentConf = configuration[i].value;						?						var apiPath = source.isSelf ? constants.SELF_FIELD : source.apiPath;						var index = currentConf.indexOf(apiPath + '->');						if(index !== -1) {							var parsedConf = currentConf.split('->');							var engaged = false;							for(var f = 0; f < parsedConf.length; f++) {								if(parsedConf[f] === apiPath) {									engaged = true;									.$broadcast('setup-cascade', { enabled: false });									scope.$broadcast('setup-watchers', { enabled: false });									continue;								}								if(engaged) {									var conf = parsedConf[f];									var self = false;									(conf === constants.SELF_FIELD) {										conf = scope.property.name;										self = true;									}									var cascadeField = $filter('filter')(scope.value.fields, { apiPath: conf }, true)[0];																		= 'update_' + cascadeField.owner + '_' + cascadeField.name;									scope.$broadcast(eventName, { source: source, self: self, newEntity: scope.entity[scope.property.name] });								}							}							if(engaged) {								-enable cascade filters								scope.$broadcast('setup-cascade', { enabled: true, delay: 500 });								scope.$broadcast('setup-watchers', { enabled: true, delay: 500 });							}						}					}				});			}			scope.$on('cascade_update_' + listenerName, function(events, args) {				if(args.self && !scope.property.isSelf) {					return;				}				= args.source;				= args.query;				scope.reset();				(!scope.property.type.query) {					scope.property.type.query = {};				}				else if(scope.property.type.query instanceof Array) {					var newQuery = {};					for(var param in scope.property.type.query) {						newQuery[param] = scope.property.type.query[param];					}					scope.property.type.query = newQuery;				}				scope.property.type.query[source.apiName] = query;			});			scope.$on('setup-cascade', function(event, args) {				if(!args.delay) {					setupCascade(args.enabled);				} 				else {					$timeout(function() {						setupCascade(args.enabled);					}, args.delay);				}			});			scope.$on('setup-propagation', function(event, args) {				if(!args.delay) {					setupPropagation(args.enabled);				} 				else {					$timeout(function() {						setupPropagation(args.enabled);					}, args.delay);				}			});			scope.$on('setup-watchers', function(event, args) {				if(!args.delay) {					setupWatchers(args.enabled);				} 				else {					$timeout(function() {						setupWatchers(args.enabled);					}, args.delay);				}			});			function setupCascade(enabled) {				scope.cascadeEnabled = enabled;			}			function setupPropagation(enabled) {				scope.propagateEnabled = enabled;			}			function setupWatchers(enabled) {				scope.watchersEnabled = enabled;			}			scope.$on('reset_cascade_' + listenerName, function(events, args) {				if(!scope.cascadeEnabled) {					return;				}				= args.source;				= args.configuration;				= args.query;				(var i = 0; i < configuration.length; i++) {					var currentConf = configuration[i].value;					?					var index = currentConf.indexOf(source.apiPath + '->');					if(index !== -1) {						var parsedConf = currentConf.split('->');						var engaged = false;						for(var f = 0; f < parsedConf.length; f++) {							if(parsedConf[f] === source.apiPath) {								engaged = true;								scope.$broadcast('setup-propagation', { enabled: false });								scope.$broadcast('setup-watchers', { enabled: false });								continue;							}							if(engaged) {								var conf = parsedConf[f];								var self = false;								(conf === constants.SELF_FIELD) {									conf = scope.property.name;									self = true;								}								var cascadeField = $filter('filter')(scope.value.fields, { apiPath: conf }, true)[0];																= 'cascade_update_' + cascadeField.owner + '_' + cascadeField.name;								scope.$broadcast(eventName, { source: source, query: query, self: self, reset: args.reset });							}						}						if(engaged) {							-enable cascade filters							scope.$broadcast('setup-propagation', { enabled: true, delay: 500 });							scope.$broadcast('setup-watchers', { enabled: true, delay: 500 });						}					}				}			});			.$on('reset_' + listenerName, function(event, args) {				scope.reset();			});	  					.$on('reset-form', function(event, args) {				scope.reset();			});			.$on('locale-change', function(data) {		  		.extra.label = $filter('translate')(scope.extra.labelPlaceholder);		  	});		  	scope.$on('field-updated', function(evt, data) {		  		?		  		, verify if i'm linked with the field being updated		  		if(!scope.property.linked || scope.property.linked.to.indexOf(data.field.name) === -1) {		  			return;		  		}		  		var action = scope.property.linked.via;		  		scope.dispatchFieldAction(action, { source: data.field, value: data.value, init: !!data.init });		  	});			/*			 * If the input is in 'search' mode, all list inputs will be multi-selectable.			 * On 'update' mode, the list inputs only receive one value.			 */			var multiField = null;			var fieldToMatch = null;			if(scope.parentField) {				fieldToMatch = scope.parentField;			}			else {				fieldToMatch = scope.property;			}			if(scope.mode === constants.SCOPE_SEARCH) {				multiField = fieldToMatch.searchConf.multiplicity;			}			else {				multiField = fieldToMatch.multiplicity;			}			var multi = multiField === constants.MULTIPLICITY_MANY;			scope.multiple = multi;						var selectTemplate 		= multi ? '/konga/views/multi-select.html' : '/konga/views/single-select.html';			var selectController 	= multi ? 'MultiSelectCtrl' : 'SingleSelectCtrl';						if (typeof(scope.property.singleSelectCustom) === 'object' && scope.property.singleSelectCustom.selectTemplate !== '' && scope.property.singleSelectCustom.selectController !== '') {				selectTemplate = scope.property.singleSelectCustom.selectTemplate;				selectController = scope.property.singleSelectCustom.selectController;			}			scope.modal = {				temp: {}			};			scope.openMultiSelect = function () {				var myScope = scope;			    var modalInstance = $modal.open({			      templateUrl: selectTemplate,			      controller: selectController,			      size: 'lg',			      resolve: {			        items: function() {			        	return common.read('raw-input>' + myScope.property.name + ' ' +myScope.property.owner);			        },			        model: function() {			        	return angular.copy(myScope.value);			        },			        field: function() {			        	return angular.copy(myScope.property);			        },			        parentField: function() {			        	return angular.copy(myScope.parentField);			        },			        entity: function() {			        	return angular.copy(myScope.entity);			        },			        metadata: function() {			        	return angular.copy(myScope.metadata);			        }			      }			    });				    modalInstance.result.then(function (newValue) {			    	myScope.value.text = newValue.text ? newValue.text.join(',') : '';			    		myScope.value.ids = newValue.ids;			    		myScope.value.entity = newValue.entity;			    					    		.setLabel(newValue.metadata, myScope.value.entity);			    					    		(typeof(myScope.property.singleSelectCustom) === 'object') {			    			if (newValue.ids.length == 0){			    	  			scope.value = {			    	  		      		text: null,			    	  		      		list: [],			    	  		      		entity: null,			    	  		      		date: {			    	  		      			startDate: '',			    	  		      			endDate: '',			    	  		      			comparator: constants.DATE_COMPARATOR_EQUALS			    	  		      		}			    	  			};			    	  			scope.label = '';			    	  			myScope.property.singleSelectCustom.deleteField = false;			    	  		}			    			myScope.property.singleSelectCustom.updateOtherFields = true;			    						    		}			    	 			    				    }, function () {			      console.log('Operation canceled');			    });			  };			  scope.dispatchFieldAction = function(name, params) {			  	= scope.property.overrideDefaults;		  		var matchingActions = null;		  		if(overrideDefaults.length) {		  			matchingActions = $filter('filter')(overrideDefaults, { overrides: name });		  		}		  		var actions = scope.property.actions;		  		if ((!matchingActions || (matchingActions && !matchingActions.length)) && actions.length) {		  			matchingActions = $filter('filter')(actions, { name: name });		  		}		  		=  {	  					id: util.getEntityId(scope.metadata, scope.entity), 	  					entityType: scope.metadata.name, 	  					self: scope, 	  					item: scope.entity, 	  					field: scope.property, 	  					data: params	  			};		  		if(matchingActions && matchingActions.length) {		  			$rootScope.operations.dispatchActionBatch(matchingActions, actionParams);		  		}		  		else {			  		(name){				  	case 'add':				  	case 'open-select':				  			scope.openMultiSelect();				  		break;				  	-link':				  	;				  	default:				  		$rootScope.operations.dispatchAction({ name: name }, actionParams);				  	}				}			  };			  scope.setLabel = function(metadata, entity) {			  	if(false) {			  	}			  	else {			  		var name = metadata.name.charAt(0).toLowerCase() + metadata.name.substr(1);			  		scope.isExtended = $filter('extended')(scope.metadata.fields,name);			  		scope.label = util.getEntityLabel(metadata, entity);			  	}			  };			  scope.getOptionsList = function() {				switch (scope.property.name) {					case constants.COMBO_NATURE_TIERS :						return [{code:'Fournisseur',label:'Fournisseur'}, {code:'Client',label:'Client'}];				}			  };			var watchers = null;			scope.$on('suspend', function() {			  watchers = scope.$$watchers;			  scope.$$watchers = [];			});									scope.$on('resume', function() {			  scope.$$watchers = watchers;			});						scope.$on('force-validation', function() {				scope.fieldValidation();			});			scope.hideGlobalValidation = function() {				scope.globalValidation = false;			};	      				var fieldType = scope.property.fieldType[scope.mode];						(scope.mode === constants.SCOPE_SEARCH && fieldType == constants.FIELD_BOOLEAN) {				fieldType = constants.FIELD_CHECKBOX; = scope.entity[scope.property.name];				scope.value.text = queryValue;				.value.active = queryValue !== undefined ? queryValue : true;				.value.inactive = queryValue !== undefined ? !queryValue : false;			}			(i.e. date-search)			if(scope.mode === constants.SCOPE_SEARCH && fieldType === constants.FIELD_DATE) {				fieldType = constants.FIELD_DATESEARCH;			}			(fieldType == constants.FIELD_PLAIN && scope.property.validation.maxLength > 255) {				fieldType = constants.FIELD_TEXTAREA;			}			(scope.value.fields.length) {				fieldType = constants.FIELD_COMPLEX;			}			= '';			if(scope.mode === constants.SCOPE_SEARCH) {				?				var validatorType = scope.property.searchConf.policy				if(validatorType === constants.VALIDATOR_RANGE) {					inputSuffix = '-' + validatorType.toLowerCase();				}			}			scope.contentUrl = '/konga/views/raw-' + fieldType.toLowerCase() + inputSuffix + '-input.html';			scope.datePicker = { opened: false };			scope.toggleDatePicker = function(){				scope.datePicker.opened = (scope.datePicker.opened)? false:true;			};			scope.fieldValidation = function() {				(scope.mode === constants.SCOPE_UPDATE && (scope.property.type.type === constants.FIELD_DATE || scope.property.type.type === constants.FIELD_DATETIME)) {					if(scope.property.validation.validators && scope.property.validation.validators.length > 0){																		var hasError = false;						var classErrorName;						for(var i = 0; i < scope.property.validation.validators.length; i++) {							var typeValidator = scope.property.validation.validators[i].type; 														switch (typeValidator) {							case 'DATE_GE':							case 'DATE_GT':							case 'DATE_LE':							case 'DATE_LT':								var dateToCompare = scope.entity[scope.property.validation.validators[i].value];								if (typeof(dateToCompare) == "string") {									dateToCompare = new Date(dateToCompare).getTime();								}								var value = scope.value.text;								classErrorName = "invalid-date";								if (dateToCompare == undefined || dateToCompare == 0) {									break;								}								if (value != undefined) {									var dateRef = value;																		if (scope.property.type.type === constants.FIELD_DATE && value.length > 0) {										var dateRef = new Date(value).getTime();									} 																		if (typeValidator == "DATE_GE" && dateRef - dateToCompare < 0) {																				hasError = true;									}									if (typeValidator == "DATE_GT" && dateRef - dateToCompare <= 0) {										hasError = true;									}									if (typeValidator == "DATE_LE" && dateRef - dateToCompare > 0) {										hasError = true;									}									if (typeValidator == "DATE_LT" && dateRef - dateToCompare >= 0) {										hasError = true;									}								}															break;							}						}						var realInput = element.find('input');												if (hasError) {							realInput.addClass(classErrorName);							scope.$emit('form-invalid', {								field: scope.property.name,								owner: scope.property.owner,								validation: typeValidator,								valid: false							});						}						else {							.removeClass(classErrorName);							scope.$emit('form-invalid', {								field: scope.property.name,								owner: scope.property.owner,								validation: typeValidator,								valid: true							});							.$emit('form-reset-invalid-date');													}					}				}								(scope.mode === constants.SCOPE_UPDATE && scope.property.type.type === constants.FIELD_STRING) {					var validation = scope.property.validation;					var value = scope.value.text;					= value ? value.length : 0;					var realInput = element.find('input');					if(validation.maxLength && length > validation.maxLength) {						realInput.addClass('invalid-max-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'max-length',							valid: false						});					}					else {						realInput.removeClass('invalid-max-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'max-length',							valid: true						});					}										if(validation.minLength && length < validation.minLength) {						realInput.addClass('invalid-min-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'min-length',							valid: false						});					}					else {						realInput.removeClass('invalid-min-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'min-length',							valid: true						});					}				}				if(scope.property.fieldType.update == constants.FIELD_PICK_LIST) {					var validation = scope.property.validation;					var length = scope.entity.situations ? scope.entity.situations.length : 0;										var realInput = element.find('input');										if(validation.minLength && length < validation.minLength) {.addClass('invalid-min-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'min-length',							valid: false						});					}					else {.removeClass('invalid-min-length');						scope.$emit('form-invalid', {							field: scope.property.name,							owner: scope.property.owner,							validation: 'min-length',							valid: true						});					}				}			};	          			scope.aucun = null;			scope.update(true);			.fieldId = 'raw-input-' + scope.property.name + '-' + scope.property.owner;		},	    templateUrl: '/konga/views/raw-input.html'	};}]);'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Recursive list item * @description * # recursiveListItem */angular.module('konga')  .directive('recursiveListItem', function () {    return {      templateUrl: '/konga/views/recursive-list-item.html',      restrict: 'E',      replace: true,      scope: {      	item: '=',      	click: '=onClick',      	ngClass: '@'      },      link: function postLink(scope, element, attrs) {      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Recursive list * @description * # recursiveList */angular.module('konga')  .directive('recursiveList', function () {    return {      template: '<div ng-include="contentUrl"></div>',      restrict: 'E',      replace: true,      scope: {      	list: '=',      	clickItem: '=onClickItem',      	itemClass: '@'      },      link: function postLink(scope) {      	scope.contentUrl = '/konga/views/recursive-list.html';      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Result table * @scope * @restrict E * @description * Defines a result table that shows the results of a search. */angular.module('konga')  .directive('resultTable', function () {    return {      templateUrl: '/konga/views/result-table.html',      replace: true,       restrict: 'E',      scope: {      	entityMetadata: '=',      	entities: '=',        updateEntity: '=onUpdate',        paginationData: '=',        paginationUpdate:'=',        filterCode : '=',        submitSorting: '=onSorting'      },      controller : function ($scope, $filter, $rootScope, permissionManager) {        $scope.fields = [];        $scope.categories = [];        function divideComplexField(field) {          var relatedMetadata = util.getMetadata(field.type.complexType);          var relatedFields = util.getEntityFields(relatedMetadata);          var nestFields = field.showInResults.fields;          var selectedFields = $filter('selectedFields')(relatedFields, nestFields, field);          for(var fi = 0; fi < selectedFields.length; fi++) {            if(selectedFields[fi].fieldType.results === constants.FIELD_COMPLEX) {              divideComplexField(selectedFields[fi]);            }            else {              [fi].derivedPath.splice(0, 0, field);              selectedFields[fi].derivedSource = field;              $scope.fields.push(selectedFields[fi]);            }          }        }        $scope.init = function() {          $scope.categories = util.getEntityCategories($scope.entityMetadata, 1);                    var formType = $scope.entityMetadata.resultsType;          if(formType === constants.CUSTOM_FORM) {            var configuration = $filter('filter')($scope.entityMetadata.configuration, { key: constants.SEARCH_CUSTOM_VIEW });            if(!configuration.length) {              }            $scope.contentUrl = mapper[configuration[0].value];          }          else {            $scope.contentUrl = '/konga/views/' + formType.toLowerCase() + '-result-table.html';            (formType) {            case constants.CATEGORIZED_CASCADE_FORM:              = $filter('filter')($scope.entityMetadata.configuration, { key: constants.RESULTS_USE_CATEGORY }, true);              $scope.categories = [];              for(var i = 0; i < configuration.length; i++) {                var cat = configuration[i].value;                ?                var hideHeaderConf = $filter('filter')($scope.entityMetadata.configuration, { key: constants.HIDE_CATEGORY_HEADER, value: cat }, true);                var showHeader = true;                if(hideHeaderConf.length) {                  showHeader = false;                }                var category = {                  name: cat,                  showHeader: showHeader                };                $scope.categories.push(category);              }              break;            default:              }          }          = $filter('orderBy')(util.getEntityFields($scope.entityMetadata), '+priority.results');          var filteredFields = $filter('resultParams')(allFields, $scope.entityMetadata);          (var f = 0; f < filteredFields.length; f++) {            var field = filteredFields[f];            if(field.type.type === constants.FIELD_COMPLEX && field.fieldType.results === constants.FIELD_COMPLEX && field.showInResults.fields.length) {              divideComplexField(field);            }            else {              $scope.fields.push(field);            }          }          $scope.categoryFields = {};          $scope.sortedFieldsByCategory = [];          for(var i = 0; i < $scope.categories.length; i++) {            var category = $scope.categories[i].name;            var matchingFields = $filter('filter')($scope.fields, { categories: category }, true);            $scope.sortedFieldsByCategory = $scope.sortedFieldsByCategory.concat(matchingFields);            $scope.categoryFields[category] = matchingFields;          }          = $scope.entityMetadata.editable !== null;          var isAllowed = null;          if(isEditable) {            isAllowed = permissionManager.isAllowed($scope.entityMetadata.editable);          }          var bEditable = !isEditable || !isAllowed;          $scope.isEditable = !bEditable;        };        var	entityLabel = $filter('translate')($scope.entityMetadata.entityLabel);      	$scope.extra = {      		label: entityLabel,      		labelPlaceholder: $scope.entityMetadata.entityLabel         	};        $scope.filerData = function () {          var dataFilter = $filter('filter')($scope.entities, $scope.filterCode);          $scope.paginationUpdate(dataFilter);        };        $scope.showInRed = function(statut) {          return (angular.isUndefined(statut) || statut == null || statut ==true);         };        $scope.resultClick = function(metadata, entity, index) {        	          = metadata.overrideDefaults;  	  	  var matchingActions = null;  	  	  if(actions.length) {  	  		  matchingActions = $filter('filter')(actions, { overrides: 'result-click' });  	  	  }        		  	    (in batch)      	  if (matchingActions && matchingActions.length) {      		  $rootScope.operations.dispatchActionBatch(matchingActions, { id: util.getEntityId(metadata, entity), entityType: metadata.name, self: $scope, item: entity, index: index });      	  }          ?          else if($scope.isEditable) {        	  $scope.updateEntity(metadata, entity);          }        };                $scope.showSorting = function(sorting, isDESC) {          if (sorting !== '') {            if (isDESC) {              if (sorting === 'asc') {                return 'dropup';              } else {                return '';              }            } else {              return 'caret';            }          } else {            return '';          }        };                $scope.sorting = function(field, type) {          (var i = 0; i < $scope.fields.length; i++) {          $scope.fields[i].sorting = '';          }          .sorting = type;                    $scope.submitSorting(field, type);          $scope.$broadcast('sorting', { field: field, type: type });        };        = $scope.fields = [];        (var i = 0; i < filteredFields.length; i++) {        = filteredFields[i];        ?        (field.fieldType.results === constants.FIELD_COMPLEX) {        = field.type.complexType;        = util.getMetadata(complexType);        = field.showInResults.fields;        = util.getEntityFields(complexMetadata);        = $filter('selectedFields')(complexFields, fieldFields);        (var f = 0; f < selectedFields.length; f++) {        = {        : field,        : selectedFields[f],        : true        };        .push(fieldObj);        }        }        {        .push(field);        }        }        var watchers = null;        $scope.$on('suspend', function() {          watchers = $scope.$$watchers;          $scope.$$watchers = [];        });        $scope.$on('resume', function() {          $scope.$$watchers = watchers;        });              },      link: function postLink(scope, element, attrs) {        .$watchCollection('filterCode', scope.filerData)              }          };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Scroll watcher * @description * # scrollWatcher */angular.module('konga')  .directive('scrollWatcher', function () {    return {      restrict: 'A',      link: function postLink(scope, element) {      	angular.element(element).bind('scroll', function() {      		var height = element[0].scrollHeight - element.height();      		var scroll = element.scrollTop();      		var msg = {      			absolute: scroll,      			height: height,      			relative: (scroll / height)      		};      		scope.$emit(scope.id + '-scroll-watcher', msg);      	});      	scope.$on('set-scroll', function(event, data) {      		if(data.relative) {      			var height = element[0].scrollHeight - element.height();      			var newScroll = height * data.relative;      			element.scrollTop(newScroll);      		}      	});      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Search Pane * @scope * @restrict E * @description * Defines a search panel that controls all inputs of a search form for an entity type.  */angular.module('konga')  .directive('searchPane', function () {    return {      templateUrl: '/konga/views/search-pane.html',      replace: true,       restrict: 'E',      scope: {      	entityMetadata: '=',        query: '=',    	        productCodes: '=',        submit: '=onSubmit'      },      controller:function($scope, $filter, $modal, $timeout, scaffold) {        $scope.fields = [];        $scope.categories = [];        $scope.init = function() {          $scope.fields = util.getEntityFields($scope.entityMetadata);          $scope.categories = util.getEntityCategories($scope.entityMetadata, 1);          var formType = $scope.entityMetadata.searchType;          if(formType === constants.CUSTOM_FORM) {            var configuration = $filter('filter')($scope.entityMetadata.configuration, { key: constants.SEARCH_CUSTOM_VIEW });            if(!configuration.length) {              }            $scope.contentUrl = mapper[configuration[0].value];          }          else {            $scope.contentUrl = '/konga/views/' + formType.toLowerCase() + '-search-pane.html';            (formType) {            case constants.CATEGORIZED_CASCADE_FORM:              = $filter('filter')($scope.entityMetadata.configuration, { key: constants.SEARCH_USE_CATEGORY }, true);              $scope.categories = [];              for(var i = 0; i < configuration.length; i++) {                var cat = configuration[i].value;                $scope.categories.push(cat);              }              break;            default:              }          }        };        function setupQuery(obj, query) {          for(var i in obj) {            if(typeof obj[i] === 'object') {              setupQuery(obj[i], query[i]);            }            else {              query[i] = obj[i];            }          }        }    	  $scope.openFilterModel = function (property) {    		      		  : all fieldType is complex need to convert to Array    		  var fields = util.getEntityFields($scope.entityMetadata);  			  for(var i = 0; i < fields.length; i++) {  				  var fieldName = fields[i].fieldName;  	              if($scope.query[fieldName] !== undefined) {  	            	  if (fields[i].fieldType === constants.FIELD_COMPLEX   	            			  && $scope.query[fieldName] !== null  	            			  && !(typeof  $scope.query[fieldName] === 'object')) {  	            		  var codes = $scope.query[fieldName].split(',');  	            		  $scope.query[fieldName] = codes;  	            	  }  	              }  			  }    		      		  var modalInstance = $modal.open({    			  templateUrl: '/konga/views/filter-manager.html',    			  controller: 'FilterManagerCtrl',    			  resolve: {    				  method: function () {    					  return property.operation;    				  },    				  formProperties: function() {    					  return $scope.query;    				  },    				  items: function () {    					  return $scope.sourceList;    				  },    				  model: function() {    					  return $scope.value;    				  }    			  }    		  });		    		  modalInstance.result.then(function (newValue) {    			  if (newValue !== null && newValue !== undefined) {              $scope.resetQuery();                            setupQuery(newValue, $scope.query);    				  for(var i = 0; i < $scope.fields.length; i++) {    					  var field = $scope.fields[i];          		  var eventName = 'update_' + field.owner + '_' + field.name;          	    $scope.$broadcast(eventName);    				  }    			  }    			  console.log('Save successful');    		  }, function () {    			  console.log('Operation canceled');    		  });    	  };        $scope.resetQuery = function() {          var newQuery = scaffold.newQuery($scope.entityMetadata);          for(var param in $scope.query) {            $scope.query[param] = newQuery[param];          }        };        $scope.delayedSubmit = function() {          $timeout(function() {            $scope.operations.submit();          }, 100);        };        var watchers = null;        $scope.$on('suspend', function() {          watchers = $scope.$$watchers;          $scope.$$watchers = [];        });        $scope.$on('resume', function() {          $scope.$$watchers = watchers;        });  	  },      link: function postLink(scope) {        scope.operations = {          updateField: function(property, value, query, parent) {            var fieldName = property.name;            ?            if(parent) {              fieldName = property.apiName;            }            :)            if(property.fieldType.search === constants.FIELD_BOOLEAN) {              if(value.active == value.inactive) {                , same thing                value.text = '';              }              else {                , then its true. If not, means inactive is true, ergo, its false=active                value.text = value.active;              }            }            if(property.fieldType.search === constants.FIELD_DATE) {              value.date.startDate = (value.date.startDate == "") ? 0 : value.date.startDate;              value.date.endDate = (value.date.endDate == "") ? 0 : value.date.endDate;              value.text = value.date;            }            else if(property.searchConf.policy === constants.VALIDATOR_RANGE && value.range.from !== '') {              value.text = value.range;            }            var ret = value.text;            (ret && typeof ret === 'object') ret = ret.join(',');            [fieldName] = ret;            return ret;          },          clear: function() {            ;            = util.getEntityFields(scope.entityMetadata);            (var i = 0; i < fields.length; i++) {            = fields[i].name;            = fields[i].defaults;            ?            (scope.query[fieldName] !== undefined) {            .query[fieldName] = defaults;            }            }                        .resetQuery();            ?            scope.$broadcast('reset-form');            scope.delayedSubmit();          },          submit: function() {        	  scope.query.resetPaging = true;        	  scope.query.resetSorting = true;        	  scope.submit(scope.query);          }        };        .operations.submit();      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Select input * @description * # selectInput */angular.module('konga')  .directive('selectInput', ['api', '$filter', function (api, $filter) {    return {      templateUrl: '/konga/views/select-input.html',      restrict: 'E',      replace: true,      link: function postLink(scope, element, attrs) {        scope.textinput = scope.value.text;        (scope.mode !== constants.SCOPE_UPDATE) {        ;        }      	var entityType = scope.property.type.complexType;      	var localEndpoint = api.getLocalEndpoint(entityType);      	var metadata = util.getMetadata(entityType);      	var apiPath = metadata.apiPath;      	var quickSearch = $filter('quickSearch')(metadata)[0];      	var paramName = !quickSearch.metadata ? null : $filter('fieldApiName')(quickSearch.metadata.name, quickSearch.metadata);        var fields = util.getEntityFields(metadata);        var codeField = $filter('filter')(fields, { isKey: true}, true)[0];        var labelField = scope.labelField = $filter('filter')(fields, { isLabel: true}, true)[0];        var active = false;      	      	scope.getElements = function(value) {          var query = $filter('queryParser')(this.property, this.entity);      		          query.path = apiPath;      		query[paramName] = value;          active = true;      		return localEndpoint.search(query)            .$promise.then(function(data) {              return data.map(function(item){                var code = $filter('mapField')(item, codeField);                var label = $filter('mapField')(item, labelField);                var ret = {                  label: code + ' - ' + label,                  real: item                };                return ret;              });            });      	};        scope.formatInput = function(value, model, label) {          var item = value.real;          var text = '';                    ?          if($filter('fieldMultiplicity')(this.property, this.mode) === constants.MULTIPLICITY_MANY) {            if(!this.value.entity || !(this.value.entity instanceof Array)) {              this.value.entity = [];            }            = $filter('filter')(this.value.entity, { id: item.id }, true);            if(!existing.length) {              .value.entity.push(item);            }            text = this.value.entity.map(function(item) {              return(item.id);            }).join(',');            .textinput = '';          }          ?          else {            .value.entity = item;            text = item.id;            .textinput = $filter('mapField')(item, labelField);          }          .value.text = text;        };        scope.writeValue = function() {          .removeField(this.property, true);        };        var multiplicity = scope.mode === 'search' ? scope.property.searchConf.multiplicity : scope.property.multiplicity;        if(multiplicity === constants.MULTIPLICITY_ONE) {          scope.$watch('value.text', function() {            scope.textinput = scope.value.text;          });        }      }    };  }]);'use strict';angular.module('konga')  .directive('tabContent', function () {    var directiveDefinitionObject = {};	directiveDefinitionObject.require= '^verticalTabs';	directiveDefinitionObject.restrict= 'E';	directiveDefinitionObject.transclude= true;	directiveDefinitionObject.replace = true;	directiveDefinitionObject.scope= {		title: '@',		id: '=tabId'	};	directiveDefinitionObject.link= function(scope, element, attrs, tabsCtrl){			tabsCtrl.addTabContent(scope);	};	directiveDefinitionObject.templateUrl = '/konga/views/vertical-tabs-element.tp.html';	return directiveDefinitionObject;  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Table cell * @description * # tableCell */angular.module('konga')  .directive('tableCell', function () {    return {      templateUrl: '/konga/views/table-cell.html',      restrict: 'E',      replace: true,      scope: {      	entity: '=',      	field: '='      },      controller: function($scope, $filter) {      	$scope.content = '';        $scope.type = 'text';        $scope.styles = [];        $scope.preffix = '';        $scope.suffix = '';        var useList = true;        ;        var entityWatcher;      	function setupValue() {	      	var fieldEntity = $scope.entity;	      	= null;	      	if($scope.field.derived) {    				if($scope.field.derivedSource) {              fieldEntity = $filter('mapField')($scope.entity, $scope.field.derivedSource);              if($scope.field.isSelf) {                mapped = fieldEntity;              }            }	      	}	      	if(!mapped) {            mapped = $filter('mapField')(fieldEntity, $scope.field);          }	      	if($scope.field.type.type === constants.FIELD_COMPLEX) {            $scope.content = $filter('tableRendererComplex')(mapped, $scope.field);          }          else {  	      	($scope.field.fieldType.results) {            case constants.FIELD_DATE:  	      		$scope.content = mapped !== 0 ? $filter('date')(mapped, 'dd/MM/yyyy') : '';  	      	  break;            case constants.FIELD_DATETIME:                $scope.content = mapped !== 0 ? $filter('date')(mapped, 'dd/MM/yyyy HH:mm:ss') : '';              break;            case constants.FIELD_BOOLEAN:              var content = $filter('activeInactive')(mapped, $scope.field);              $scope.content = $filter('translate')(content);              $scope.contentUrl = views.translated;              break;            case constants.FIELD_PLAIN:              $scope.content = $filter('translate')(mapped);              $scope.contentUrl = views.translated;              break;            case constants.FIELD_IMAGE:              $scope.type = 'image';              $scope.content = mapped;              $scope.image = {                width: 30,                height: 30,              };              = $scope.field.fieldType.configuration[0];              var width = $filter('filter')(conf, { key: 'IMAGE_WIDTH' }, true)[0];              var height = $filter('filter')(conf, { key: 'IMAGE_HEIGHT' }, true)[0];              if(width) {                $scope.image.width = width.value;              }              if(height) {                $scope.image.height = height.value;              }              break;            case constants.FIELD_PRICE:              var configuration = $scope.field.fieldType.configuration[0];              var currency = $filter('filter')(configuration, { key: 'CURRENCY' }, true)[0];              $scope.suffix = currency.value;              $scope.styles.push('text-right');              $scope.content = $filter('number')(mapped, 2);              break;            case constants.FIELD_NUMBER:              $scope.styles.push('text-right');              $scope.content = mapped;              break;              case constants.FIELD_CSS:              $scope.type = 'styling';              $scope.styles.push('text-center');              $scope.content = mapped;              useList = false;              break;            case constants.FIELD_PLAIN_FILTERED:              $scope.type = 'plain-filtered';              $scope.content = mapped;              :)              var configuration = $scope.field.fieldType.configuration[0];              var filter = $filter('filter')(configuration, { key: constants.TABLE_CELL_FILTER }, true)[0];              $scope.filter = filter.value;              break;    	  		default:    	  			$scope.content = mapped;  	      	}          }          if($scope.field.type.list && useList) {            var list = $scope.field.type.list;                        var listMatch = $filter('filter')(list, { key: ($scope.content+"") }, true);            if(listMatch.length) {              var item = listMatch[0];              var content = item.value;              $scope.content = $filter('translate')(content);            }          }          if($scope.content === null || $scope.content === undefined) {            $scope.content = '';          }      	}      	entityWatcher = $scope.$watch('entity', function() {      		setupValue();          $scope.updateContent();          entityWatcher();          ();      	}, true);        var watchers = null;        $scope.$on('suspend', function() {          watchers = $scope.$$watchers;          $scope.$$watchers = [];        });        $scope.$on('resume', function() {          $scope.$$watchers = watchers;        });      },      link: function postLink(scope, element) {        var elt = angular.element(element);        scope.updateContent = function() {          element.children('.table-cell-content').text(scope.preffix + ' ' + scope.content + ' ' + scope.suffix);        };      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Table header * @description * # tableHeader */angular.module('konga')  .directive('tableHeader', function () {    return {      templateUrl: '/konga/views/table-header.html',      restrict: 'E',      replace: true,      scope: {      	field: '=',        selectSortingField: '=sorting',      	showSorting: '=',        mode: '@'      },      controller: function($scope, $filter, $rootScope) {      	$scope.label = $scope.field.label;      	$scope.owner = '';      	var sourceField = $scope.field;        $scope.sort = null;        $scope.styles = [];        if(['CSS', 'NUMBER', 'PRICE'].indexOf($scope.field.fieldType.results) !== -1) {          $scope.styles.push('text-center');        }      	      	if($scope.field.owner){      		for(var i = 0; i < $rootScope.metadata.entities.length; i++){      			if($scope.field.owner == $rootScope.metadata.entities[i].name){      				if($rootScope.metadata.entities[i].label != null){      					$scope.owner = $filter('translate')($rootScope.metadata.entities[i].label);      				}else{      					$scope.owner = $scope.field.owner;      				}      				break;      			}      		}      	}        if($scope.field.derived) {        	= $scope.field.derivedPath[0];        }        if(!$scope.field.derived && $scope.field.isKey) {          $scope.sort = 'asc';        }        var configurationSource = [];        switch($scope.mode) {        case constants.SCOPE_RESULTS:          configurationSource = sourceField.showInResults.configuration;          break;        case constants.SCOPE_UPDATE:          configurationSource = $scope.field.showInUpdate.configuration;          break;        }        var configuration = $filter('filter')(configurationSource, { key: constants.USE_SHORT_LABEL });      	if(configuration && configuration.length && configuration[0].value === 'true') {      		$scope.label = $scope.field.shortLabel;      	}        $scope.sorting = function(type) {          ($scope.field.derived) {          = {          : 'action-under-development'          };          $rootScope.operations.dispatchAction(action, {});          }          {            $scope.selectSortingField($scope.field, type);          }        };        var watchers = null;        $scope.$on('suspend', function() {          watchers = $scope.$$watchers;          $scope.$$watchers = [];        });        $scope.$on('resume', function() {          $scope.$$watchers = watchers;        });        $scope.$on('sorting', function(evt, args) {          var field = args.field;          var type = args.type;          if(field === $scope.field) {            $scope.sort = type;          }          else {            $scope.sort = null;          }        });      },      link: function postLink(scope, element, attrs) {      }    };  });'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Table input * @description * # tableInput */angular.module('konga')  .directive('tableInput', ['$filter', '$timeout', 'scaffold', function ($filter, $timeout, scaffold) {    return {      templateUrl: '/konga/views/table-input.html',      restrict: 'E',      replace: true,      link: function postLink(scope, element, attrs) {      	var entityFields = util.getEntityFields(scope.metadata);      	var innerEntityTypeName = scope.property.type.complexType;      	var innerEntityType = util.getMetadata(innerEntityTypeName);      	var innerEntityTypeFields = util.getEntityFields(innerEntityType);      	.rows = null;      	.columns = null;      	.minX = null;      	scope.maxX = null;      	.minY = null;      	scope.maxY = null;      	.stepX = null;      	scope.stepY = null;      	(TODO Configure)      	scope.valueField = 'value';      	= null;      	= scope.configuration = {};      	var configurationSource = scope.property.fieldType.configuration[0];      	      	= $filter('filter')(configurationSource, { key: constants.TABLE_CONF_X_AXIS_PROPERTY }, true)[0];      	var xAxisPropName = xAxisPropertyConfiguration.value;      	configuration.xAxisProperty = $filter('filter')(innerEntityTypeFields, { name: xAxisPropName }, true)[0];      	= $filter('filter')(configurationSource, { key: constants.TABLE_CONF_Y_AXIS_PROPERTY }, true)[0];      	var yAxisPropName = yAxisPropertyConfiguration.value;      	configuration.yAxisProperty = $filter('filter')(innerEntityTypeFields, { name: yAxisPropName }, true)[0];      	(first) {      		= $filter('filter')(configurationSource, { key: constants.TABLE_CONF_X_AXIS_MIN })[0];      		var yAxisMinConfiguration = $filter('filter')(configurationSource, { key: constants.TABLE_CONF_Y_AXIS_MIN })[0];      		var xAxisMaxConfiguration = $filter('filter')(configurationSource, { key: constants.TABLE_CONF_X_AXIS_MAX })[0];      		var yAxisMaxConfiguration = $filter('filter')(configurationSource, { key: constants.TABLE_CONF_Y_AXIS_MAX })[0];      		= xAxisMinConfiguration.value.replace(/[\{\}]/g, '');			var yAxisMinPropName = yAxisMinConfiguration.value.replace(/[\{\}]/g, '');			var xAxisMaxPropName = xAxisMaxConfiguration.value.replace(/[\{\}]/g, '');			var yAxisMaxPropName = yAxisMaxConfiguration.value.replace(/[\{\}]/g, '');			= $filter('filter')(entityFields, { name: xAxisMinPropName })[0];			var yAxisMinProperty = $filter('filter')(entityFields, { name: yAxisMinPropName })[0];			var xAxisMaxProperty = $filter('filter')(entityFields, { name: xAxisMaxPropName })[0];			var yAxisMaxProperty = $filter('filter')(entityFields, { name: yAxisMaxPropName })[0];			.minX = $filter('mapField')(scope.entity, xAxisMinProperty);			scope.minY = $filter('mapField')(scope.entity, yAxisMinProperty);			scope.maxX = $filter('mapField')(scope.entity, xAxisMaxProperty);			scope.maxY = $filter('mapField')(scope.entity, yAxisMaxProperty);			(only first time)			if(first === true) {				scope.$watch('entity.' + xAxisMinPropName, initLimits);				scope.$watch('entity.' + xAxisMaxPropName, initLimits);				scope.$watch('entity.' + yAxisMinPropName, initLimits);				scope.$watch('entity.' + yAxisMaxPropName, initLimits);			}			else {				if(initTimeout) {					$timeout.cancel(initTimeout);					initTimeout = null;				}				initTimeout = $timeout(function() {					init();				}, 500);			}      	}      	(first) {      		= $filter('filter')(configurationSource, { key: constants.TABLE_CONF_X_AXIS_STEP })[0];      		var yAxisStepConfiguration = $filter('filter')(configurationSource, { key: constants.TABLE_CONF_Y_AXIS_STEP })[0];      		= xAxisStepConfiguration.value.replace(/[\{\}]/g, '');			var yAxisStepPropName = yAxisStepConfiguration.value.replace(/[\{\}]/g, '');			= $filter('filter')(entityFields, { name: xAxisStepPropName })[0];			var yAxisStepProperty = $filter('filter')(entityFields, { name: yAxisStepPropName })[0];			.stepX = $filter('mapField')(scope.entity, xAxisStepProperty);			scope.stepY = $filter('mapField')(scope.entity, yAxisStepProperty);			(only first time)			if(first === true) {				scope.$watch('entity.' + xAxisStepPropName, initSteps);				scope.$watch('entity.' + yAxisStepPropName, initSteps);			}			else {				if(initTimeout) {					$timeout.cancel(initTimeout);					initTimeout = null;				}				initTimeout = $timeout(function() {					init();				}, 500);			}      	}      	function init() {      		if(!(scope.minX > 0 && scope.minY > 0 && scope.stepX > 0 && scope.stepY > 0 && scope.maxX > scope.minX && scope.maxY > scope.minY)) {      			return;      		}      		= scope.maxX - scope.minX;      		var difY = scope.maxY - scope.minY;      		= (difY / scope.stepY) | 0;      		var colNum = (difX / scope.stepX) | 0;      		= scope.rows = [];      		if(rowNum > 0) {	      		for(var i = 0; i <= rowNum; i++) {	      			rows.push({	      				value: scope.minY + i * scope.stepY	      				?	      			});	      		}      		}      		= scope.columns = [];      		if(colNum > 0) {	      		for(var i = 0; i <= colNum; i++) {	      			columns.push({	      				value: scope.minX + i * scope.stepX	      			});	      		}      		}      		= scope.steps = [];      		= $filter('mapField')(scope.entity, scope.property);      		for(var r = 0; r < rows.length; r++) {      			for(var c = 0; c < columns.length; c++) {      				?      				var queryObj = {};      				queryObj[xAxisPropName] = columns[c].value;      				queryObj[yAxisPropName] = rows[r].value;      				var existingStep = $filter('filter')(existingSteps, queryObj, true)[0];      				(existingStep) {      					steps.push(existingStep);      					}      				, create new one      				else {      					var newStep = scaffold.newEntity(innerEntityType);      					newStep[xAxisPropName] = columns[c].value;      					newStep[yAxisPropName] = rows[r].value;      					.$provisory = true;      					steps.push(newStep);      				}      			}      		}      		}      	if(scope.entity.$resolved !== false) {      		initLimits(true);      		initSteps(true);      		init();      	}      	else {      		var resolveWatcher = scope.$watch('entity.$resolved', function() {      			if(scope.entity.$resolved !== false) {      				resolveWatcher();      				initLimits(true);      				initSteps(true);      				init();      			}      		})      	}      	scope.getQueryObj = function(row, column) {      		var queryObj = {};      		queryObj[xAxisPropName] = column.value;      		queryObj[yAxisPropName] = row.value;      		return queryObj;      	};      	scope.updateValue = function(step) {      		(step.value > 0) {      			if(step.$invalid) delete step.$invalid;  			}   			else {  				step.$invalid = true;  			}      		, as definitive steps get updated automatically      		if(step.$provisory) {      			.$provisory;      			scope.value.entity.push(step);      		}      		else {      			var listenerName = scope.property.owner + '_' + scope.property.name;      			scope.$emit('manually_change_' + listenerName);      		}      		var invalidSteps = $filter('filter')(scope.steps, { $invalid: true });      		      		scope.$emit('form-invalid', {				field: scope.property.name,				owner: scope.property.owner,				validation: 'table-valid',				valid: !invalidSteps.length			});      	};      }    };  }]);'use strict';/** * @ngdoc directive * @name Konga Reference.directive:Update form * @description * # updateForm */angular.module('konga')  .directive('updateForm', ['$routeParams', 'api', 'common', 'fieldMapper', '$filter',   	function ($routeParams, api, common, fieldMapper, $filter) {	    return {			template: '<div ng-include="templateUrl"></div>',			restrict: 'E',			replace: true,			scope: {		      	entity: '=',		      	changes: '=',		      	metadata: '=',		      	params: '=',		      	onUpdate: '=',		      	creating: '=',		      	onChange: '=',		      	fields: '=?'	      	},	      	controller: function ($scope) {		      	, the form will be rendered differently		      	$scope.templateUrl = '/konga/views/cascade-update.html';		      	if(!$scope.fields) {		      		$scope.fields = util.getEntityFields($scope.metadata);		      	}		      	switch($scope.metadata.updateType) {			      	case constants.TABBED_FORM:			      		$scope.templateUrl = '/konga/views/tabbed-update.html';			      		$scope.categories = util.getEntityCategories($scope.metadata, 1);					    		$scope.matchCategory = function(index, category) {			    			var field = $scope.fields[index];			    			return field.categories.indexOf(category) !== -1;			    		};					      		break;			      	case constants.CUSTOM_TABBED_FORM:			      		$scope.templateUrl = '/konga/views/custom_tabbed-update.html';			      		$scope.fieldsets = util.getEntityFieldSets($scope.metadata);			    		$scope.getView = function(name) {			    			var view = mapper[name];			    			if(!view) {			    				}			    			return view;			    		};			      		break;				      	case constants.CUSTOM_FORM:			      		var configuration = $filter('filter')($scope.metadata.configuration, { key: constants.UPDATE_CUSTOM_VIEW });			      		if(!configuration.length) {			      			}			      		$scope.templateUrl = mapper[configuration[0].value];			      					      		break;		      	}		      	$scope.$on('changeTab', function(events, args){		    		$scope.$broadcast('tabChangeCustomTabbed', {tab: args.tab} );		    	}); 			},	    	link: function postLink(scope, element, attrs) {	        	.text('this is the updateForm directive');	   		}	    };	  }]);'use strict';angular.module('konga')  .directive('verticalTabs', function () {  	var directiveDefinitionObject = {};	directiveDefinitionObject.restrict = 'E';	directiveDefinitionObject.transclude= true;	directiveDefinitionObject.replace = true;	directiveDefinitionObject.scope= {};		directiveDefinitionObject.controller= function($scope, $rootScope){		var tabContentList = $scope.tabContentList = [];				$scope.select = function(tabContent){			angular.forEach(tabContentList, function(tabContent){				tabContent.selected = false;				tabContent.active = '';			});			tabContent.selected = true;			tabContent.active = 'active';			$rootScope.pageData.currentTab = tabContent.title;			$scope.$emit('changeTab', {tab: tabContent} );		};				this.addTabContent = function(tabContent){			if(tabContentList.length === 0 && !$rootScope.pageData.currentTab){				$scope.select(tabContent);			}			if($rootScope.pageData.currentTab){				if(tabContent.title === $rootScope.pageData.currentTab){					$scope.select(tabContent);				}			}			tabContentList.push(tabContent);		};	};		directiveDefinitionObject.templateUrl = '/konga/views/verticaltab.tp.html';		return directiveDefinitionObject;  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:statut * @function * @description * # statut * It turns the true/false statut, in Active/Inactive * @param {Array} value Defines the array of fields to filter * @param {Object} field Defines the field to manage */angular.module('konga')  .filter('activeInactive', ['configurationManager', function () {    return function (value,field) {		if (value) {			return 'message.boolean.yes';		} else {			return 'message.boolean.no';		}    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:allowed * @function * @description * # allowed * Filter in the Konga Reference. */angular.module('konga')  .filter('allowed', ['userData', function (Session) {    return function (input, mode) {    	var ret = [];    	for(var i = 0; i < input.length; i++) {    		var field = input[i];    		switch(mode) {		  	case constants.SCOPE_SEARCH:		  		?		  		if(!field.searchable.value.length) {		  			ret.push(field);		  		}		  		(userData.roles.indexOf(field.searchable.value) !== -1) {		  			ret.push(field);		  		}		  		break;		  	case constants.SCOPE_RESULTS:		  		?		  		if(!field.showInResults.value.length) {		  			ret.push(field);		  		}		  		(userData.roles.indexOf(field.showInResults.value) !== -1) {		  			ret.push(field);		  		}		  		break;		  	case constants.SCOPE_UPDATE:		  		?		  		if(!field.showInUpdate.value.length) {		  			ret.push(field);		  		}		  		(userData.roles.indexOf(field.showInUpdate.value) !== -1) {		  			ret.push(field);		  		}		  		break;			}    	}    	return ret;    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:customFilter * @function * @description * # customFilter * Filter in the Konga Reference. */angular.module('konga')  .filter('customFilter', ['$filter', function ($filter) {    return function (value, filter) {      return $filter(filter)(value);    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:extended * @function * @description * # extended * It receives an array of fields in metadata and a name of field which are checked, and it returns true/false (i.e. isExtended or not). * @param {Array} metadata Defines the array of fields of metadata * @param {String} name Defines the name of checked field */angular.module('konga')  .filter('extended', function () {    return function (metadata,name) {          	for(var i = 0; i < metadata.length; i++) {            if(metadata[i].name == name) {              return metadata[i].isExtended;            }          }      	return false;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:fieldApiName * @function * @description * # fieldApiName * Filter in the Konga Reference. */angular.module('konga')  .filter('fieldApiName', function () {    return function (fieldName, source) {		var attrs = fieldName.split(' ');		if(attrs.length === 1) {			return fieldName;		}		else if(attrs[1] === constants.COMPLEX_FIELD_AS) {			if(source && attrs[1] === constants.SELF_FIELD) {				return source.name;			}			return attrs[2];		}    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:fieldMultiplicity * @function * @description * # fieldMultiplicity * Filter in the Konga Reference. */angular.module('konga')  .filter('fieldMultiplicity', function () {    return function (field, mode) {      if(mode === constants.SCOPE_SEARCH) {      	return field.searchConf.multiplicity;      }      return field.multiplicity;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:formType * @function * @description * # formType * It receives an input ,and it returns a string 'formType filter' plus input. * @param {String} input Defines the String to be added. */angular.module('konga')  .filter('formType', function () {    return function (input) {      return 'formType filter: ' + input;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:htmlify * @function * @description * # htmlify * Filter in the Konga Reference. */angular.module('konga')  .filter('htmlify', ['$filter', function ($filter) {    return function (text) {      var parsedText = text;      = /\n/g;      var lineBreakReplace = '<br />';      parsedText = parsedText.replace(lineBreakRegex, lineBreakReplace);      = $filter('urlify')(parsedText);      return parsedText;    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:locale * @function * @description * # locale * It receives an input , and it returns a message which locate in index equal input. * @param {Number} input Defines the index of message */angular.module('konga')  .filter('locale', ['common',   	function (common) {	    return function (input) {	    	var messages = common.read('messages');	    	if(!input || !messages || !messages.messages) {	    		return null;	    	}	     	return messages.messages[input];	    };	  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:mapField * @function *  * @description * It receives an entity and the defined path for the field to map, and it returns the value located in that path for such entity. *  * @param {Object} entity Defines the entity to manage * @param {Object} field Defines the field to manage */angular.module('konga')  .filter('mapField', function () {    return function (entity, field) {    	if(!entity) {			return null;		}		if(field.derived) {			var path = field.apiPath;			var pathSteps = path.split('.');			var current = entity;			for(var i = 0; i < pathSteps.length; i++) {				if(current) {					current = current[pathSteps[i]];				}				else {					?					current = null;					break;				}			}			return current;		}		(field.type.type === constants.FIELD_COMPLEX) {			[field.name];		}		else {			return entity[field.name];		}    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:queryParser * @function * @description * # queryParser * Filter in the Konga Reference. */angular.module('konga')  .filter('queryParser', function () {    return function (field, entity, oldQuery) {    	= oldQuery ? oldQuery : {};    	= field.type.query;		(fieldQuery instanceof Array) {			fieldQuery = {};		}		(var param in fieldQuery) {			var value = fieldQuery[param];			(value.match(constants.QUERY_PARAM_REGEXP)) {				= value.replace(/[{-}]/g, '');				= entity[realValue];				if(entityValue !== null && entityValue !== undefined && !(entityValue.length === 0)) {					query[param] = entityValue;				}			}			(value.match(constants.QUERY_COMPLEX_PARAM_REGEXP)) {				= value.replace(/[{-}]/g, '').split(/\./);				var entityValue = entity;				(var i = 0; i < valuePath.length; i++) {					var step = valuePath[i];					if(!entityValue) {						break;					}					entityValue = entityValue[step];				}				if(entityValue !== null && entityValue !== undefined && !(entityValue.length === 0)) {					query[param] = entityValue;				}			}			, put plain value			else {				query[param] = value;			}		}		return query;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:quickSearch * @function * @description * # quickSearch * It receives an metadata , and it returns an array of Objects(i.e quickSearchField) * @param {Object} metadata Defines the metadata of entity */angular.module('konga')  .filter('quickSearch', ['$filter', function ($filter) {    return function (metadata) {    	var ret = [];    	var fields = util.getEntityFields(metadata);    	for(var i = 0; i < fields.length; i++) {    		var field = fields[i];    		if(field.quickSearch.value !== null) {    			var quickSearchField = {    				metadata: field,    				value: ''    			};    			ret.push(quickSearchField);    		}    	}    	if(!ret.length) {    		= $filter('filter')(fields, { isKey: true });    		var relatedMetadata = util.getMetadata(field.owner);    		var extra = {    			label: $filter('translate')(relatedMetadata.label),	      		labelPlaceholder: relatedMetadata.label    		};    		var quickSearchField = {				metadata: codeField[0],				value: '',				extra: extra			};			ret.push(quickSearchField);    	}    	return ret;    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:recursiveFilter * @function * @description * # recursiveFilter * Filter in the Konga Reference. */angular.module('konga')  .filter('recursiveFilter', ['$filter', function ($filter) {    return function (input, childrenField) {          };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:resultParams * @function * @description * # resultParams * It receives an array of fields and metadata , and it returns another array of fields containing the value of sorting field equal 'asc'. * @param {Array} fields Defines an array of fields of the entity * @param {Object} metadata Defines the metadata of the entity */angular.module('konga')  .filter('resultParams', function () {    return function (fields, metadata) {      var result = [];      var hasDefaultSorting = false;      for(var i = 0; i < fields.length; i++) {      	var field = fields[i];        (field.showInResults.value !== null) {        	field.sorting = '';        	if(field.priority.results === 1) {        		field.sorting = 'asc';        		hasDefaultSorting = true;        	}        	result.push(field);        }      }            if (!hasDefaultSorting && result.length > 0) {    	  result[0].sorting = 'asc';      }      return result;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:scroll * @function * @description * # scroll * It receives an array of objects (i.e. input), and it returns another array containing elements of the old one arranging the index from 0 to limit. * @param {Object} input Defines an array of objects * @param {Number} limit Defines the number of object getting from input. */angular.module('konga')  .filter('scroll', function () {    return function (input, limit) {      return input.slice(0, limit);    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:searchParams * @function * @description * # searchParams * It receives an entity metadata information, and returns all its fields that could be used for searching purposes. * @param {Array} fields Defines an array of fields of the entity * @param {Object=} metadata Defines the metadata of the entity  */angular.module('konga')  .filter('searchParams', function () {    return function (fields, metadata) {      var result = [];      for(var i = 0; i < fields.length; i++) {        var field = fields[i];        (field.searchable.value !== null) {            result.push(field);        }      }      return result;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:selectData * @function * @description * #selectData * It receives metadata, an array of entities and configuration (i.e. boolean), and it returns an array of objects containing data  from these parameters (i.e. entities) for selecting purpose. * @param {Object} metadata Defines the metadata of the entity * @param {Object} entities Defines the an array of entities to manage * @param {Object} configuration Defines an object containing added and selected field.  */angular.module('konga')  .filter('selectData', function () {    return function (metadata, entities, configuration) {		var result = [];		for(var i = 0; i < entities.length; i++) {			var added = configuration && configuration.added !== undefined ? configuration.added : false;			var selected = configuration && configuration.selected !== undefined ? configuration.selected : false;			var obj = {				id : util.getEntityId(metadata, entities[i]),				key : util.getEntityCode(metadata, entities[i]),				value : util.getEntityLabel(metadata, entities[i]),				added: added,				selected: selected			};			result.push(obj);		}      return result;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:selectedFields * @function * @description * # selectedFields * It receives parameters such as real, name, apiNames(if any), source, and it returns an array of  fields in nested fields for rendering purpose. * @param {Array} real Defines the array fields of entity to manage * @param {Array} names Defines the array of field name * @param {Array=} apiNames Defines the array of apiName of entities * @param {Array=} source Defines the field to manage */angular.module('konga')  .filter('selectedFields', ['$filter', function ($filter) {    return function (real, names, source) {    	      , return all    	var result = [];      var sortedResult = [];      (var i = 0; i < names.length; i++) {        sortedResult.push(name);      }    	for(var i = 0; i < real.length; i++) {                = names.indexOf(real[i].name);    		if(nameIndex !== -1) {    			var fieldToPush = angular.copy(real[i]);                    .derived = true;          fieldToPush.apiName = $filter('fieldApiName')(names[nameIndex]);          fieldToPush.apiPath = real[i].name;          fieldToPush.derivedPath = [];          fieldToPush.categories = source.categories;          (avoid COMPLEX recursivity)          (var showConf in fieldToPush.fieldType) {            if(fieldToPush.fieldType[showConf] === constants.FIELD_COMPLEX) {              fieldToPush.fieldType[showConf] = constants.FIELD_SELECT;            }          }          result.push(fieldToPush);    		}    	}      (var i = 0; i < names.length; i++) {        var name = names[i];        var nameAttrs = name.split(' ');        (nameAttrs[0] === constants.SELF_FIELD) {          var fieldCopy = angular.copy(source);          (avoid COMPLEX recursivity)          (var showConf in fieldCopy.fieldType) {            fieldCopy.fieldType[showConf] = constants.FIELD_SELECT;          }          .derived = true;          fieldCopy.apiName = $filter('fieldApiName')(name, fieldCopy);          fieldCopy.apiPath = fieldCopy.name;          fieldCopy.derivedPath = [];          fieldCopy.isSelf = true;          result.push(fieldCopy);          continue;        }        if(nameAttrs[0].indexOf('.') !== -1) {          var fieldPath = nameAttrs[0].split('.');          var path = [];          var current = null;          var currentFields = real;          for(var f = 0; f < fieldPath.length; f++) {            current = fieldPath[f];            (var g = 0; g < currentFields.length; g++) {              var currentField = currentFields[g];              if(currentField.name === current) {                var fieldType = currentField.type;                if(f === fieldPath.length -1) {                  var fieldToPush = angular.copy(currentField);                  .derived = true;                  fieldToPush.apiName = $filter('fieldApiName')(name);                  fieldToPush.apiPath = nameAttrs[0];                  fieldToPush.derivedPath = path;                  fieldToPush.categories = source.categories;                  (avoid COMPLEX recursivity)                  (var showConf in fieldToPush.fieldType) {                    if(fieldToPush.fieldType[showConf] === constants.FIELD_COMPLEX) {                      fieldToPush.fieldType[showConf] = constants.FIELD_SELECT;                    }                  }                  result.push(fieldToPush);                }                , unless it's the last iteration on the path                else if(fieldType.type === constants.FIELD_COMPLEX) {                  var complexType = fieldType.complexType;                  var complexMetadata = util.getMetadata(complexType);                  var complexFields = util.getEntityFields(complexMetadata);                  currentFields = complexFields;                  .push(currentField);                }                break;              }            }          }        }      }      (var i = 0; i < result.length; i++) {        var apiPath = result[i].apiPath;        var index = names.indexOf(apiPath);        sortedResult.splice(index, 1, result[i]);      }      return sortedResult;    };  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:selectedLocale * @function * @description * # selectedLocale * It receives an array of locales , and it returns an locale object which have the value of selected field equal true or returns empty. * @param {Array} locales Defines the array of locale */angular.module('konga')  .filter('selectedLocale', function () {    return function (locales) {    	if(!locales) {    		return {};    	}      for(var i = 0; i < locales.length; i++) {      	if(locales[i].selected) {      		return locales[i];      	}      }      return {};    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:shortify * @function * @description * # shortify * It receive a String (i.e. input) and length, and it returns another one containing extract characters from the old one arranging the index from 0 to length. * @param {String} input Defines  the name of field * @param {Number} length Defines the number of extract characters  */angular.module('konga')  .filter('shortify', function () {    return function (input, length) {      var ret;      try {      	ret = input.substring(0, length);      } catch(e) {      	ret = input;      	}      return ret;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:tableRendererComplex * @function * @description * # tableRendererComplex * It receives value and metadata , and it returns the value of column which shows the result of complex fields base on these parameters. * @param {Object} metadata Defines the metadata of the entity to manage * @param {Object} value Defines the entity of each row */angular.module('konga')  .filter('tableRendererComplex', function () {    return function (value, metadata) {      if(metadata.type.type === constants.FIELD_COMPLEX) {   	      var complexType = metadata.type.complexType;	      var metadata = util.getMetadata(complexType);	      var key = util.getEntityCode(metadata, value);	      var label = util.getEntityLabel(metadata, value);	      	      (!label && !key)	    	  return "";	      	      return label + ' (#' + key + ')';      }      return '';    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:translateComplex * @function * @description * # translateComplex * It receives a String (input) and extra (if any), and it returns a complex field to be translated using standard `translate` filter. *  @param {String} input Defines the name of label of the field *  @param {Object=} extra Defines the extra expression object for filter  */angular.module('konga')  .filter('translateComplex', ['$filter',   	function ($filter) {	    return function (input, extra) {	      if(typeof input !== 'string') {	      	;	      }	      else {	      	return $filter('translate')(input, extra);	      }	    };	  }]);'use strict';/** * @ngdoc filter * @name Konga Reference.filter:updateParams * @function * @description * # updateParams * It receives an array of fields , metadata and category, and it returns all entity's fields that could be used for updating purposes. * @param {Array} fields Defines an array of fields of the entity. * @param {Object} metadata Defines the metadata of the entity * @param {Object} the category of the entity *  */angular.module('konga')  .filter('updateParams', function () {    return function (fields, metadata, category) {      var result = [];      for(var i = 0; i < fields.length; i++) {        var field = fields[i];        (field.showInUpdate.value !== null) {            if(category !== undefined) {              if(field.categories.indexOf(category) !== -1) {                result.push(field);              }            }            else               result.push(field);        }      }      return result;    };  });'use strict';/** * @ngdoc filter * @name Konga Reference.filter:urlify * @function * @description * # urlify * Filter in the Konga Reference. */angular.module('konga')  .filter('urlify', function () {    return function (text) {	    var urlRegex = /(https?:\/\/[^\s]+)/g;	    return text.replace(urlRegex, function(url) {	        return '<a href="' + url + '" target="_blank">' + url + '</a>';	    });	    .replace(urlRegex, '<a href="$1">$1</a>')	};  });'use strict';/** * @ngdoc object * @name Konga Reference.constants * @description * Stores common constants used all across the application * @property {String} API_HOST Defines where is the api located * @property {String} ENTITY_ID_PREFFIX Defines the preffix for ENTITY operations * @property {String} SEARCH_SUFFIX Defines the suffix for search purposes * @property {String} STRING_SEPARATOR Defines the separator for Strings * @property {String} NEW_ENTITY_ID Defines the eds id when creating a new one * @property {String} SOURCE_METADATA Defines the entity name of the metadata * @property {String} SCOPE_SEARCH Defines the search scope name * @property {String} SCOPE_UPDATE Defines the update scope name * @property {String} FIELD_BOOLEAN Defines the type name of a boolean field * @property {String} FIELD_CHECKBOX Defines the type name of a checkbox field * @property {String} FIELD_DATE Defines the type name of a date field * @property {String} FIELD_TEXT Defines the type name of a text field * @property {String} FIELD_COMPLEX Defines the type name of a complex field * @property {String} DATE_DEFAULT_NOW Defines the default value for date objects, to set-up as current date * @property {String} MULTIPLICITY_ONE Defines the String to define one-to-one multiplicity * @property {String} MULTIPLICITY_MANY Defines the String to define many-to-many multiplicity * */var constants = {	ALERT_TYPE_ERROR 					: 'danger',	ALERT_TYPE_SUCCESS 					: 'success',	ALERT_TYPE_DEFAULT 					: 'default',	ALERT_TYPE_WARNING 					: 'warning',	ENTITY_ID_PREFFIX 					: 'entity_',	SEARCH_SUFFIX 						: '_search',	STRING_SEPARATOR					: '_',	NEW_ENTITY_ID 						: 'new',	REFRESH_SEARCH_KEY 					: 'refreshSearchKey_',	SCOPE_SEARCH 						: 'search',	SCOPE_RESULTS 						: 'results',	SCOPE_UPDATE 						: 'update',	FIELD_STRING 						: 'STRING',	FIELD_NUMBER 						: 'NUMBER',	FIELD_PLAIN 						: 'PLAIN',	FIELD_PASSWORD 						: 'PASSWORD',	FIELD_BOOLEAN 						: 'BOOLEAN',	FIELD_CHECKBOX 						: 'CHECKBOX',	FIELD_COMBOBOX 						: 'COMBOBOX',	FIELD_DATE 							: 'DATE',	FIELD_DATETIME 						: 'DATETIME',	FIELD_DATESEARCH 					: 'DATE-SEARCH',	FIELD_TEXT 							: 'TEXT',	FIELD_TEXTAREA 						: 'TEXTAREA',	FIELD_COMPLEX 						: 'COMPLEX',	FIELD_LIST 							: 'LIST',	FIELD_PICK_LIST 					: 'PICK_LIST',	FIELD_SELECT 						: 'SELECT',	FIELD_FILTERED_SELECT 				: 'FILTERED_SELECT',	FIELD_TICS 							: 'TICS',	FIELD_COLOR 						: 'COLOR',	FIELD_CSS 							: 'CSS',	FIELD_FILE 							: 'FILE',	FIELD_IMAGE 						: 'IMAGE',	FIELD_PRICE 						: 'PRICE',	FIELD_CUSTOM 						: 'CUSTOM',	FIELD_PLAIN_FILTERED 				: 'PLAIN_FILTERED',	FIELD_TABLE 						: 'TABLE',	: 'list_search',	: 'list_link',	DATE_DEFAULT_NOW 					: 'now',	MULTIPLICITY_ONE 					: 'ONE',	MULTIPLICITY_MANY 					: 'MANY',	TRIGGER_MOMENT_IMMEDIATE 			: 'IMMEDIATE',	TRIGGER_MOMENT_COMMIT 				: 'COMMIT',	TRIGGER_TYPE_CONFIRM 				: 'CONFIRM',	TRIGGER_TYPE_ALERT 					: 'ALERT',	TRIGGER_PARAM_LABEL 				: 'label',	TRIGGER_MATCH_VALUE 				: 'VALUE',	TRIGGER_MATCH_LENGTH 				: 'LENGTH',	TRIGGER_MATCH_TYPE_EXACT			: 'EXACT_MATCH',	TRIGGER_MATCH_TYPE_RANGE	  		: 'RANGE',	CASCADE_FORM 						: 'CASCADE',	TABBED_FORM 						: 'TABBED',	CUSTOM_TABBED_FORM 					: 'CUSTOM_TABBED',	CUSTOM_FORM 						: 'CUSTOM',	CATEGORIZED_CASCADE_FORM 			: 'CATEGORIZED_CASCADE',	LANGUAGE_MESSAGE_PREFFIX 			: 'message.languages.',	DATE_COMPARATOR_LOWER_THAN 			: 'LOWER_THAN',	DATE_COMPARATOR_LOWER_EQUALS 		: 'LOWER_EQUALS',	DATE_COMPARATOR_EQUALS 				: 'EQUALS',	DATE_COMPARATOR_GREATER_EQUALS 		: 'GREATER_EQUALS',	DATE_COMPARATOR_GREATER_THAN 		: 'GREATER_THAN',	DATE_COMPARATOR_BETWEEN 			: 'BETWEEN',	NUMBER_COMPARATOR_LOWER_THAN 		: 'LOWER_THAN',	NUMBER_COMPARATOR_LOWER_EQUALS 		: 'LOWER_EQUALS',	NUMBER_COMPARATOR_EQUALS 			: 'EQUALS',	NUMBER_COMPARATOR_GREATER_EQUALS 	: 'GREATER_EQUALS',	NUMBER_COMPARATOR_GREATER_THAN 		: 'GREATER_THAN',	NUMBER_COMPARATOR_BETWEEN 			: 'BETWEEN',	VALIDATOR_EXACT_MATCH 				: 'EXACT_MATCH',	VALIDATOR_RANGE 					: 'RANGE',		MAXLEN_FILTER_NAME              	: 30,	ACTION_TYPE_MODAL 					: 'modal',	ACTION_TYPE_NOTIFY 					: 'notify',	ACTION_TYPE_CONFIRM 				: 'confirm',	ACTION_TYPE_TAB 					: 'tab',	ACTION_TYPE_FUNCTION 				: 'function',		ACTION_RESTRICTION_POLICY_ALL 		: 'all'	,	USER_ID								: 'userId',		COMBO_NATURE_TIERS					: 'natTiers',		CONFIGURATION_IGNORE_PARENT_FIELD 	: 'IGNORE_PARENT_FIELD',	CONFIGURATION_USE_VIEW 				: 'USE_VIEW',	TAB_TYPE_SEARCH 					: 'glyphicon glyphicon-search',	TAB_TYPE_UPDATE 					: 'glyphicon glyphicon-pencil',	TAB_TYPE_HOME 						: 'glyphicon glyphicon-home',	TAB_TYPE_TASKS 						: 'glyphicon glyphicon-tasks',	TAB_TYPE_GRID 						: 'glyphicon glyphicon-th',	TAB_TYPE_GRID_LARGE 				: 'glyphicon glyphicon-th-large',	TAB_TYPE_STORE 						: 'glyphicon glyphicon-shopping-cart',	TAB_TYPE_CONFIG 					: 'glyphicon glyphicon-cog',	FORM_STYLE_HORIZONTAL 				: 'HORIZONTAL',	USE_SHORT_LABEL 					: 'USE_SHORT_LABEL',		FILE_TYPE_PDF						: 'application/pdf',	FILE_TYPE_PNG						: 'image/png',	FILE_TYPE_JPG						: 'image/jpeg',	FILE_TYPE_GIF						: 'image/gif',	FILE_EXT_PNG						: '.png',	FILE_EXT_JPG						: '.jpg',	FILE_EXT_GIF						: '.gif',	CASCADE_UPDATE 						: 'CASCADE_UPDATE',	PROPAGATE_UPDATE 					: 'PROPAGATE_UPDATE',	DISABLE_COMPLEX_FIELD 				: 'DISABLE_FIELD',	SELF_FIELD 							: '$self',	COMPLEX_FIELD_AS					: 'as',		UPDATE_CUSTOM_VIEW 					: 'UPDATE_CUSTOM_VIEW',	SEARCH_CUSTOM_VIEW 					: 'SEARCH_CUSTOM_VIEW',	UPDATE_HIDE_BUTTONS 				: 'UPDATE_HIDE_BUTTONS',	WEEKDAYS 							: ['day.sunday', 'day.monday', 'day.tuesday', 'day.wednesday', 'day.thursday', 'day.friday', 'day.saturday'],	WEEKEND_DAYS 						: ['day.saturday', 'day.sunday'],	MONTHS 								: ['month.january', 'month.february', 'month.march', 'month.april', 'month.may', 'month.june', 'month.july', 'month.august', 'month.september', 'month.october', 'month.november', 'month.december'],	SEARCH_USE_CATEGORY 				: 'USE_SEARCH_CATEGORY',	RESULTS_USE_CATEGORY 				: 'USE_RESULTS_CATEGORY',	HIDE_CATEGORY_HEADER 				: 'HIDE_CATEGORY_HEADER',	QUERY_PARAM_REGEXP 					: /^{\w+}$/,	QUERY_COMPLEX_PARAM_REGEXP 			: /^{(\w+\.\w+)*}$/,	SHOW_PAGINATION 					: 'SHOW_PAGINATION',	TABLE_CELL_RENDERER 				: 'TABLE_CELL_RENDERER',	TABLE_CELL_FILTER 					: 'TABLE_CELL_FILTER',	READ_ONLY 							: 'READ_ONLY',	TABLE_CONF_X_AXIS_PROPERTY 			: 'X_AXIS_PROPERTY',	TABLE_CONF_Y_AXIS_PROPERTY 			: 'Y_AXIS_PROPERTY',	TABLE_CONF_X_AXIS_MIN 				: 'X_AXIS_MIN',	TABLE_CONF_Y_AXIS_MIN 				: 'Y_AXIS_MIN',	TABLE_CONF_X_AXIS_MAX 				: 'X_AXIS_MAX',	TABLE_CONF_Y_AXIS_MAX 				: 'Y_AXIS_MAX',	TABLE_CONF_X_AXIS_STEP 				: 'X_AXIS_STEP',	TABLE_CONF_Y_AXIS_STEP 				: 'Y_AXIS_STEP',	LOOK_AND_FEEL_PLAIN 				: 'plain',	LOOK_AND_FEEL_TABS 					: 'tabs',	CONFIG_LOOK_AND_FEEL 				: 'look-and-feel',	HIDE_WHEN_CREATING 					: 'hide-when-creation',	HIDE_WHEN_UPDATING 					: 'hide-when-updating'};'use strict';/** * @ngdoc object * @name lib.konga.util * @description *  * Provides a set of common utils used all across the application. * */var util = {	metadataObject : null,	getConfiguration: function() {		return util.metadataObject.configuration;	},	getMetadata: function(name) {		for(var i = 0; i < util.metadataObject.entities.length; i++) {			var current = util.metadataObject.entities[i];			if(current.name === name) {				return current;			}		}		return null;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityFields	 * @description	 * Returns all fields for an entity type following all hierarchy upwards.	 * @param {Object} entity Entity metadata information	 * @returns {Array} All fields for that entity type	 */	getEntityFields: function(entity) {		= angular.copy(entity.fields);		?		(entity.superClass) {			var superClass = util.getMetadata(entity.superClass);			= entity.configuration;			var superFields = superClass.fields;			var superFieldsCopy = [];			for(var i = 0; i < superFields.length; i++) {				?				var ignore = false;				for(var f = 0; f < entityConfiguration.length; f++) {					var param = entityConfiguration[f];					if(param.key === constants.CONFIGURATION_IGNORE_PARENT_FIELD) {						var fieldName = param.value;						if(superFields[i].name === fieldName) {							ignore = true;							break;						}					}				}				if(!ignore) {					var newField = angular.copy(superFields[i]);					newField.owner = entity.name;					superFieldsCopy.push(newField);				}			}			= fields.concat(superFieldsCopy);		}		return fields;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityId	 * @description	 * Returns the ID of an entity, or 'new' if the entity is not provided or the id does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the id from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {*} The id of the entity	 */	getEntityId: function(metadata, entity, fieldName) {		var id = constants.NEW_ENTITY_ID;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			if(field.isId) {				. However an id should NEVER be indirect.				if (entity) { 					id = entity[field.name];				}				if(fieldName) {					id = field.name;				}				break;			}		}		return id;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityCode	 * @description	 * Returns the code of an entity, or 'new' if the entity is not provided or the code does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the code from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {*} The code of the entity	 */	getEntityCode: function(metadata, entity, fieldName) {		var code = null;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			if (field.isKey && !field.related) {				. However an id should NEVER be indirect.				if (entity) {					code = entity[field.name];				}				if (fieldName) {					code = field.name;				}				break;			}		}		return code;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityLabel	 * @description	 * Returns the label of an entity, or 'new' if the entity is not provided or the label does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the label from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {String} The label of the entity	 */	getEntityLabel: function(metadata, entity, fieldName) {		var label = null;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			(field.isLabel && !field.related) {				. However an id should NEVER be indirect.				if(entity) {					label = entity[field.name];				}				if(fieldName) {					label = field.name;				}				break;			}		}		return label;	},		/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name downloadFile	 * @description	 * Download the file that we get from a service	 * @param {Object} href Data of the file. Pattern: "data:" + resp.mimetype + ";base64, " + resp.value	 * @param {Object} name Name of the file	 */	downloadFile: function(href, name){	 		var a = document.createElement('a');	 	    a.href = href;	 	    a.download = name;	 	    a.click();	},		/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityCategories	 * @description	 * Returns all Categories for an entity 	 * @param {Object} entity Entity metadata information	 * @returns {Array} All Categories for that entity type	 */	getEntityCategories: function(entity, level) {		var categories = [];				var fields = util.getEntityFields(entity);		for(var i = 0; i < fields.length; i++){			(level == 1) {				if(fields[i].categories.length) {					if(categories.indexOf(fields[i].categories[0]) == -1){						.push(fields[i].categories[0]);					}					}							}					}		return categories;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityFieldSets	 * @description	 * Returns all Field sets for an entity 	 * @param {Object} entity Entity metadata information	 * @returns {Array} All Field sets for that entity type	 */	getEntityFieldSets: function(entity) {		var fieldsets = [];		= fieldsets.concat(entity.fieldSets);		?		(entity.superClass) {			= util.getMetadata(entity.superClass);			= fieldsets.concat(superClass.fieldSets);		}		return fieldsets;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name convertUtf8ToWindow1250	 * @description	 * Convert an UTF8 string to window-1250 page code 	 * @param {string} utf8Str UTF-8 string	 * @returns {string} string convert o window-1250	 */	convertUtf8ToWindow1250: function(utf8Str) {		var utf8 = [				'%0A', 		'%E2%82%AC', /* € */'%20', 	'%21', /* ! */		'%22', /* " */		'%23', /* # */		'%24', /* $ */			'%25', /* % */		'%26', /* & */		'%26', 		'%27', 		'%28', /* ( */		'%29', /* ) */		'%2C', /* , */		'%3A', /* : */			'%3B', /* ; */		'%3D', /* = */		'%3F', /* ? */		'%5B', /* [ */		'%5C', /* \ */		'%5D', /* ] */		'%5E', /* ^ */			'%60', /* ` */		'%7B', /* { */		'%7C', /* | */		'%7D', /* } */		'%7E', /* ~ */		'%C2%A0',  '%C2%A3', /* £ */	'%C2%A4', /* ¤ */			'%C2%A8', /* ¨ */	'%C2%A7', /* § */	'%C2%A9', /* @ */	'%C2%B0', /* ° */	'%C2%B5', /* µ */	'%C3%A0', /* à */	'%C3%A1', /* á */				'%C3%A2', /* â */	'%C3%A3', /* ã */	'%C3%A4', /* ä */	'%C3%A6', /* æ */	'%C3%A7', /* ç */	'%C3%A8', /* è */	'%C3%A9', /* é */			'%C3%AA', /* ê */	'%C3%AB', /* ë */	'%C3%AE', /* î */	'%C3%AF', /* ï */	'%C3%B4', /* ô */	'%C3%B5', /* õ */	'%C3%B6', /* ö */			'%C3%B9', /* ù */	'%C3%BB', /* û */	'%C3%BC', /* ü */ 	'%C3%80', /* À */ 	'%C3%81', /* Á */ 	'%C3%82', /* Â */ 	'%C3%83', /* Ã */ 				'%C3%84', /* Ä */	'%C3%85', /* Å */	'%C3%86', /* Æ */	'%C3%87', /* Ç */	'%C3%88', /* È */	'%C3%89', /* É */ 	'%C3%8A', /* Ê */			'%C3%8B', /* Ë */	'%C3%8C', /* Ì */	'%C3%8D', /* Í */	'%C3%8E', /* Î */	'%C3%8F', /* Ï */	'%C3%91', /* Ñ */			'%C3%92', /* Ò */	'%C3%93', /* Ó */	'%C3%94', /* Ô */	'%C3%95', /* Õ */	'%C3%96', /* Ö */	'%C3%98', /* Ø */			'%C3%99', /* Ù */	'%C3%9A', /* Ú */	'%C3%9B', /* Û */	'%C3%9C', /* Ü */	'%C3%9D'  /* Ý */		];		var latin1 = [				'\n', 		'\x80', /* € */		' ', 	'!', /* ! */		'"', /* " */		'#', /* # */		'$', /* $ */			'%', /* % */		'&', /* & */		'\'', 		'\'', 		'(', /* ( */		')', /* ) */		',', /* , */		':', /* : */			';', /* ; */		'=', /* = */		'?', /* ? */		'[', /* [ */		'\\', /* \ */		']', /* ] */		'^', /* ^ */			'`', /* ` */		'{', /* { */		'|', /* | */		'}', /* } */		'~', /* ~ */		' ', 		'\xA3', /* £ */		'\xA4', /* ¤ */			'\xA8', /* ¨ */		'\xA7', /* § */		'@', /* @ */		'\xB0', /* ° */		'\xB5', /* µ */		'\xE0', /* à */		'\xE1', /* á */			'\xE2', /* â */		'\xE3', /* ã */		'\xE4', /* ä */		'\xE6', /* æ */		'\xE7', /* ç */		'\xE8', /* è */		'\xE9', /* é */			'\xEA', /* ê */		'\xEB', /* ë */		'\xEE', /* î */		'\xEF', /* ï */		'\xF4', /* ô */		'\xF5', /* õ */		'\xF6', /* ö */			'\xF9', /* ù */		'\xFB', /* û */		'\xFC', /* ü */ 	'\xC0', /* À */ 	'\xC1', /* Á */ 	'\xC2', /* Â */ 	'\xC3', /* Ã */ 				'\xC4', /* Ä */		'\xC5', /* Å */		'\xC6', /* Æ */		'\xC7', /* Ç */		'\xC8', /* È */		'\xC9', /* É */ 	'\xCA', /* Ê */			'\xCB', /* Ë */		'\xCC', /* Ì */		'\xCD', /* Í */		'\xCE', /* Î */		'\xCF', /* Ï */		'\xD1', /* Ñ */			'\xD2', /* Ò */		'\xD3', /* Ó */		'\xD4', /* Ô */		'\xD5', /* Õ */		'\xD6', /* Ö */		'\xD8', /* Ø */			'\xD9', /* Ù */		'\xDA', /* Ú */		'\xDB', /* Û */		'\xDC', /* Ü */		'\xDD' /* Ý */		];						for (var i = 0; i < utf8.length; i ++) {		  var value = utf8[i];		  var re = new RegExp(value, 'g');		  utf8Str = utf8Str.replace(re, latin1[i]);		  		}				return utf8Str;	},		removeDiacritics : function (str) {		  var defaultDiacriticsRemovalMap = [		    {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},		    {'base':'AA','letters':/[\uA732]/g},		    {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},		    {'base':'AO','letters':/[\uA734]/g},		    {'base':'AU','letters':/[\uA736]/g},		    {'base':'AV','letters':/[\uA738\uA73A]/g},		    {'base':'AY','letters':/[\uA73C]/g},		    {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},		    {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},		    {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},		    {'base':'DZ','letters':/[\u01F1\u01C4]/g},		    {'base':'Dz','letters':/[\u01F2\u01C5]/g},		    {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},		    {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},		    {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},		    {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},		    {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},		    {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},		    {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},		    {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},		    {'base':'LJ','letters':/[\u01C7]/g},		    {'base':'Lj','letters':/[\u01C8]/g},		    {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},		    {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},		    {'base':'NJ','letters':/[\u01CA]/g},		    {'base':'Nj','letters':/[\u01CB]/g},		    {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},		    {'base':'OI','letters':/[\u01A2]/g},		    {'base':'OO','letters':/[\uA74E]/g},		    {'base':'OU','letters':/[\u0222]/g},		    {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},		    {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},		    {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},		    {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},		    {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},		    {'base':'TZ','letters':/[\uA728]/g},		    {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},		    {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},		    {'base':'VY','letters':/[\uA760]/g},		    {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},		    {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},		    {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},		    {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},		    {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},		    {'base':'aa','letters':/[\uA733]/g},		    {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},		    {'base':'ao','letters':/[\uA735]/g},		    {'base':'au','letters':/[\uA737]/g},		    {'base':'av','letters':/[\uA739\uA73B]/g},		    {'base':'ay','letters':/[\uA73D]/g},		    {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},		    {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},		    {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},		    {'base':'dz','letters':/[\u01F3\u01C6]/g},		    {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},		    {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},		    {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},		    {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},		    {'base':'hv','letters':/[\u0195]/g},		    {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},		    {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},		    {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},		    {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},		    {'base':'lj','letters':/[\u01C9]/g},		    {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},		    {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},		    {'base':'nj','letters':/[\u01CC]/g},		    {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},		    {'base':'oi','letters':/[\u01A3]/g},		    {'base':'ou','letters':/[\u0223]/g},		    {'base':'oo','letters':/[\uA74F]/g},		    {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},		    {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},		    {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},		    {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},		    {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},		    {'base':'tz','letters':/[\uA729]/g},		    {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},		    {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},		    {'base':'vy','letters':/[\uA761]/g},		    {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},		    {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},		    {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},		    {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}		  ];		  if(str!=null){			  for(var i=0; i<defaultDiacriticsRemovalMap.length; i++) {			    str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);			  }		  }		  return str;	},		init: function(metadataObject) {		util.metadataObject = metadataObject;	}};'use strict';/** * @ngdoc service * @name Konga Reference.actionManager * @description * # actionManager * Provider in the Konga Reference. */angular.module('konga')  .provider('actionManager', function () {    var actions = {            'save-ok': {        type: constants.ACTION_TYPE_FUNCTION,        params: {          fn: function(params) {              var entityId = params.id;              var $rootScope = params.dependencyInjector.get('$rootScope');              var $scope = params.self;              var data = params.data;                          (entityId === constants.NEW_ENTITY_ID) {                  $rootScope.operations.addAlert(constants.ALERT_TYPE_SUCCESS, 'message.action-confirmation.create.success');              } else {                  $rootScope.operations.addAlert(constants.ALERT_TYPE_SUCCESS, 'message.action-confirmation.update.success');              }                            $rootScope.pageData.original = angular.copy(data);              $scope.entity = $rootScope.pageData.entity = data;              $scope.changes = [];              $scope.operations.updateChanges();                $rootScope.operations.closeTabById($rootScope.pageData.pageId);          }        }      },      'save-ko': {        type: constants.ACTION_TYPE_FUNCTION,        params: {          fn: function(params) {            var exceptionManager = params.dependencyInjector.get('exceptionManager');            exceptionManager.analyzeException(params);                       }        }       },            'delete-ko': {        type: constants.ACTION_TYPE_FUNCTION,        params: {          fn: function(params) {            var exceptionManager = params.dependencyInjector.get('exceptionManager');            exceptionManager.analyzeException(params);                                 }        }       },      'search-entity': {        type: constants.ACTION_TYPE_TAB,        params: {          id : constants.ENTITY_ID_PREFFIX + '{entityType}' + constants.SEARCH_SUFFIX,          title : 'message.tabs.entity.search',          href : '/entity/{entityType}/search/',          closable : true,          hasChanges : false,          entityType: '{entityType}',          type: constants.TAB_TYPE_SEARCH        }      },      'update-entity': {        type: constants.ACTION_TYPE_TAB,        params: {          id : constants.ENTITY_ID_PREFFIX + '{entityType}' + constants.STRING_SEPARATOR + '{id}',          title : 'message.tabs.entity.search',          href : '/entity/{entityType}/{id}/',          closable : true,          hasChanges : false,          entityType: '{entityType}',          type: constants.TAB_TYPE_UPDATE        }      },      'action-form-invalid': {        type: constants.ACTION_TYPE_NOTIFY,        params: {          type: 'error',          title: 'message.action.form-invalid.title',          message: 'message.action.form-invalid.message'        }      },      'action-forbidden': {        type: constants.ACTION_TYPE_NOTIFY,        params: {          type: 'error',          title: 'message.action.forbidden.title',          message: 'message.action.forbidden.message'        }      },      'action-under-development': {        type: constants.ACTION_TYPE_NOTIFY,        params: {          type: 'notify',          title: 'message.action.under-development.title',          message: 'message.action.under-development.message'        }      }    };    ($rootScope, Session, configurationManager, $injector) {      this.dispatch = function(action, parameters) {        if(typeof action === 'string') {          action = { name: action };        }        var actionDefinitionOriginal = configurationManager.getCustomActions()[action.name];        if(!actionDefinitionOriginal) {          actionDefinitionOriginal = actions[action.name];        }        if(!actionDefinitionOriginal) {          }        var actionDefinition = angular.copy(actionDefinitionOriginal);                .params.parameters = parameters;        .params.parameters.actionManager = this;        .params.parameters.dependencyInjector = $injector;                var authorized = true;        (actionDefinition.restrict) {          = userData.roles;          , as all come in array-form (as a buffer)          var userRoles = [];          for(var i = 0; i < rolesNative.length; i++) {            var role = "";            var f = -1;            while(rolesNative[i][++f] !== undefined) {              role += rolesNative[i][f];            }            userRoles.push(role);          }          authorized = false;          for(var i = 0; i < actionDefinition.restrict.length; i++) {            var role = actionDefinition.restrict[i];            if(userRoles.indexOf(role) !== -1) {              !              authorized = true;              ;            }          }        }                if(!authorized) {          actionDefinition = actions['action-forbidden'];        }        switch(actionDefinition.type) {        case constants.ACTION_TYPE_MODAL:          $rootScope.operations.openModal(actionDefinition.params);          break;        case constants.ACTION_TYPE_NOTIFY:          $rootScope.operations.notify(actionDefinition.params.title, actionDefinition.params.message, actionDefinition.params.type, actionDefinition.params);          break;        case constants.ACTION_TYPE_CONFIRM:          $rootScope.operations.confirm(actionDefinition.params.title, actionDefinition.params.message, actionDefinition.params.okHandler, actionDefinition.params.koHandler, actionDefinition.params);          break;        case constants.ACTION_TYPE_TAB:          (var encodedParam in parameters) {            for(var actionParam in actionDefinition.params) {              if(typeof actionDefinition.params[actionParam] === 'string') {                actionDefinition.params[actionParam] = actionDefinition.params[actionParam].split('{' + encodedParam + '}').join(parameters[encodedParam]);              }              }          }          $rootScope.operations.addTab(actionDefinition.params);          break;        case constants.ACTION_TYPE_FUNCTION:          var params = actionDefinition.params.parameters;          var functionToCall = actionDefinition.params['fn'];          functionToCall.call(params.self, params);          break;        }      };    }    .setSalutation = function (s) {      salutation = s;    };    .$get = function ($injector) {      var rScope = $injector.get('$rootScope');      var session = $injector.get('userData');      var configurationManager = $injector.get('configurationManager');      return new Greeter(rScope, session, configurationManager, $injector);    };  });'use strict';/* TODO @deprecate *//** * @ngdoc service * @name Konga Reference.Api * @description * This factory connects the source to a factory, depending on the type of entity that's being looked for.  */angular.module('konga')  .factory('api', function (standardApi) {    {      getLocalEndpoint : function (source) {        var endpoint = null;        switch(source) {        default:            endpoint = standardApi;        }                return endpoint;      }    };  });/** * @ngdoc method * @name get * @methodOf Konga Reference.Api * @description * Returns an entity identified with the unique id provided * @param {*} id The unique id for the entity * @param {Function} [success=undefined] Function to call if the operation successes. * @param {Function} [error=undefined] Function to call if the operation fails. * @returns {Object} The `$resource` with that entity */ /** * @ngdoc method * @name search * @methodOf Konga Reference.Api * @description * Search for entities filtering with the input query * @param {Object} query Query to filter with (sent via `GET` parameters, so they must be serializable, and serialized). * @param {Number} offset Defines where to place the starting cursor. * @param {Number} limit Defines how many results to get. * @param {Function} [success=undefined] Function to call if the operation successes. * @param {Function} [error=undefined] Function to call if the operation fails. * @returns {Array} Array containing all results. Each result is a `$resource` that contains an entity which matched the search criteria. */'use strict';/** * @ngdoc service * @name Konga Reference.Common * @description * It contains common tools and methods for storing data, managing tab information, saving page parameters, etcetera. */angular.module('konga')  .provider('common', function () {    = {};    var pageData = {};    /**     * @ngdoc method     * @name store     * @methodOf Konga Reference.Common     * @description     * Stores an object with a given key as identifier     * @param {String} key the key for the storage     * @param {Object} value The value to store     */        /**     * @ngdoc method     * @name read     * @methodOf Konga Reference.Common     * @description     * Reads the object identified with the given key     * @param {String} key the key for the storage     * @returns {Object} The value from the storage.     */        /**     * @ngdoc method     * @name delete     * @methodOf Konga Reference.Common     * @description     * Deletes the object identified with the given key     * @param {String} key the key for the storage     */    function Storer() {      this.store = function (key, value) {        storage[key] = value;      };      this.read = function(key) {        return storage[key];      };      this.deleteKey = function(key) {        delete storage[key];      };      /**       * @ngdoc method       * @name getMetadata       * @methodOf Konga Reference.Common       * @description       * Returns the metadata of the given type, from an also given array of metadata information.       * @param {Array} metadata The array of metadata information       * @param {String} type The type of entity that's needed       * @returns {Object} The metadata for that entity type       */      this.getMetadata = function(type) {        var metadata = this.read('metadata');        for(var i = 0; i < metadata.entities.length; i++) {          var c_metadata = metadata.entities[i];          if(c_metadata.name === type) {            return c_metadata;          }        }        return null;      };      /**       * @ngdoc method       * @name getPageData       * @methodOf Konga Reference.Common       * @description       * Returns the page data of the tab with an id given. This page data is used to preserve data upon navigation.       * @param {String} id The identifier of the tab.       * @returns {Object} The page data information for that tab.       */      this.getPageData = function(id) {        var ret = pageData[id];        , we initialize        if(!ret) ret = pageData[id] = { pageId: id, init: false };                return ret;      };      /**       * @ngdoc method       * @name deletePageData       * @methodOf Konga Reference.Common       * @description Removes the page data of a tab, identified with an id given. Used when the tab closes mostly.       * @param {String} id The identifier of the tab.       */      this.deletePageData = function(id) {        var ret = pageData[id];        if(ret) {          delete pageData[id];        }      };    }    .$get = function () {      return new Storer();    };  });'use strict';/** * @ngdoc service * @name Konga Reference.configurationManager * @description * # configurationManager * Provider in the Konga Reference. */angular.module('konga')  .provider('configurationManager', function () {    ($rootScope, $filter) {      /**       * Returns a configuration param following the configuraion priority hierarchy       * @param param {String} The name of the parameter to read       * @param [Object] {Object} The object to read the configuration from       * @param [mode] {String} The form mode       * @param [order] {String} The order of the priority (SPLIT BY '_')       */      this.getConf = function (param, source, mode, order) {        (source) {          var configuration = source.configuration;          if(mode) {            = $filter('filter')(source.configuration, {  })          }        }        = $rootScope.metadata.configuration;        return $filter('filter')(configuration, { key: param });      };      this.getCustomActions = function() {        (read the end of this file)        return customActions;      };    }    .$get = function ($injector) {      var rScope = $injector.get('$rootScope');      var filter = $injector.get('$filter');      return new ConfigurationManager(rScope, filter);    };  });'use strict';/** * @ngdoc service * @name Konga Reference.exceptionManager * @description * # exceptionManager * Service in the Konga Reference. */angular.module('konga')  .service('exceptionManager', function exceptionManager() {	  this.analyzeException = function(params){		  = params.id;	  	  var $rootScope = params.dependencyInjector.get('$rootScope');	  	  var $filter = params.dependencyInjector.get('$filter');	  		  var $scope = params.self;	      var error = params.error;	      var exceptionCode;	      	      if (error.data.length)	    	  exceptionCode = error.data && error.data.length ? error.data[0].exceptionCode : 'GENERIC_TECHNICAL_ERROR';	      else 	    	  exceptionCode = error.data? error.data.exceptionCode : 'GENERIC_TECHNICAL_ERROR';	      	      var involvedFields = "";	      	      (entityId !== constants.NEW_ENTITY_ID) {     		  (error.data.exceptionCode == 'DATA_INTEGRITY_VIOLATION_SAVE_OR_UPDATE') {			  = 'DATA_INTEGRITY_VIOLATION_SAVE_OR_UPDATE';	    	  }    		  if(error.data.exceptionCode == 'UNIQUE_CONSTRAINT_VIOLATION') {    			      			  var fieldArray = $scope.entityMetadata.fields;    			      			  if($scope.entityMetadata.superClass){    				  for(var i = 0; i<$scope.metadata.entities.length; i++){    					  if($scope.metadata.entities[i].name == $scope.entityMetadata.superClass){    						      						  fieldArray = fieldArray.concat($scope.metadata.entities[i].fields);    						  break;    					  }    				  }    			  }    			      			  var usedFields = [];    			  exceptionCode = "UNIQUE_CONSTRAINT_VIOLATION";    			  for(var ind = 0; ind <error.data.fieldNames.length; ind++){	    			  for(var i = 0; i<fieldArray.length; i++){	    				  if(error.data.fieldNames[ind] == fieldArray[i]["name"] && usedFields.indexOf(fieldArray[i]["name"]) < 0){	    					  usedFields.push(fieldArray[i]["name"]);	    					  if(ind > 0){	    						  involvedFields += ", ";	    					  }	    					  if($scope.entityMetadata.superClass){	    						  	    						  var owner = $filter('translate')(fieldArray[i].owner ? $scope.entityMetadata.label : "");	    						  	    						  involvedFields += $filter('translate')(fieldArray[i].label, {label:owner});	    					  }	    					  else{	    						  involvedFields += $filter('translate')(fieldArray[i].label);	    					  }	    					  	    				  }	    			  }    			  }    			      			  involvedFields = "("+involvedFields+")";    			      		  }	      }	      $rootScope.operations.addAlert(constants.ALERT_TYPE_ERROR, exceptionCode, {fields:involvedFields});	  };  });'use strict';/** * @ngdoc service * @name Konga Reference.fieldMapper * @description * This service helps managing the connection between the entities and their forms within the UI.  * When a field is changed in the form, its value is stored into the entity.  */angular.module('konga')  .service('fieldMapper', ['api','common','scaffold', '$filter', function fieldMapper(api, common, scaffold, $filter) {    this.mapField = function(fieldName, edsType, entity) {    	};    this.unmapField = function(fieldMetadata, edsType, entity, value, parentField, parentEntity) {		try {			= fieldMetadata.name;			= fieldMetadata.type.type;			, and it's the key, the type is text			if(fieldType === constants.FIELD_COMPLEX && fieldMetadata.isKey) {				fieldType = constants.FIELD_TEXT;			}			(if needed)			var escapedValue = null;			= {};			switch(fieldType) {			case constants.FIELD_TEXT:				escapedValue = value.text;				break;			case constants.FIELD_BOOLEAN:				escapedValue = value.text; -of-the-box :)				break;			case constants.FIELD_NUMBER:				= parseFloat((value.text+"").split(',').join('.'));				break;			case constants.FIELD_COMPLEX:				= value.ids;				escapedValue = value.entity;				(var i = 0; i < ids.length; i++) {				= value.ids[i];				= fieldMetadata.type.complexType;				= api.getLocalEndpoint(entityType);				.push(localEndpoint.get({id: entityId}));				}				(fieldMetadata.multiplicity === constants.MULTIPLICITY_ONE) {				= escapedValue[0];				}				break;			case constants.FIELD_FILE:				escapedValue = value.files;				break;:				escapedValue = value.text;				break;			}			(parentField && (parentField.type.type === constants.FIELD_COMPLEX)){								= common.getMetadata(parentField.type.complexType);				var entityParent = null;				= parentField.multiplicity;				if(parentMultiplicity === constants.MULTIPLICITY_ONE) {					(SM)					if(parentEntity[fieldName] !== undefined) {						parentEntity[fieldName] = escapedValue;					}				}				else {					var parentFieldName = parentField.name;					parentEntity[parentFieldName].splice(0, entity.length);									for (var i = 0; i < escapedValue.length; i++) {						= scaffold.newEntity(entityMetadata);											, inicialize the object						if (!entityParent[fieldName])							entityParent[fieldName] = {};												[fieldName] = escapedValue[i];												(entityParent != null)							parentEntity[parentFieldName].push(entityParent);					}					}											} else {				entity[fieldName] = escapedValue;			}			= entity;			= 0;			(i = 0; i < pathSteps.length-1; i++) {			= current[pathSteps[i]];			}			[pathSteps[i]] = escapedValue;			} catch(e) {			value = null;			escapedValue = null;			}		if(value) {			value.escaped = escapedValue;			value.extra = {};		}		return value;    };  }]);'use strict';/** * @ngdoc service * @name Konga Reference.permissionManager * @description * # permissionManager * Provider in the Konga Reference. */angular.module('konga')  .provider('permissionManager', function () {    (Session) {      this.isAllowed = function (permission) {      	= userData.roles;		, as all come in array-form (as a buffer)		var userRoles = [];		for(var i = 0; i < rolesNative.length; i++) {			var role = "";			var f = -1;			while(rolesNative[i][++f] !== undefined) {			  role += rolesNative[i][f];			}			userRoles.push(role);		}      	      	if(!permission.length) {      		return true;      	}        return userRoles.indexOf(permission) !== -1;      };    }    .$get = function ($injector) {      var session = $injector.get('userData');      return new Greeter(session);    };  });'use strict';/** * @ngdoc service * @name Konga Reference.Scaffold * @description * # scaffold * Service in the Konga Reference. */angular.module('konga')  .service('scaffold', ['$filter', 'common',      function scaffold($filter, common) {        function generate(fields, entity, search) {            (var i = 0; i < fields.length; i++) {                = fields[i];                (FIXME)                (search) {                    = !search ? field.multiplicity : field.searchConf.multiplicity;                    = field.type.type;                    = field.defaults;                    var castValue = null;                    = 'null' => null                    = MANY => value = new Array;                    != text => cast defaultValue                    , we initialize as null                    if(defaultValue == 'null' || field.isId) {                        castValue = null;                    }                    else if(multiplicity == constants.MULTIPLICITY_MANY && !(search && field.fieldType.search === constants.FIELD_COMPLEX)) {                        castValue = [];                    }                    else if(type !== constants.FIELD_TEXT) {                        switch(type) {                        case constants.FIELD_BOOLEAN:                            castValue = defaultValue === 'true';                            break;                        case constants.FIELD_COMPLEX:                            , valorized afterwards                            castValue = null;                            (and for updation too)                            if(search && field.fieldType.search === constants.FIELD_COMPLEX) {                                var innerFields = field.searchable.fields;                                var apiNames = field.apiName;                                if(innerFields.length) {                                    castValue = {};                                    if(apiNames && apiNames.length == innerFields.length) {                                        innerFields = apiNames;                                    }                                    for(var f = 0; f < innerFields.length; f++) {                                        var innerFieldName = innerFields[f];                                        castValue[$filter('fieldApiName')(innerFieldName)] = null;                                                                            }                                }                            }                            break;                        case constants.FIELD_DATE:                            if(search) {                                castValue = {                                    startDate: 0,                                    endDate: 0,                                    comparator: constants.DATE_COMPARATOR_EQUALS                                };                            }                            else {                                = defaultValue;                                if(defaultValue == constants.DATE_DEFAULT_NOW) {                                    castValue = new Date().getTime();                                }                                else {                                    :)                                    castValue = null;                                }                            }                            break;                        case constants.FIELD_NUMBER:                            castValue = defaultValue ? parseInt(defaultValue) : defaultValue;                            break;                        case constants.FIELD_STRING:                        	if(typeof defaultValue !== 'undefined') {                        		castValue = defaultValue;                        	}                        	break;                        }                    }                    else {                        castValue = defaultValue;                    }                    entity[field.name] = castValue;               }                                  , named with the real field name, and initialized as null                  (field.isKey) {                [field.name] = null;                }            }        }        this.newEntity = function(metadata, resource) {        	= null;        	        	if (resource === undefined)         		entity = {};        	else        		entity = new resource();         	        	= util.getEntityFields(metadata);        	generate(fields, entity);        	return entity;        };        this.newQuery = function(metadata) {            = {};            (only the one for searching)            var entityFields = util.getEntityFields(metadata);            var fields = $filter('searchParams')(entityFields, metadata);            generate(fields, query, true);            :D            !!!!!!!!!!!!!!!!!            if(query.idCtrOperat !== undefined) {                var ctrOperat = common.read('ctr-operat');                var idCtrOperat = ctrOperat.id;                query.idCtrOperat = idCtrOperat;            }            return query;        };      }]);'use strict';/** * @ngdoc service * @name Konga Reference.standardApi * @description * # standardApi * Factory in the Konga Reference. */angular.module('konga')  .factory('standardApi', ['$resource', '$routeParams', '$upload', 'configurationManager', 'kongaConfig', function ($resource, $routeParams, $upload, configurationManager, kongaConfig) {        (data, parent, paramName) {    (var param in data) {    (param === '@id') {    ;    }    = data[param];    (!current) {    ;    }    (typeof current === 'object') {    (current.length) {    (var i = 0; i < current.length; i++) {    (current[i], null, null);    }    ;    }    (current.reason && current.reason === constants.JSON_IDENTITY_INFO) {    = util.getMetadata(current.source);    [param] = service.get({ path: metadata.apiPath, id: current.id });    }    {    (current, data, paramName);    }    }    }    }    ;    var service = $resource(kongaConfig.apiEndpoint + '/:path/:id/:operation/:opId', {}, {      get: {        method: 'GET',        params: {          id: '@id'        },        transformResponse: function(resp) {          var data = angular.fromJson(resp);          return data;        }      },      search: {        method: 'GET',        params: {          id: null,          path: '@path',          opId: null        },        isArray: true,        transformResponse: function (data) {          var jsonData = angular.fromJson(data);          if(jsonData.data) {            $routeParams.count = jsonData.count;            return jsonData.data;           }          return jsonData;        }      },            update: {        method: 'PUT',        params: {          path: '@path',          id: '@id'        }      },      save: {        method: 'PUT',        params: {          path: '@path',          id: '@id'        }      },      create: {        method: 'POST',        params: {          path: '@path',          id: null        }      },      deleteObj: {        method: 'DELETE',        params: {          path: '@path',          id: '@id'        }      },      upload: function (path, data) {        var upload = $upload.upload({            url: path,             data: {myObj: data},            file: data.file[0]          }).progress(function(evt) {            console.log('progress: ' + parseInt(100.0 * evt.loaded / evt.total) + '% file :'+ evt.config.file.name);          }).success(function(data, status, headers, config) {            .log('file ' + config.file.name + 'is uploaded successfully. Response: ' + data);          });      }    });  return service;      }]);'use strict';/** * @ngdoc service * @name Konga Reference.tokenHandler * @description * # tokenHandler * Factory in the Konga Reference. */angular.module('konga')  .factory('TokenHandler', function() {  var tokenHandler = {};  var token = "none";  tokenHandler.set = function( newToken ) {    token = newToken;  };  tokenHandler.get = function() {    return token;  };  .wrapActions = function( resource, actions ) {    = resource;    for (var i=0; i < actions.length; i++) {      tokenWrapper( wrappedResource, actions[i] );    }    ;  };  = function( resource, action ) {    ['_' + action]  = resource[action];    [action] = function( data, success, error){      return resource['_' + action](        angular.extend({}, data || {}, {access_token: tokenHandler.get()}),        success,        error      );    };  };  return tokenHandler;});'use strict';/** * @ngdoc object * @name lib.konga.util * @description *  * Provides a set of common utils used all across the application. * */var util = {	metadataObject : null,	getConfiguration: function() {		return util.metadataObject.configuration;	},	getMetadata: function(name) {		for(var i = 0; i < util.metadataObject.entities.length; i++) {			var current = util.metadataObject.entities[i];			if(current.name === name) {				return current;			}		}		return null;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityFields	 * @description	 * Returns all fields for an entity type following all hierarchy upwards.	 * @param {Object} entity Entity metadata information	 * @returns {Array} All fields for that entity type	 */	getEntityFields: function(entity) {		= angular.copy(entity.fields);		?		(entity.superClass) {			var superClass = util.getMetadata(entity.superClass);			= entity.configuration;			var superFields = superClass.fields;			var superFieldsCopy = [];			for(var i = 0; i < superFields.length; i++) {				?				var ignore = false;				for(var f = 0; f < entityConfiguration.length; f++) {					var param = entityConfiguration[f];					if(param.key === constants.CONFIGURATION_IGNORE_PARENT_FIELD) {						var fieldName = param.value;						if(superFields[i].name === fieldName) {							ignore = true;							break;						}					}				}				if(!ignore) {					var newField = angular.copy(superFields[i]);					newField.owner = entity.name;					superFieldsCopy.push(newField);				}			}			= fields.concat(superFieldsCopy);		}		return fields;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityId	 * @description	 * Returns the ID of an entity, or 'new' if the entity is not provided or the id does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the id from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {*} The id of the entity	 */	getEntityId: function(metadata, entity, fieldName) {		var id = constants.NEW_ENTITY_ID;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			if(field.isId) {				. However an id should NEVER be indirect.				if (entity) { 					id = entity[field.name];				}				if(fieldName) {					id = field.name;				}				break;			}		}		return id;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityCode	 * @description	 * Returns the code of an entity, or 'new' if the entity is not provided or the code does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the code from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {*} The code of the entity	 */	getEntityCode: function(metadata, entity, fieldName) {		var code = null;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			if (field.isKey && !field.related) {				. However an id should NEVER be indirect.				if (entity) {					code = entity[field.name];				}				if (fieldName) {					code = field.name;				}				break;			}		}		return code;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityLabel	 * @description	 * Returns the label of an entity, or 'new' if the entity is not provided or the label does not exist	 * @param {Object} metadata Entity metadata information	 * @param {Object} entity The entity to retrieve the label from	 * @param {Boolean} fieldName If true, returns only the name of the field	 * @returns {String} The label of the entity	 */	getEntityLabel: function(metadata, entity, fieldName) {		var label = null;		var fields = util.getEntityFields(metadata);		for(var i = 0; i < fields.length; i++) {			var field = fields[i];			?			(field.isLabel && !field.related) {				. However an id should NEVER be indirect.				if(entity) {					label = entity[field.name];				}				if(fieldName) {					label = field.name;				}				break;			}		}		return label;	},		/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name downloadFile	 * @description	 * Download the file that we get from a service	 * @param {Object} href Data of the file. Pattern: "data:" + resp.mimetype + ";base64, " + resp.value	 * @param {Object} name Name of the file	 */	downloadFile: function(href, name){	 		var a = document.createElement('a');	 	    a.href = href;	 	    a.download = name;	 	    a.click();	},		/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityCategories	 * @description	 * Returns all Categories for an entity 	 * @param {Object} entity Entity metadata information	 * @returns {Array} All Categories for that entity type	 */	getEntityCategories: function(entity, level) {		var categories = [];				var fields = util.getEntityFields(entity);		for(var i = 0; i < fields.length; i++){			(level == 1) {				if(fields[i].categories.length) {					if(categories.indexOf(fields[i].categories[0]) == -1){						.push(fields[i].categories[0]);					}					}							}					}		return categories;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name getEntityFieldSets	 * @description	 * Returns all Field sets for an entity 	 * @param {Object} entity Entity metadata information	 * @returns {Array} All Field sets for that entity type	 */	getEntityFieldSets: function(entity) {		var fieldsets = [];		= fieldsets.concat(entity.fieldSets);		?		(entity.superClass) {			= util.getMetadata(entity.superClass);			= fieldsets.concat(superClass.fieldSets);		}		return fieldsets;	},	/**	 * @ngdoc method	 * @methodOf lib.konga.util	 * @name convertUtf8ToWindow1250	 * @description	 * Convert an UTF8 string to window-1250 page code 	 * @param {string} utf8Str UTF-8 string	 * @returns {string} string convert o window-1250	 */	convertUtf8ToWindow1250: function(utf8Str) {		var utf8 = [				'%0A', 		'%E2%82%AC', /* € */'%20', 	'%21', /* ! */		'%22', /* " */		'%23', /* # */		'%24', /* $ */			'%25', /* % */		'%26', /* & */		'%26', 		'%27', 		'%28', /* ( */		'%29', /* ) */		'%2C', /* , */		'%3A', /* : */			'%3B', /* ; */		'%3D', /* = */		'%3F', /* ? */		'%5B', /* [ */		'%5C', /* \ */		'%5D', /* ] */		'%5E', /* ^ */			'%60', /* ` */		'%7B', /* { */		'%7C', /* | */		'%7D', /* } */		'%7E', /* ~ */		'%C2%A0',  '%C2%A3', /* £ */	'%C2%A4', /* ¤ */			'%C2%A8', /* ¨ */	'%C2%A7', /* § */	'%C2%A9', /* @ */	'%C2%B0', /* ° */	'%C2%B5', /* µ */	'%C3%A0', /* à */	'%C3%A1', /* á */				'%C3%A2', /* â */	'%C3%A3', /* ã */	'%C3%A4', /* ä */	'%C3%A6', /* æ */	'%C3%A7', /* ç */	'%C3%A8', /* è */	'%C3%A9', /* é */			'%C3%AA', /* ê */	'%C3%AB', /* ë */	'%C3%AE', /* î */	'%C3%AF', /* ï */	'%C3%B4', /* ô */	'%C3%B5', /* õ */	'%C3%B6', /* ö */			'%C3%B9', /* ù */	'%C3%BB', /* û */	'%C3%BC', /* ü */ 	'%C3%80', /* À */ 	'%C3%81', /* Á */ 	'%C3%82', /* Â */ 	'%C3%83', /* Ã */ 				'%C3%84', /* Ä */	'%C3%85', /* Å */	'%C3%86', /* Æ */	'%C3%87', /* Ç */	'%C3%88', /* È */	'%C3%89', /* É */ 	'%C3%8A', /* Ê */			'%C3%8B', /* Ë */	'%C3%8C', /* Ì */	'%C3%8D', /* Í */	'%C3%8E', /* Î */	'%C3%8F', /* Ï */	'%C3%91', /* Ñ */			'%C3%92', /* Ò */	'%C3%93', /* Ó */	'%C3%94', /* Ô */	'%C3%95', /* Õ */	'%C3%96', /* Ö */	'%C3%98', /* Ø */			'%C3%99', /* Ù */	'%C3%9A', /* Ú */	'%C3%9B', /* Û */	'%C3%9C', /* Ü */	'%C3%9D'  /* Ý */		];		var latin1 = [				'\n', 		'\x80', /* € */		' ', 	'!', /* ! */		'"', /* " */		'#', /* # */		'$', /* $ */			'%', /* % */		'&', /* & */		'\'', 		'\'', 		'(', /* ( */		')', /* ) */		',', /* , */		':', /* : */			';', /* ; */		'=', /* = */		'?', /* ? */		'[', /* [ */		'\\', /* \ */		']', /* ] */		'^', /* ^ */			'`', /* ` */		'{', /* { */		'|', /* | */		'}', /* } */		'~', /* ~ */		' ', 		'\xA3', /* £ */		'\xA4', /* ¤ */			'\xA8', /* ¨ */		'\xA7', /* § */		'@', /* @ */		'\xB0', /* ° */		'\xB5', /* µ */		'\xE0', /* à */		'\xE1', /* á */			'\xE2', /* â */		'\xE3', /* ã */		'\xE4', /* ä */		'\xE6', /* æ */		'\xE7', /* ç */		'\xE8', /* è */		'\xE9', /* é */			'\xEA', /* ê */		'\xEB', /* ë */		'\xEE', /* î */		'\xEF', /* ï */		'\xF4', /* ô */		'\xF5', /* õ */		'\xF6', /* ö */			'\xF9', /* ù */		'\xFB', /* û */		'\xFC', /* ü */ 	'\xC0', /* À */ 	'\xC1', /* Á */ 	'\xC2', /* Â */ 	'\xC3', /* Ã */ 				'\xC4', /* Ä */		'\xC5', /* Å */		'\xC6', /* Æ */		'\xC7', /* Ç */		'\xC8', /* È */		'\xC9', /* É */ 	'\xCA', /* Ê */			'\xCB', /* Ë */		'\xCC', /* Ì */		'\xCD', /* Í */		'\xCE', /* Î */		'\xCF', /* Ï */		'\xD1', /* Ñ */			'\xD2', /* Ò */		'\xD3', /* Ó */		'\xD4', /* Ô */		'\xD5', /* Õ */		'\xD6', /* Ö */		'\xD8', /* Ø */			'\xD9', /* Ù */		'\xDA', /* Ú */		'\xDB', /* Û */		'\xDC', /* Ü */		'\xDD' /* Ý */		];						for (var i = 0; i < utf8.length; i ++) {		  var value = utf8[i];		  var re = new RegExp(value, 'g');		  utf8Str = utf8Str.replace(re, latin1[i]);		  		}				return utf8Str;	},		removeDiacritics : function (str) {		  var defaultDiacriticsRemovalMap = [		    {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},		    {'base':'AA','letters':/[\uA732]/g},		    {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},		    {'base':'AO','letters':/[\uA734]/g},		    {'base':'AU','letters':/[\uA736]/g},		    {'base':'AV','letters':/[\uA738\uA73A]/g},		    {'base':'AY','letters':/[\uA73C]/g},		    {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},		    {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},		    {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},		    {'base':'DZ','letters':/[\u01F1\u01C4]/g},		    {'base':'Dz','letters':/[\u01F2\u01C5]/g},		    {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},		    {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},		    {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},		    {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},		    {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},		    {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},		    {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},		    {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},		    {'base':'LJ','letters':/[\u01C7]/g},		    {'base':'Lj','letters':/[\u01C8]/g},		    {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},		    {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},		    {'base':'NJ','letters':/[\u01CA]/g},		    {'base':'Nj','letters':/[\u01CB]/g},		    {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},		    {'base':'OI','letters':/[\u01A2]/g},		    {'base':'OO','letters':/[\uA74E]/g},		    {'base':'OU','letters':/[\u0222]/g},		    {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},		    {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},		    {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},		    {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},		    {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},		    {'base':'TZ','letters':/[\uA728]/g},		    {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},		    {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},		    {'base':'VY','letters':/[\uA760]/g},		    {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},		    {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},		    {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},		    {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},		    {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},		    {'base':'aa','letters':/[\uA733]/g},		    {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},		    {'base':'ao','letters':/[\uA735]/g},		    {'base':'au','letters':/[\uA737]/g},		    {'base':'av','letters':/[\uA739\uA73B]/g},		    {'base':'ay','letters':/[\uA73D]/g},		    {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},		    {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},		    {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},		    {'base':'dz','letters':/[\u01F3\u01C6]/g},		    {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},		    {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},		    {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},		    {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},		    {'base':'hv','letters':/[\u0195]/g},		    {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},		    {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},		    {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},		    {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},		    {'base':'lj','letters':/[\u01C9]/g},		    {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},		    {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},		    {'base':'nj','letters':/[\u01CC]/g},		    {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},		    {'base':'oi','letters':/[\u01A3]/g},		    {'base':'ou','letters':/[\u0223]/g},		    {'base':'oo','letters':/[\uA74F]/g},		    {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},		    {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},		    {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},		    {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},		    {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},		    {'base':'tz','letters':/[\uA729]/g},		    {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},		    {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},		    {'base':'vy','letters':/[\uA761]/g},		    {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},		    {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},		    {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},		    {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}		  ];		  if(str!=null){			  for(var i=0; i<defaultDiacriticsRemovalMap.length; i++) {			    str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);			  }		  }		  return str;	},		init: function(metadataObject) {		util.metadataObject = metadataObject;	}};angular.module('ui.konga').run(['$templateCache', function($templateCache) {  'use strict';  $templateCache.put('/konga/views/about.html',    "<p>This is the about view.</p>\n"  );  $templateCache.put('/konga/views/app-loader.html',    "Loading..."  );  $templateCache.put('/konga/views/calendar-input.html',    "<div ui-calendar=\"uiConfig.calendar\" ng-model=\"value.entity\"></div>"  );  $templateCache.put('/konga/views/cascade-result-table.html',    "<table class=\"table table-result\">\n" +    "\t<thead>\n" +    "\t\t<tr class=\"table-header\">\n" +    "\t\t\t<th ng-repeat=\"field in fields | allowed:'results'\" style=\"cursor: pointer;\">\n" +    "\t\t\t\t<table-header field=\"field\" sorting=\"sorting\" showSorting=\"showSorting\" mode=\"results\"></table-header>\n" +    "\t\t\t</th>\n" +    "\t\t</tr>\n" +    "\t</thead>\n" +    "\t<tbody>\n" +    "\t\t<tr\tng-class=\"{disabled : !showInRed(entity.statut), enabled : showInRed(entity.statut), editable: isEditable, resultClick: entityMetadata.resultClick.length}\" \n" +    "\t\t\tng-hide=\"chantierCtrl.emptyResult\" \n" +    "\t\t\tng-repeat=\"entity in entities\"\n" +    "\t\t\tng-click=\"resultClick(entityMetadata, entity, $index)\" ng-show=\"entities.length > 0\">\n" +    "\t\t\t<!-- <td>\n" +    "\t\t\t\t<a ng-click=\"updateChantier(result)\">\n" +    "\t\t\t\t\t<span>{{entity.codeEds}}</span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t</td> -->\n" +    "\t\t\t<td ng-repeat=\"field in fields | allowed:'results'\">\n" +    "\t\t\t\t<table-cell entity=\"entity\" field=\"field\"></table-cell>\n" +    "\t\t\t</td>\n" +    "\t\t</tr>\n" +    "\t\t<tr ng-hide=\"entities.length > 0\">\n" +    "\t\t\t<td colspan=\"{{ fields.length }}\" class=\"align-center\">{{'field.searchResults.noresults' | translate }}</td>\n" +    "\t\t</tr>\n" +    "\t</tbody>\n" +    "</table>"  );  $templateCache.put('/konga/views/cascade-search-pane.html',    "<raw-input \n" +    "\tproperty=\"field\"\n" +    "\tvertical=\"true\" \n" +    "\tsource-list=\"productCodes[field.name]\"\n" +    "\tng-repeat=\"field in fields | searchParams | orderBy:'priority.search' | allowed:'search'\"\n" +    "\tentity=\"query\" \n" +    "\tmetadata=\"entityMetadata\" \n" +    "\ton-update=\"operations.updateField\"\n" +    "\tmode=\"search\"\n" +    "\tindex=\"$index\">\n" +    "</raw-input>"  );  $templateCache.put('/konga/views/cascade-update.html',    "<div class=\"form-cascade\">\n" +    "\t<raw-input \n" +    "\t\tproperty=\"field\"\n" +    "\t\tvertical=\"true\"\n" +    "\t\tng-repeat=\"field in fields | updateParams:metadata | orderBy:'+priority.update' | allowed:'update'\" \n" +    "\t\tentity=\"entity\" \n" +    "\t\ton-update=\"onUpdate\"\n" +    "\t\ton-change=\"onChange\"\n" +    "\t\tmetadata=\"metadata\"\n" +    "\t\tmode=\"update\"\n" +    "\t\tcreating=\"creating\"\n" +    "\t\tindex=\"$index\">\n" +    "\t</raw-input>\n" +    "</div>"  );  $templateCache.put('/konga/views/categorized_cascade-result-table.html',    "<table class=\"table table-result\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n" +    "\t<thead>\n" +    "\t\t<tr class=\"table-header categories\">\n" +    "\t\t\t<th ng-repeat=\"category in categories\" style=\"cursor: pointer;\" colspan=\"{{ categoryFields[category.name].length }}\" ng-class=\"{ noHeader: !category.showHeader }\">\n" +    "\t\t\t\t<span ng-if=\"category.showHeader\">{{ category.name | translate }}</span>\n" +    "\t\t\t</th>\n" +    "\t\t</tr>\n" +    "\t\t<tr class=\"table-header\">\n" +    "\t\t\t<th ng-repeat=\"field in sortedFieldsByCategory\" style=\"cursor: pointer;\">\n" +    "\t\t\t\t<table-header field=\"field\" sorting=\"sorting\" showSorting=\"showSorting\" mode=\"results\"></table-header>\n" +    "\t\t\t</th>\n" +    "\t\t</tr>\n" +    "\t</thead>\n" +    "\t<tbody>\n" +    "\t\t<tr\tng-class=\"{disabled : !showInRed(entity.statut), enabled : showInRed(entity.statut), editable: entityMetadata.editable !== null, resultClick: entityMetadata.resultClick.length}\" \n" +    "\t\t\tng-hide=\"chantierCtrl.emptyResult\" \n" +    "\t\t\tng-repeat=\"entity in entities\"\n" +    "\t\t\tng-click=\"resultClick(entityMetadata, entity)\" ng-show=\"entities.length > 0\">\n" +    "\t\t\t<!-- <td>\n" +    "\t\t\t\t<a ng-click=\"updateChantier(result)\">\n" +    "\t\t\t\t\t<span>{{entity.codeEds}}</span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t</td> -->\n" +    "\t\t\t<td ng-repeat=\"field in sortedFieldsByCategory\">\n" +    "\t\t\t\t<table-cell entity=\"entity\" field=\"field\"></table-cell>\n" +    "\t\t\t</td>\n" +    "\t\t</tr>\n" +    "\t\t<tr ng-hide=\"entities.length > 0\">\n" +    "\t\t\t<td colspan=\"{{ fields.length }}\" class=\"align-center\">{{'field.searchResults.noresults' | translate }}</td>\n" +    "\t\t</tr>\n" +    "\t</tbody>\n" +    "</table>"  );  $templateCache.put('/konga/views/categorized_cascade-search-pane.html',    "<div ng-repeat=\"category in categories\" ng-if=\"(fields | searchParams | filter:{ categories: category }).length > 0\">\n" +    "\t<h4>{{ category | translate }}</h1>\n" +    "\t<raw-input \n" +    "\t\tproperty=\"field\"\n" +    "\t\tvertical=\"true\" \n" +    "\t\tsource-list=\"productCodes[field.name]\"\n" +    "\t\tng-repeat=\"field in fields | searchParams | filter:{ categories: category } | orderBy:'priority.search'\"\n" +    "\t\tentity=\"query\" \n" +    "\t\tmetadata=\"entityMetadata\" \n" +    "\t\ton-update=\"operations.updateField\"\n" +    "\t\tmode=\"search\"\n" +    "\t\tindex=\"$index\">\n" +    "\t</raw-input>\n" +    "</div>"  );  $templateCache.put('/konga/views/custom_tabbed-update.html',    "<vertical-tabs>\n" +    "\t<tab-content ng-repeat=\"fs in fieldsets\" title=\"{{fs.name | translate}}\" tab-id=\"fs.name\" is-show=\"true\">\n" +    "\t\t<div ng-include=\"getView(fs.configuration.view)\"></div>\n" +    "\t</tab-content>\n" +    "</vertical-tabs>"  );  $templateCache.put('/konga/views/entity-details.html',    "<p>This is the entity-details view.</p>\n"  );  $templateCache.put('/konga/views/entity-search.html',    "<div class=\"wall\" ng-init=\"init()\">\n" +    "\t<div class=\"entity-search\">\n" +    "\t\t<div class=\"col-md-3 search-panel\" ng-class=\"filterClass\">\n" +    "\t\t\t<search-pane \n" +    "\t\t\t\t\tentity-metadata=\"entityMetadata\"\n" +    "\t\t\t\t\tquery=\"query\" \n" +    "\t\t\t\t\tproduct-codes=\"productCodes\" \n" +    "\t\t\t\t\ton-submit=\"submit\">\n" +    "\t\t\t</search-pane>\n" +    "\t\t</div>\n" +    "\t\t<div ng-class=\"{ 'col-md-9': !!filterOpened, 'col-md-12': !filterOpened }\">\n" +    "\t\t\t<!-- ng-show=\"hideSearchSpiner\"> -->\n" +    "\t\t\t<div class=\"row\">\n" +    "\t\t\t\t<div class=\"col-md-12\">\n" +    "\t\t\t\t\t<div class=\"col-md-3 quickSearchBox\" ng-show=\"paginationData[entityType].count > 0 || quickSearchEnabled\">\n" +    "\t\t\t\t\t\t<div class=\"form-inline\">\n" +    "\t\t\t\t\t\t\t<div class=\"form-group\" ng-repeat=\"quickSearchField in quickSearch\">\n" +    "\t\t\t\t\t\t\t\t<div class=\"input-group margin-bottom\">\n" +    "\t\t\t\t\t\t\t\t\t<div class=\"input-group-addon\" ng-click=\"toggleFilter()\" ng-class=\"{'text-warning': !filterOpened}\">\n" +    "\t\t\t\t\t\t\t\t\t\t&nbsp;\n" +    "\t\t\t\t\t\t\t\t\t\t<i class=\"glyphicon glyphicon-filter\"></i>\n" +    "\t\t\t\t\t\t\t\t\t\t&nbsp;\n" +    "\t\t\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"{{quickSearchField.metadata.label | translate:quickSearchField.extra }}\" ng-model=\"quickSearchField.value\" ng-change=\"executeQuickSearch()\" id=\"quick-search-{{ quickSearchField.metadata.name }}\">\n" +    "\t\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t\t<div class=\"col-md-3 form-inline numItemsBox\" ng-show=\"paginationData[entityType].count > 0\">\n" +    "\t\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t\t<label class=\"control-label font-normal\">\n" +    "\t\t\t\t\t\t\t\t{{ 'message.pagination.results-per-page' | translate }}\n" +    "\t\t\t\t\t\t\t</label>\n" +    "\t\t\t\t\t\t\t<select class=\"form-control\" ng-model=\"paginationCount\" ng-change=\"paginationSubmit()\">\n" +    "\t\t\t\t\t\t\t\t<!-- <option>10</option> -->\n" +    "\t\t\t\t\t\t\t\t<option value=\"20\">20</option>\n" +    "\t\t\t\t\t\t\t\t<option value=\"50\">50</option>\n" +    "\t\t\t\t\t\t\t\t<option value=\"100\">100</option>\n" +    "\t\t\t\t\t\t\t</select>\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t\t<div class=\"col-md-6 text-right\" ng-show=\"paginationData[entityType].count > 0\">\n" +    "\t\t\t\t\t\t<div class=\"form-inline\">\n" +    "\t\t\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t\t\t{{ 'message.pagination.results' | translate:paginationData[entityType] }}\n" +    "\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t\t\t<pagination boundary-links=\"true\" total-items=\"paginationData[entityType].count\" items-per-page=\"paginationData[entityType].limit\" max-size=\"4\" rotate=\"false\" ng-model=\"paginationData[entityType].offset\" ng-change=\"paginationSubmit()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\">\n" +    "\t\t\t\t\t\t\t\t</pagination>\t\n" +    "\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"row\">\n" +    "\t\t\t\t<result-table entities=\"searchResults\" \n" +    "\t\t\t\t\t\t\t\tentity-metadata=\"entityMetadata\" \n" +    "\t\t\t\t\t\t\t\ton-update=\"operations.openEntityUpdate\" \n" +    "\t\t\t\t\t\t\t\tpagination-data=\"paginationData[entityType]\"\n" +    "\t\t\t\t\t\t\t\tpagination-update=\"paginationUpdate\"\n" +    "\t\t\t\t\t\t\t\tfilter-code=\"quickSearchParams.value[codeField]\"\n" +    "\t\t\t\t\t\t\t\ton-sorting=\"submitSorting\">\n" +    "\t\t\t\t</result-table>\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"row\">\n" +    "\t\t\t\t<div class=\"col-md-12\">\n" +    "\t\t\t\t\t<div class=\"col-md-6 text-right col-md-offset-6\" ng-show=\"paginationData[entityType].count > 0\">\n" +    "\t\t\t\t\t\t<div class=\"form-inline\">\n" +    "\t\t\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t\t\t{{ 'message.pagination.results' | translate:paginationData[entityType] }}\n" +    "\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t\t\t<pagination boundary-links=\"true\" total-items=\"paginationData[entityType].count\" items-per-page=\"paginationData[entityType].limit\" max-size=\"4\" rotate=\"false\" ng-model=\"paginationData[entityType].offset\" ng-change=\"paginationSubmit()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\">\n" +    "\t\t\t\t\t\t\t\t</pagination>\t\n" +    "\t\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"row chantier-btn-list\">\n" +    "\t\t\t\t<div class=\"actions pull-right\">\n" +    "\t\t\t\t\t<button class=\"btn btn-primary\" ng-click=\"operations.openEntityCreate(entityMetadata)\" ng-show=\"isCreateable\" id=\"create-entity\">\n" +    "\t\t\t\t\t\t<i class=\"icon ion-plus\"></i>\n" +    "\t\t\t\t\t\t{{ 'message.action.add' | translate }}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t\t\t<button class=\"btn btn-default\" ng-repeat=\"action in entityMetadata.actions\" ng-model=\"action\" ng-click=\"dispatchSearchAction(action)\" ng-show=\"action.scope==='SEARCH' || action.scope==='RESULTS'\" id=\"search-action-dispatcher-{{ action.name }}\">\n" +    "\t\t\t\t\t\t<i ng-class=\"action.icon\" ng-show=\"action.icon.length\"></i>\n" +    "\t\t\t\t\t\t{{ action.label | translate }}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t</div>\n" +    "\n" +    "\t\t\n" +    "\t\t<!-- <div class=\"col-md-9 searchLoader\" ng-hide=\"hideSearchSpiner\">\n" +    "\t\t\t<div class=\"png-spiner-container\"></div>\n" +    "\t\t</div> -->\n" +    "\t</div>\n" +    "</div>\n" +    "<div class=\"open-filters\" ng-if=\"entityMetadata.searchable !== null\" ng-show=\"!filterOpened\">\n" +    "\t\n" +    "</div>"  );  $templateCache.put('/konga/views/entity-update.html',    "<div class=\"wall\">\n" +    "\t<div class=\"panel-body\">\n" +    "\t\t<form ng-class=\"formStyle\" role=\"form\" name=\"entityUpdate\" novalidate>\n" +    "\t\t\t<update-form entity=\"entity\" changes=\"changes\" metadata=\"entityMetadata\" params=\"params\" on-change=\"operations.changeEntityField\" on-update=\"operations.updateEntityField\" creating=\"creating\"></update-form>\n" +    "\t\t\t<div class=\"pull-right update-btn-group\" ng-if=\"showActions\">\n" +    "\t\t\t\t<button class=\"btn btn-default\" ng-repeat=\"action in entityMetadata.actions\" ng-model=\"action\" ng-click=\"operations.dispatchAction(action)\" ng-show=\"action.scope==='UPDATE'\" ng-disabled=\"action.scope!=='UPDATE'\" id=\"update-action-dispatcher-{{ action.name }}\">\n" +    "\t\t\t\t\t\t\t{{ action.label | translate }}\n" +    "\t\t\t\t</button>\n" +    "\t\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"operations.dispatchEntityAction('save', params)\" ng-disabled=\"entityUpdate.$invalid || !changes.length || invalid || (entityMetadata.name==='Materiel' && !entity.validCtrOperat && entity.id != null) || customDisableValider || alreadyValidated\" id=\"save-entity\">\t\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-ok\"></i>\n" +    "\t\t\t\t\t{{ 'message.action.validate' | translate }}\n" +    "\t\t\t\t</button>\n" +    "\t\t\t\t<button class=\"btn btn-default\" ng-click=\"operations.cancelUpdate()\" id=\"cancel-update\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t\t\t{{ 'message.action.cancel' | translate }}\n" +    "\t\t\t\t</button>\n" +    "\t\t\t\t<button class=\"btn btn-danger\" ng-click=\"operations.deleteEntity()\" ng-hide=\"deletable == false\" id=\"delete-entity\" ng-disabled=\"disabledDelete\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-trash\"></i>\n" +    "\t\t\t\t\t{{ 'message.action.delete' | translate }}\n" +    "\t\t\t\t</button>\n" +    "\t\t\t</div>\n" +    "\t\t</form>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/file-input.html',    "<div class=\"col-md-12 file-input\">\n" +    "\t<button multiple=\"{{ property.multiplicity === 'MANY' }}\" ng-file-select ng-model=\"value.files\">\n" +    "\t<i class=\"glyphicon glyphicon-open\"></i>\n" +    "\t{{ 'field.file-input.upload' | translate }}\n" +    "</button>\n" +    "\n" +    "\n" +    "</div>"  );  $templateCache.put('/konga/views/footer.html',    "<div class=\"container\">\n" +    "\t<p>{{ 'message.common.footer' | translate }}</p>\n" +    "</div>"  );  $templateCache.put('/konga/views/header-nav1.html',    "<div class=\"container-fluid\">\n" +    "\t\n" +    "\t<div class=\"navbar-header\">\n" +    "\t\t<a class=\"navbar-brand\" href=\"#\">\n" +    "\t\t\t<img src=\"/images/logo.png\" height=\"30\">\n" +    "\t\t</a>\n" +    "\t</div>\n" +    "\t<!-- Collect the nav links, forms, and other content for toggling -->\n" +    "\t<div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n" +    "\t\t<ul class=\"nav navbar-nav\">\n" +    "\t\t\t<li>\n" +    "\t\t\t\t<a href=\"#\" ng-click=\"operations.goHome()\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-home\"></i>\n" +    "\t\t\t\t\tHome\n" +    "\t\t\t\t</a>\n" +    "\t\t\t</li>\n" +    "\t\t\t<!-- <li class=\"dropdown\">\n" +    "\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-cloud\"></i>\n" +    "\t\t\t\t\tAplicaciones <span class=\"caret\"></span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n" +    "\t\t\t\t\t<li><a href=\"#\">Catálogo</a></li>\n" +    "\t\t\t\t</ul>\n" +    "\t\t\t</li> -->\n" +    "\t\t\t<li class=\"dropdown\" ng-if=\"user.admin || user.superadmin\">\n" +    "\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-lock\"></i>\n" +    "\t\t\t\t\tAdministración <span class=\"caret\"></span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n" +    "\t\t\t\t\t<!-- <li><a href=\"#\" ng-click=\"operations.goAdmin()\">Panel</a></li>\n" +    "\t\t\t\t\t<li class=\"divider\"></li>\n" +    "\t\t\t\t\t<li class=\"dropdown-submenu\"> -->\n" +    "\t\t\t\t\t\t<!-- <a href=\"#\">Elementos</a> -->\n" +    "\t\t\t\t\t\t<!-- <ul class=\"dropdown-menu\" role=\"menu\"> -->\n" +    "\t\t\t\t\t\t\t<li ng-repeat=\"entity in metadata.entities | filter:{access: 'PUBLIC'} | orderBy: '+label'\">\n" +    "\t\t\t\t\t\t\t\t<a href=\"#\" ng-click=\"operations.openEntitySearch(entity)\">{{ entity.label }}</a>\n" +    "\t\t\t\t\t\t\t</li>\n" +    "\t\t\t\t\t\t<!-- </ul> -->\n" +    "\t\t\t\t\t<!-- </li> -->\n" +    "\t\t\t\t</ul>\n" +    "\t\t\t</li>\n" +    "\t\t\t<li class=\"dropdown\" ng-if=\"user.id === 1\">\n" +    "\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-cog\"></i>\n" +    "\t\t\t\t\tWebmaster <span class=\"caret\"></span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n" +    "\t\t\t\t\t<li ng-repeat=\"entity in metadata.entities | filter:{access:'!HIDDEN'} | orderBy: '+label'\">\n" +    "\t\t\t\t\t\t<a href=\"#\" ng-click=\"operations.openEntitySearch(entity)\">{{ entity.label }}</a>\n" +    "\t\t\t\t\t</li>\n" +    "\t\t\t\t</ul>\n" +    "\t\t\t</li>\n" +    "\t\t</ul>\n" +    "\n" +    "\t\t<ul class=\"nav navbar-nav navbar-right\">\n" +    "\t\t\t<li>\n" +    "\t\t\t\t<span kon-timer>00:00</span> para finalizar el pedido\n" +    "\t\t\t</li>\n" +    "\t\t\t<li>\n" +    "\t\t\t\t<a href=\"#\" ng-click=\"operations.openEntityUpdate('user', user, { title: 'Mis datos', type: 'glyphicon glyphicon-user' })\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-user\"></i>\n" +    "\t\t\t\t\t{{ user.name }}\n" +    "\t\t\t\t</a>\n" +    "\t\t\t</li>\n" +    "\t\t\t<!-- <li class=\"dropdown\">\n" +    "\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-cog\"></i>\n" +    "\t\t\t\t\tAjustes <span class=\"caret\"></span>\n" +    "\t\t\t\t</a>\n" +    "\t\t\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n" +    "\t\t\t\t\t<li><a href=\"#\">Action</a></li>\n" +    "\t\t\t\t\t<li><a href=\"#\">Another action</a></li>\n" +    "\t\t\t\t\t<li><a href=\"#\">Something else here</a></li>\n" +    "\t\t\t\t\t<li class=\"divider\"></li>\n" +    "\t\t\t\t\t<li><a href=\"#\">Separated link</a></li>\n" +    "\t\t\t\t</ul>\n" +    "\t\t\t</li> -->\n" +    "\t\t\t<li>\n" +    "\t\t\t\t<a href=\"#\" ng-click=\"operations.dispatchAction({ name: 'logout' })\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-off\"></i>\n" +    "\t\t\t\t\tSalir\n" +    "\t\t\t\t</a>\n" +    "\t\t\t</li>\n" +    "\t\t</ul>\n" +    "\t</div><!-- /.navbar-collapse -->\n" +    "</div><!-- /.container-fluid -->"  );  $templateCache.put('/konga/views/konga-content-plain.html',    "<div class=\"konga-container plain-app\">\n" +    "\t<div class=\"pwd text-center\">\n" +    "        <h1>\n" +    "            <i class=\"{{ (tabs | filter:{ id: tabId })[0].type }}\"></i>\n" +    "            {{ (tabs | filter:{ id: tabId })[0].title | translate:tabExtra[tabId] }}\n" +    "        </h1>\n" +    "    </div>\n" +    "\t<div ng-view></div>\n" +    "</div>"  );  $templateCache.put('/konga/views/konga-content-tabs.html',    "<div class=\"container\">\t\t\t\n" +    "\t<div id=\"konga-nav-tabs\" class=\"container-fluid\">\n" +    "\t\t<!--<div bs-tabs=\"tabs\" ng-model=\"tabs.activeTab\"></div>-->\n" +    "\n" +    "\t<tabset>\t\t\t    \n" +    "\t    <tab ng-repeat=\"tab in tabs\" active=\"tab.active\" select=\"operations.redirectTo(tab)\">\n" +    "\t    \t<tab-heading>\n" +    "\t    \t\t<i ng-class=\"tab.type\"></i></span>\n" +    "\t\t        <span class=\"tab-heading-title\">{{ tab.title | translate:tabExtra[tab.id] }}{{ tab.hasChanges ? '*' : '' }}\n" +    "\t\t        <i class=\"glyphicon glyphicon-remove tab-close-btn\" ng-click=\"operations.closeTab(tab, false)\" ng-show=\"tab.closable\"></i></span>\n" +    "\t\t    </tab-heading>\n" +    "\t\t    \n" +    "\t\t</tab>\n" +    "\t</tabset>\n" +    "\t\n" +    "\t<div class=\"view-container\">\n" +    "\t\t<div ng-view></div>\n" +    "\t</div>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/konga-content.html',    "<div ng-include=\"contentView\"></div>"  );  $templateCache.put('/konga/views/list-input.html',    "<div class=\"list-input padding-cero\">\n" +    "\t<div ng-if=\"paginate && filteredList.length > 10\">\n" +    "\t\t<!-- ng-show=\"hideSearchSpiner\"> -->\n" +    "\t\t<div class=\"row\">\n" +    "\t\t\t<div class=\"col-md-4 form-inline position-pagination\" style=\"margin-top:10px\" ng-show=\"paginationData.count\">\n" +    "\t\t\t\t<label class=\"control-label font-normal\">\n" +    "\t\t\t\t\t{{ 'message.pagination.results-per-page' | translate }}\n" +    "\t\t\t\t</label>\n" +    "\t\t\t\t<select class=\"form-control\" ng-model=\"paginationData.limit\" ng-change=\"pageChanged()\">\n" +    "\t\t\t\t\t<option>10</option>\n" +    "\t\t\t\t\t<option>20</option>\n" +    "\t\t\t\t\t<option>50</option>\n" +    "\t\t\t\t</select>\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"col-md-6 text-right\" ng-show=\"paginationData.count\">\n" +    "\t\t\t\t<div class=\"form-inline\">\n" +    "\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t<span class=\"total-items\">{{'message.pagination.results' | translate:paginationData }}</span>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t\t<pagination boundary-links=\"true\" total-items=\"paginationData.count\" items-per-page=\"paginationData.limit\" max-size=\"2\" rotate=\"false\" ng-model=\"paginationData.offset\" ng-change=\"paginationSubmit()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"> </pagination>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "\t<div>\n" +    "\t\t<table class=\"table table-striped\">\n" +    "\t\t\t<thead>\n" +    "\t\t\t\t<tr class=\"table-header\">\n" +    "\t\t\t\t\t<th ng-repeat=\"field in fields\">\n" +    "\t\t\t\t\t\t<table-header field=\"field\" showSorting=\"showSorting\" mode=\"update\"></table-header>\n" +    "\t\t\t\t\t</th>\n" +    "\t\t\t\t\t<th ng-show=\"actions && actions.length\">\n" +    "\t\t\t\t\t\t<span>{{ 'field.list-input.actions' | translate }}</span>\n" +    "\t\t\t\t\t</th>\n" +    "\t\t\t\t\t\n" +    "\t\t\t\t</tr>\n" +    "\t\t\t</thead>\n" +    "\t\t\t<tbody>\n" +    "\t\t\t\t<tr ng-hide=\"filteredList.length > 0\">\n" +    "\t\t\t\t\t<td colspan=\"{{ fields.length + 1 }}\" class=\"text-center no-results\">{{'field.searchResults.noresults' | translate }}</td>\n" +    "\t\t\t\t</tr>\n" +    "\t\t\t\t<tr ng-show=\"filteredList.length>0\" ng-repeat=\"entity in filteredList | filter:quickSearchParams.value\">\n" +    "\t\t\t\t\t<!-- <td>\n" +    "\t\t\t\t\t\t<div class=\"checkbox\">\n" +    "\t\t\t\t\t\t  <label>\n" +    "\t\t\t\t\t\t    <input id=\"checkbox.id-list-input\" type=\"checkbox\" ng-model=\"entity.selected\" ng-change=\"pageChanged()\" ng-disabled=\"disabledIds[entity.id]\">\n" +    "\t\t\t\t\t\t  </label>\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</td> -->\n" +    "\t\t\t\t\t<td ng-repeat=\"field in fields\">\n" +    "\t\t\t\t\t\t<table-cell entity=\"entity\" field=\"field\"></table-cell>\n" +    "\t\t\t\t\t</td>\n" +    "\t<!-- \t\t\t\t\t<table-cell entity=\"entity\" field=\"field\"></table-cell> -->\n" +    "\t\t\t\t\t<td ng-show=\"actions && actions.length\">\n" +    "\t\t\t\t\t\t<button class=\"btn btn-link no-button-styles\" ng-repeat=\"action in actions\" ng-click=\"dispatchFieldAction(action.name, {entity: entity})\" id=\"{{ fieldId + '-' + action.name }}\">\n" +    "\t\t\t\t\t\t\t<i ng-class=\"action.icon\" ng-show=\"action.icon.length\"></i>\n" +    "\t\t\t\t\t\t\t{{ action.label | translate }}\n" +    "\t\t\t\t\t\t</button>\n" +    "\t\t\t\t\t\t&nbsp;\n" +    "\t\t\t\t\t</td>\n" +    "\t\t\t\t</tr>\n" +    "\t\t\t\t<tr ng-if=\"!disableField(mode, property)\">\n" +    "\t\t\t\t\t<td colspan=\"{{ fields.length + 1 }}\" class=\"text-center\">\n" +    "\t\t\t\t\t\t<button class=\"btn btn-link\" ng-click=\"dispatchFieldAction('add')\" id=\"{{ fieldId }}-add\">\n" +    "\t\t\t\t\t\t\t<i class=\"glyphicon glyphicon-plus\"></i>\n" +    "\t\t\t\t\t\t\t{{ 'message.action.add' | translate }}\n" +    "\t\t\t\t\t\t</button>\n" +    "\t\t\t\t\t</td>\n" +    "\t\t\t\t</tr>\n" +    "\t\t\t</tbody>\n" +    "\t\t</table>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/loader.html',    "<div class=\"loader\" ng-show=\"loading.length > 0\">\n" +    "\t<div class=\"blocker\"></div>\n" +    "\t<div class=\"loading\"></div>\n" +    "\t<div class=\"message\">{{ loadingMessage }}</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/main.html',    "\n" +    "\n" +    "<div class=\"alert-container\">\n" +    "\t<alert ng-repeat=\"alert in alerts\" type=\"{{alert.type}}\" close=\"operations.removeAlert($index)\" ng-show=\"!alert.expired\" class=\"alert\">\n" +    "\t\t{{alert.msg | translate:alert.parameters}}\n" +    "\t</alert>\n" +    "</div>\n" +    "\n" +    "\n" +    "\n" +    "\n" +    "<div id=\"wrapper\">\n" +    "\t<div id=\"content\" >\n" +    "\t\t<konga-content></konga-content>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/modal.tpl.html',    "<div class=\"modal\" tabindex=\"-1\" role=\"dialog\">\n" +    "\n" +    "  \n" +    "  <div class=\"modal-dialog\">\n" +    "\n" +    "    \n" +    "    <div class=\"modal-content\">\n" +    "\n" +    "      \n" +    "      <div class=\"modal-header\" ng-show=\"modal.title\">\n" +    "\n" +    "        \n" +    "        <button id=\"modal-tpl-closeX\" type=\"button\" class=\"close\" ng-click=\"\">&times;</button>\n" +    "\n" +    "        \n" +    "        <h4 class=\"modal-title\" ng-bind=\"modal.title\"></h4>\n" +    "      </div>\n" +    "\n" +    "      \n" +    "      <div class=\"modal-body\">\n" +    "\n" +    "        \n" +    "        <div ng-include=\"modal.contentUrl\"></div>\n" +    "      </div>\n" +    "\n" +    "      \n" +    "      <div class=\"modal-footer\">\n" +    "\n" +    "        \n" +    "        <button type=\"button\" class=\"btn btn-default\" id=\"modal-save\" ng-click=\"modal.save();$hide()\">{{ 'message.action.validate' | translate }}</button>\n" +    "        <button type=\"button\" class=\"btn btn-default\" id=\"modal-cancel\" ng-click=\"$hide()\">{{ 'message.action.cancel' | translate }}</button>\n" +    "        \n" +    "      </div>\n" +    "    </div>\n" +    "  </div>\n" +    "</div>"  );  $templateCache.put('/konga/views/multi-select-modal.html',    "\n" +    "<multi-select source-list=\"sourceList\" model=\"modal.temp\"></multi-select>"  );  $templateCache.put('/konga/views/multi-select.html',    "<div class=\"multi-select\" ng-init=\"operations.init()\">\n" +    "\t<div class=\"modal-header\" ng-show=\"true\">\n" +    "\t    \n" +    "\t    <button id=\"multiselectModal.cancelX.id\" type=\"button\" class=\"close\" ng-click=\"multiselectModal.cancel()\">&times;</button>\n" +    "\n" +    "\t\t<div class=\"filter\">\n" +    "\t\t\t<div class=\"form-inline\" ng-repeat=\"quickSearchItem in quickSearch\">\n" +    "\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t<!-- <label for=\"filter\" class=\"control-label col-md-4\">5 r�sultats</label> -->\n" +    "\t\t\t\t\t<div class=\"col-md-12\">\n" +    "\t\t\t\t\t\t<div class=\"input-group\">\n" +    "\t\t\t\t\t\t  <span class=\"input-group-addon\">\n" +    "\t\t\t\t\t\t  \t&nbsp;\n" +    "\t\t\t\t\t\t  \t<i class=\"glyphicon glyphicon-filter\"></i>\n" +    "\t\t\t\t\t\t  \t&nbsp;\n" +    "\t\t\t\t\t\t  </span>\n" +    "\t\t\t\t\t\t  <input type=\"text\" id=\"multi-select-filter\" class=\"form-control\" name=\"filter\" ng-model=\"quickSearchItem.value\" placeholder=\"{{quickSearchItem.metadata.label | translate:quickSearchItem.extra }}\" ng-change=\"executeQuickSearch()\" />\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t</div>\n" +    "\n" +    "\t    \n" +    "\t    <h4 class=\"modal-title\" ng-bind=\"multiselectModal.title\"></h4>\n" +    "  \t</div>\n" +    "\t<div class=\"col-md-5 multi-select-modal-body-item\">\n" +    "\t\t<div class=\"multiselect-list list-group\" scroll-watcher>\n" +    "\t\t\t<a class=\"list-group-item\"\n" +    "\t\t\t\tng-repeat=\"item in sourceList | filter:filter.value | filter: {added: false} | orderBy: '+key'\"\n" +    "\t\t\t\tng-click=\"operations.toggle(item, !item.selected)\"\n" +    "\t\t\t\tng-dblclick=\"operations.toggle(item, true);operations.add()\"\n" +    "\t\t\t\tng-class=\"{selected: item.selected}\">\n" +    "\t\t\t\t<h5>\n" +    "\t\t\t\t\t{{ item.key }} <small>{{ item.value | translate }}</small>\n" +    "\t\t\t\t</h5>\n" +    "\t\t\t</a>\n" +    "\t\t\t<div class=\"loading-data\" ng-if=\"loading\">&nbsp;</div>\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "\t<div class=\"col-md-2 multi-select-modal-body-item center\">\n" +    "\t\t<div class=\"add-remove-btn\">\n" +    "\t\t\t<button id=\"add-multi-select.id\" type=\"button\" class=\"btn btn-default\" ng-click=\"operations.add()\">\n" +    "\t\t\t\t<i class=\"icon ion-chevron-right\"></i>\n" +    "\t\t\t</button>\n" +    "\t\t\t<button id=\"remove-multi-select.id\" type=\"button\" class=\"btn btn-default\" ng-click=\"operations.remove()\">\n" +    "\t\t\t\t<i class=\"icon ion-chevron-left\"></i>\n" +    "\t\t\t</button>\n" +    "\t\t</div>\n" +    "\t\t<div class=\"add-remove-btn\">\n" +    "\t\t\t<button id=\"addAll-button.id\" type=\"button\" class=\"btn btn-default bulk-option\" ng-click=\"operations.addAll()\">\n" +    "\t\t\t\t<i class=\"icon icon-add-remove-all ion-chevron-right\"></i><i\n" +    "\t\t\t\t\tclass=\"icon icon-add-remove-all ion-chevron-right\"></i>\n" +    "\t\t\t</button>\n" +    "\t\t\t<button id=\"removeAll-button.id\" type=\"button\" class=\"btn btn-default bulk-option\" ng-click=\"operations.removeAll()\">\n" +    "\t\t\t\t<i class=\"icon icon-add-remove-all ion-chevron-left\"></i><i\n" +    "\t\t\t\t\tclass=\"icon icon-add-remove-all ion-chevron-left\"></i>\n" +    "\t\t\t</button>\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "\t<div class=\"col-md-5 multi-select-modal-body-item\">\n" +    "\t\t<div class=\"multiselect-list list-group\">\n" +    "\t\t\t<a a class=\"list-group-item\"\n" +    "\t\t\t\tng-repeat=\"item in sourceList | filter: {added: true} | orderBy: '+key'\"\n" +    "\t\t\t\tng-click=\"operations.toggle(item)\" \n" +    "\t\t\t\tng-dblclick=\"operations.toggle(item, true);operations.remove()\"\n" +    "\t\t\t\tng-class=\"{selected: item.selected}\">\n" +    "\t\t\t\t<h5>   \n" +    "\t\t\t\t\t{{ item.key }} <small>{{ item.value | translate }}</small>\n" +    "\t\t\t\t</h5>\n" +    "\t\t\t</a>\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "\t<div class=\"clear\">&nbsp;</div>\n" +    "\t<div class=\"modal-footer\">\n" +    "\t\t\n" +    "\t\t<button  type=\"button\" class=\"btn btn-success\" ng-click=\"multiselectModal.save()\" id=\"multi-select-save\">\n" +    "\t\t\t<i class=\"glyphicon glyphicon-ok\"></i>\n" +    "\t\t\t{{ 'message.action.validate' | translate }}\n" +    "\t\t</button>\n" +    "\t\t<button  type=\"button\" class=\"btn btn-default\" ng-click=\"multiselectModal.cancel()\" id=\"multi-select-cancel\">\n" +    "\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t{{ 'message.action.cancel' | translate }}\n" +    "\t\t</button>\n" +    "\t\t\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/ng-view.html',    "<div class=\"view-container\">\n" +    "\t<div ng-view></div>\n" +    "</div>"  );  $templateCache.put('/konga/views/option-input.html',    "<p>This is the option-input view.</p>\n"  );  $templateCache.put('/konga/views/price-input.html',    "<div class=\"input-group\">\n" +    "  <input name=\"{{ property.name }}\" type=\"text\" class=\"form-control text-right\"\n" +    "\tid=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"inner.text\" ng-change=\"formatInput()\"\n" +    " \tng-disabled=\"disableField(mode, property)\"\n" +    "\tangular.module('konga') ng-required=\"validation.required()\" aria-describedby=\"{{fieldId}}_addon\">\n" +    "  <span class=\"input-group-addon\" id=\"{{fieldId}}_addon\">&nbsp;<b>{{ currency }}&nbsp;</b></span>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-boolean-input.html',    "<div class=\"radio-inline\">\n" +    "\t<label for=\"{{ fieldId }}-true\">\n" +    "\t\t<input name=\"{{ property.name }}\"type=\"radio\" name=\"{{property.name}}\" ng-value=\"true\" ng-model=\"value.text\" id=\"{{ fieldId }}-true\" ng-disabled=\"disableField(mode, property)\">\n" +    "\t\t{{ true | activeInactive:property:mode | translate }}\n" +    "\t</label>\n" +    "</div>\n" +    "<div class=\"radio-inline\">\n" +    "\t<label for=\"{{ fieldId }}-false\">\n" +    "\t\t<input type=\"radio\" name=\"{{property.name}}\" ng-value=\"false\" ng-model=\"value.text\" id=\"{{ fieldId }}-false\" ng-disabled=\"disableField(mode, property)\">\n" +    "\t\t{{ false | activeInactive:property:mode | translate }}\n" +    "\t</label>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-calendar-input.html',    "<calendar-input></calendar-input>"  );  $templateCache.put('/konga/views/raw-checkbox-input.html',    "<div class=\"checkbox-inline\">\n" +    "\t<label for=\"{{ fieldId }}-true\"> <input name=\"{{ property.name }}\"type=\"checkbox\" ng-value=\"true\" ng-model=\"value.active\" id=\"{{ fieldId }}-true\"> \n" +    "\t\t{{ true | activeInactive:property | translate}}\n" +    "\t</label>\n" +    "</div>\n" +    "<div class=\"checkbox-inline\">\n" +    "\t<label for=\"{{ fieldId }}-false\"> <input name=\"{{ property.name }}\"type=\"checkbox\" ng-value=\"false\" ng-model=\"value.inactive\" id=\"{{ fieldId }}-false\">\n" +    "\t\t{{ false | activeInactive:property | translate}}\n" +    "\t</label>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-color-input.html',    "<input name=\"{{ property.name }}\" type=\"color\" class=\"form-control konga-form-search-input\" id=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" angular.module('konga') ng-required=\"validation.required()\" maxlength=\"{{ validation.maxlength() }}\">\n" +    "<!-- TODO This is not working (yet) -->\n" +    "<!-- ng-minlength=\"property.minLength\"\n" +    "ng-maxlength=\"property.maxLength\" -->\n" +    "<!-- <div class=\"input-group-addon bg-invalid\">\n" +    "\t<button type=\"button\" class=\"btn btn-link\">\n" +    "\t\t<i class=\"glyphicon glyphicon-remove text-bg-invalid\"></i>\n" +    "\t</button>\n" +    "</div> -->"  );  $templateCache.put('/konga/views/raw-combobox-input.html',    "<button type=\"button\" class=\"btn btn-default combobox-button\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" ng-required=\"validation.required()\" data-html=\"0\" ng-options=\"item.key as item.value | translate for item in value.list\" data-animation=\"am-flip-x\" data-placeholder=\"{{ 'combobox.placeholder' | translate }}\" bs-select ng-if=\"!multiple\">\n" +    "\tAction <span class=\"caret\"></span>\n" +    "</button>\n" +    "<button type=\"button\" class=\"btn btn-default combobox-button\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" ng-required=\"validation.required()\" data-html=\"0\" ng-options=\"item.key as item.value | translate for item in value.list\" data-multiple=\"{{ multiple }}\" data-animation=\"am-flip-x\" data-placeholder=\"{{ 'combobox.placeholder' | translate }}\" bs-select ng-if=\"multiple\">\n" +    "\tAction <span class=\"caret\"></span>\n" +    "</button>"  );  $templateCache.put('/konga/views/raw-complex-input.html',    "<div class=\"complex-container\" ng-init=\"hideGlobalValidation()\">\n" +    "\t<raw-input \n" +    "\t\tproperty=\"field\"\n" +    "\t\tvertical=\"true\" \n" +    "\t\tng-repeat=\"field in value.fields\"\n" +    "\t\tentity=\"entity[$parent.property.name]\"\n" +    "\t\troot-entity=\"entity\" \n" +    "\t\tmetadata=\"value.metadata\"\n" +    "\t\troot-metadata=\"metadata\"\n" +    "\t\ton-update=\"updateEntity\"\n" +    "\t\ton-change=\"changeEntity\"\n" +    "\t\tmode=\"{{mode}}\"\n" +    "\t\tparent-field=\"$parent.property\"\n" +    "\t\tcreating=\"creating\"\n" +    "\t\tindex=\"index + $index\">\n" +    "\t</raw-input>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-css-input.html',    "<div ng-class=\"value.text\"></div>"  );  $templateCache.put('/konga/views/raw-date-input.html',    "<input name=\"{{ property.name }}\" id=\"{{ fieldId }}\" type=\"date\" placeholder=\"yyyy-MM-dd\" ng-model=\"value.text\" name=\"{{property.fieldName}}\"\n" +    "\t\tclass=\"form-control\" ng-required=\"validation.required()\" ng-disabled=\"disableField(mode, property)\" value=\"{{ value.text }}\">\n" +    "\n" +    "<div class=\"validation\">\n" +    "\t<div class=\"validation-invalid-date btn-danger\">\n" +    "\t\t{{\t'message.field-validation.invalid-date' | translate }}\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-date-search-input.html',    "<div class=\"padding-cero\">\n" +    "\t<label>{{ 'field.date-search.comparator' | translate }}</label>\n" +    "\t<select name=\"comparator\" ng-model=\"value.date.comparator\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-comparator\">\n" +    "\t\t<option value=\"LOWER_THAN\">{{ 'field.date-search.LOWER_THAN' | translate }}</option>\n" +    "\t\t<option value=\"LOWER_EQUALS\">{{ 'field.date-search.LOWER_EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"EQUALS\">{{ 'field.date-search.EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"GREATER_EQUALS\">{{ 'field.date-search.GREATER_EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"GREATER_THAN\">{{ 'field.date-search.GREATER_THAN' | translate }}</option>\n" +    "\t\t<option value=\"BETWEEN\">{{ 'field.date-search.BETWEEN' | translate }}</option>\n" +    "\t</select>\n" +    "</div>\n" +    "<div class=\"padding-cero\">\n" +    "\t<label for=\"{{ fieldId }}-dateSince\">{{ 'field.date-search.date' | translate }}</label>\n" +    "\t<input name=\"{{ property.name }}\"type=\"date\" name=\"date-since\" ng-model=\"value.date.startDate\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-dateSince\"\n" +    "</div>\n" +    "<div class=\"padding-cero\" ng-show=\"value.date.comparator == 'BETWEEN'\">\n" +    "\t<label for=\"{{ fieldId }}-dateTo\">{{ 'field.date-search.otherdate' | translate }}</label>\n" +    "\t<input name=\"{{ property.name }}\"type=\"date\" name=\"to\" ng-model=\"value.date.endDate\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-dateTo\">\n" +    "</div>\n" +    "<!-- <div class=\"col-md-2 padding-cero\">\n" +    "\t<button id=\"toggleDatePicker.id\" type=\"button\" class=\"btn btn-default\"\n" +    "\t\tng-click=\"toggleDatePicker()\">\n" +    "\t\t<i class=\"icon ion-ios7-calendar-outline\"></i>\n" +    "\t</button>\n" +    "</div> -->\n" +    "<!-- <datepicker ng-model=\"value.text\" show-weeks=\"true\"\n" +    "\tclass=\"well well-sm\" ng-show=\"datePicker.opened\"></datepicker> -->"  );  $templateCache.put('/konga/views/raw-datetime-input.html',    "<div class=\"dropdown\">\n" +    "  <a class=\"dropdown-toggle\" id=\"dropdown2\" role=\"button\" data-toggle=\"dropdown\" ng-disabled=\"disableField(mode, property)\" data-target=\"#\" href=\"#\">\n" +    "    <div class=\"input-group\">\n" +    "    \t<div class=\"input-datetimepicker\" ng-model=\"value.text\">\n" +    "\t    \t<input name=\"{{ property.name }}\"id=\"{{ fieldId }}\" type=\"text\" class=\"form-control\" name=\"{{property.fieldName}}\"\n" +    "\t\t\t\t\tplaceholder=\"dd/MM/yyyy HH:mm\" value=\"{{ value.text | date:'dd/MM/yyyy HH:mm' }}\" ng-required=\"validation.required()\" ng-disabled=\"disableField(mode, property)\">\n" +    "\t\t\t<div></div>\n" +    "    \t</div>\n" +    "\t\t<div class=\"input-group-addon\">\n" +    "\t\t\t<button type=\"button\" class=\"btn btn-link\" ng-disabled=\"disableField(mode, property)\"id=\"raw-input-dateHeure-releve-select\">\n" +    "\t\t\t\t<i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +    "\t\t</div>\n" +    "    </div>\n" +    "  </a>\n" +    "  <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">\n" +    "    <datetimepicker data-ng-model=\"value.text\" data-datetimepicker-config=\"{ dropdownSelector: '#dropdown2' }\" />\n" +    "  </ul>\n" +    "</div>\n" +    "\n" +    "<div class=\"validation\">\n" +    "\t<div class=\"validation-invalid-date btn-danger\">\n" +    "\t\t{{\t'message.field-validation.invalid-date' | translate }}\n" +    "\t</div>\n" +    "\t<div class=\"validation-required btn-danger\">{{\n" +    "\t\t'message.field-validation.required' | translate }}\n" +    "\t</div>\n" +    "</div>\n"  );  $templateCache.put('/konga/views/raw-file-input.html',    "<file-input></file-input>"  );  $templateCache.put('/konga/views/raw-image-input.html',    "<!-- <input name=\"{{ property.name }}\"type=\"text\" class=\"form-control konga-form-search-input\" id=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" angular.module('konga') ng-required=\"validation.required()\" maxlength=\"{{ validation.maxlength() }}\"> -->\n" +    "\n" +    "<img ng-src=\"{{ value.text }}\" width=\"200\" />"  );  $templateCache.put('/konga/views/raw-input.html',    "<div class=\"raw-input\" ng-hide=\"config.hidden\" ng-class=\"{ empty: config.init }\">\n" +    "\t<div class=\"row form-group mode-{{ mode }} {{ parentField ? 'derived' : '' }} {{(isExtended) ? 'extended' : '' }} {{displayMode}}\">\n" +    "\t\t<label class=\"col-xs-12 col-sm-12 col-md-6 col-lg-4\">\n" +    "\t\t\t{{property.label | translate:extra }}\n" +    "\t\t\t<strong class=\"required asterisk\" ng-if=\"validation.required()\">*</strong>\n" +    "\t\t</label>\n" +    "\t\t<div ng-class=\"{ 'derived': !!parentField, 'full-width-component': (['COMPLEX', 'TABLE', 'PICK_LIST', 'CALENDAR'].indexOf(property.fieldType[mode]) !== -1) }\" class=\"col-xs-12 col-sm-12 col-md-6 col-lg-8\">\n" +    "\t\t\t<div ng-include=\"contentUrl\" ng-class=\"classFormInput\"></div>\n" +    "\t\t</div>\n" +    "\t\t<div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-6 col-lg-10 col-lg-offset-4\" ng-if=\"property.hint\">\n" +    "\t\t\t<span class=\"text-muted\">{{ property.hint | translate:extra }}</span>\n" +    "\t\t</div>\n" +    "\t\t<div ng-if=\"globalValidation\" ng-hide=\"config.init\" class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-6 col-lg-10 col-lg-offset-4\">\n" +    "\t\t\t<div class=\"validation-forbidden-characters text-danger\" ng-show=\"!validation.valid_forbiddenCharacters()\">\n" +    "\t\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t\t{{ 'message.field-validation.forbidden-characters' | translate:extra }}\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"validation-required text-danger\" ng-show=\"!validation.valid_required()\" >\n" +    "\t\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t\t{{ 'message.field-validation.required' | translate:extra }}\n" +    "\t\t\t</div>\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-link-input.html',    "<button class=\"btn btn-link\" ng-click=\"dispatchFieldAction('open-link')\" ng-init=\"hideGlobalValidation()\">\n" +    "\t<i class=\"glyphicon glyphicon-plus\" ng-if=\"creating\"></i>\n" +    "\t<i class=\"glyphicon glyphicon-pencil\" ng-if=\"!creating\"></i>\n" +    "\t<span>{{ 'field.link.text' | translate }}</span>\n" +    "</button>"  );  $templateCache.put('/konga/views/raw-list-input.html',    "<div class=\"padding-cero\" ng-class=\"inLineClass.col1\">\n" +    "\t<label for=\"{{ fieldId }}\">{{property.fieldLabel | translate:extra }}</label>\n" +    "</div>\n" +    "<div class=\"input-group\" ng-class=\"inLineClass.col3\">\n" +    "\t<list-input fields=\"entityFields\" list=\"value.list\" eds-type=\"societe\" disabled-ids=\"[]\"></list-input>\n" +    "</div>\n" +    "<div class=\"row\">\n" +    "\t<div class=\"col-md-12\">\n" +    "\t\t<button class=\"btn btn-default\" ng-click=\"openMultiSelect()\" id=\"{{ fieldId }}-add\">{{'message.action.add' | translate}}</button>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-number-input.html',    "<input name=\"{{ property.name }}\"type=\"number\"\n" +    "\tclass=\"form-control konga-form-search-input konga-form-simple-search-input\"\n" +    "\tid=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"value.text\"\n" +    " \tng-disabled=\"disableField(mode, property)\"\n" +    "\tangular.module('konga') ng-required=\"validation.required()\" min=\"{{ validation.minvalue() }}\" max=\"{{ validation.maxvalue() }}\" tabindex=\"{{ (index + 1) * 12 }}\">\n" +    "\n" +    "<div class=\"validation\">\n" +    "\t<div class=\"validation-pattern btn-danger\">\n" +    "\t\t{{ 'message.field-validation.pattern' | translate }}\n" +    "\t</div>\n" +    "\t<div class=\"validation-required btn-danger\">\n" +    "\t\t{{ 'message.field-validation.required' | translate }}\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-number-range-input.html',    "<div class=\"padding-cero\">\n" +    "\t<label>{{ 'field.number-range.comparator' | translate }}</label>\n" +    "\t<select name=\"comparator\" ng-model=\"value.range.comparator\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-comparator\">\n" +    "\t\t<option value=\"LOWER_THAN\">{{ 'field.number-range.LOWER_THAN' | translate }}</option>\n" +    "\t\t<option value=\"LOWER_EQUALS\">{{ 'field.number-range.LOWER_EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"EQUALS\">{{ 'field.number-range.EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"GREATER_EQUALS\">{{ 'field.number-range.GREATER_EQUALS' | translate }}</option>\n" +    "\t\t<option value=\"GREATER_THAN\">{{ 'field.number-range.GREATER_THAN' | translate }}</option>\n" +    "\t\t<option value=\"BETWEEN\">{{ 'field.number-range.BETWEEN' | translate }}</option>\n" +    "\t</select>\n" +    "</div>\n" +    "<div class=\"padding-cero\">\n" +    "\t<label for=\"{{ fieldId }}-dateSince\">{{ 'field.number-range.number' | translate }}</label>\n" +    "\t<input name=\"{{ property.name }}\" type=\"number\" name=\"from\" ng-model=\"value.range.from\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-dateSince\"\n" +    "</div>\n" +    "<div class=\"padding-cero\" ng-show=\"value.range.comparator == 'BETWEEN'\">\n" +    "\t<label for=\"{{ fieldId }}-dateTo\">{{ 'field.number-range.othernumber' | translate }}</label>\n" +    "\t<input name=\"{{ property.name }}\" type=\"number\" name=\"to\" ng-model=\"value.range.to\"\n" +    "\t\tclass=\"form-control\" ng-required=\"ngRequired\" id=\"{{ fieldId }}-dateTo\">\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-option-input.html',    "<option-input></option-input>"  );  $templateCache.put('/konga/views/raw-password-input.html',    "<input name=\"{{ property.name }}\"type=\"password\" class=\"form-control konga-form-search-input\" id=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" angular.module('konga') ng-required=\"validation.required()\" maxlength=\"{{ validation.maxlength() }}\" autocomplete=\"off\">"  );  $templateCache.put('/konga/views/raw-pick_list-input.html',    "<div ng-init=\"hideGlobalValidation()\">\n" +    "\t<list-input fields=\"value.fields\" actions=\"property.actions\"\n" +    "\t\tlist=\"value.entity\" property=\"property\" metadata=\"metadata\"\n" +    "\t\tdisabled-ids=\"[]\" dispatch-field-action='dispatchFieldAction'></list-input>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-plain-input.html',    "<input name=\"{{ property.name }}\" type=\"text\" class=\"form-control konga-form-search-input\" id=\"{{ fieldId }}\" placeholder=\"\" ng-model=\"value.text\" ng-disabled=\"disableField(mode, property)\" angular.module('konga') ng-required=\"validation.required()\" maxlength=\"{{ validation.maxlength() }}\" tabindex=\"{{ (index + 1) * 12 }}\">"  );  $templateCache.put('/konga/views/raw-price-input.html',    "<price-input></price-input>\n" +    "<div class=\"validation\">\n" +    "\t<div class=\"validation-pattern btn-danger\">\n" +    "\t\t{{ 'message.field-validation.pattern' | translate }}\n" +    "\t</div>\n" +    "\t<div class=\"validation-required btn-danger\">\n" +    "\t\t{{ 'message.field-validation.required' | translate }}\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-select-input.html',    "<select-input></select-input>\n" +    "<div class=\"col-md-12\" ng-if=\"mode === 'search'\">\n" +    "\t<div class=\"row\">\n" +    "\t\t<button class=\"btn btn-default btn-xs\" ng-repeat=\"item in value.entity\" ng-click=\"removeItem($index)\">\n" +    "\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t{{ item | mapField:labelField | shortify:15 }}\n" +    "\t\t\t{{ (item | mapField:labelField).length > 15 ? '...' : '' }}\n" +    "\t\t</button>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-switch-input.html',    "<span class=\"raw-switch-input\">\n" +    "\t<i class=\"fa\" ng-class=\"{ 'fa-toggle-on text-success': !!value.text, 'fa-toggle-off text-default': !value.text }\" ng-click=\"value.text = !value.text\"></i>\n" +    "</span>"  );  $templateCache.put('/konga/views/raw-table-input.html',    "<div class=\"col-md-12 padding-cero\" ng-class=\"inLineClass.col1\" ng-init=\"hideGlobalValidation()\">\n" +    "\t<label for=\"{{ fieldId }}\">{{property.fieldLabel |\n" +    "\t\ttranslate:extra }}</label>\n" +    "</div>\n" +    "<div class=\"col-md-12 padding-cero\" ng-class=\"inLineClass.col3\">\n" +    "\t<table-input></table-input>\n" +    "</div>"  );  $templateCache.put('/konga/views/raw-textarea-input.html',    "<textarea \n" +    "\ttype=\"text\"\n" +    "\tclass=\"form-control konga-form-search-input konga-form-simple-search-input\"\n" +    "\tid=\"{{fieldId}}\"\n" +    "\tplaceholder=\"\"\n" +    "\tng-model=\"value.text\"\n" +    "\tng-disabled=\"disableField(mode, property)\"\n" +    "\tangular.module('konga')\n" +    "\tng-required=\"validation.required()\"\n" +    "\trows=\"{{ property.validation.maxLength / 100 }}\">\n" +    "</textarea>\n" +    "\t<!-- TODO This is not working (yet) -->\n" +    "\t<!-- ng-minlength=\"property.minLength\"\n" +    "\tng-maxlength=\"property.maxLength\" -->\n" +    "\n" +    "<div class=\"validation\">\n" +    "\t<div class=\"validation-pattern btn-danger\">\n" +    "\t\t{{ 'message.field-validation.pattern' | translate }}\n" +    "\t</div>\n" +    "\t<div class=\"validation-required btn-danger\">\n" +    "\t\t{{ 'message.field-validation.required' | translate }}\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/recursive-list-item.html',    "<li>\n" +    "\t<div>\n" +    "\t\t<a href=\"\" ng-click=\"click(item)\">{{ item.label | translate }}</a>\n" +    "\t\t<i class=\"text-success\" ng-class=\"{ 'glyphicon glyphicon-ok': item.selected && !item.children.length }\"></i>\n" +    "\t\t<recursive-list list=\"item.children\" on-click-item=\"click\"></recursive-list>\n" +    "\t</div>\n" +    "</li>"  );  $templateCache.put('/konga/views/recursive-list.html',    "<ul>\n" +    "\t<recursive-list-item ng-repeat=\"item in list\" item=\"item\" on-click=\"clickItem\"></recursive-list-item>\n" +    "</ul>"  );  $templateCache.put('/konga/views/result-table.html',    "<div ng-include=\"contentUrl\" ng-init=\"init()\"></div>"  );  $templateCache.put('/konga/views/search-pane.html',    "<div class=\"search-pane\" ng-init=\"init()\">\n" +    "\t<div class=\"search-form\">\n" +    "\t\t<h3>{{ 'message.search-filters.title' | translate }}</h3>\n" +    "\t\t<form role=\"form\">\n" +    "\t\t\t<div ng-include=\"contentUrl\"></div>\n" +    "\t\t\t<div class=\"col-md-12 form-group mode-search\">\n" +    "\t\t\t\t<div class=\"text-right\">\n" +    "\t\t\t\t\t<button id=\"clear-search-pane.id\" type=\"button\" class=\"btn btn-default\" ng-click=\"operations.clear()\">\n" +    "\t\t\t\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t\t\t\t{{'message.action.clean' | translate}}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t\t\t<button id=\"submit-search-pane.id\" type=\"submit\" class=\"btn btn-success\" ng-click=\"operations.submit()\">\n" +    "\t\t\t\t\t\t<i class=\"glyphicon glyphicon-ok\"></i>\n" +    "\t\t\t\t\t\t{{'message.action.search' | translate}}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t\t<div class=\"col-md-12 form-group mode-search\" ng-if=\"entityMetadata.favoriteable\">\n" +    "\t\t\t\t<label class=\"font-bold\">\n" +    "\t\t\t\t\t<i class=\"glyphicon glyphicon-star\"></i>\n" +    "\t\t\t\t\t{{ 'message.favorite-filter.title' | translate }}\n" +    "\t\t\t\t</label>\n" +    "\t\t\t\t<div class=\"col-md-12 nowrap\">\n" +    "\t\t\t\t\t<button id=\"openFilterModelPost.id\" class=\"btn btn-link\" ng-click=\"openFilterModel({ dataType: 'filtermgt', operation: 'post'})\">\n" +    "\t\t\t\t\t\t<i class=\"glyphicon glyphicon-floppy-save\"></i>\n" +    "\t\t\t\t\t\t{{'message.favorite-filter.save-filter' | translate}}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t\t\t<button id=\"openFilterModelGet.id\" class=\"btn btn-link\" ng-click=\"openFilterModel({ dataType: 'filtermgt', operation: 'get'})\">\n" +    "\t\t\t\t\t\t<i class=\"glyphicon glyphicon-floppy-open\"></i>\n" +    "\t\t\t\t\t\t{{'message.favorite-filter.load-filter' | translate}}\n" +    "\t\t\t\t\t</button>\n" +    "\t\t\t</div>\n" +    "\t\t</form>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/select-input.html',    "<div class=\"select-input {{(isExtended) ? 'extend' : 'non-extended'}}\" ng-class=\"{ disabled: disableSelect(property) }\" konga-select>\n" +    "\t<div class=\"input-group {{ validation.required() ? 'required' : 'optional' }} {{ value.text.length ? 'valid' : 'invalid' }}\">\n" +    "\t\t<input name=\"{{ property.name }}\"type=\"text\" class=\"konga-form-search-input form-control\" id=\"{{ fieldId }}-input\" ng-model=\"textinput\" ng-disabled=\"disableField(mode, property)\" angular.module('konga') ng-required=\"validation.required()\" ng-change=\"writeValue()\" typeahead=\"item.label for item in getElements($viewValue)\" typeahead-on-select=\"formatInput($item, $model, $label)\" tabindex=\"{{ (index + 1) * 12 }}\">\n" +    "\t\t<div class=\"input-group-addon\">\n" +    "\t\t\t<button type=\"button\" class=\"btn btn-link\" ng-disabled=\"disableField(mode, property)\"\n" +    "\t\t\t\tng-click=\"dispatchFieldAction('open-select')\" id=\"{{ fieldId }}-select\">\n" +    "\t\t\t\t<i class=\"glyphicon glyphicon-search\"></i>\n" +    "\t\t\t</button>\n" +    "\t\t\t<!-- <button type=\"button\" class=\"btn btn-link btn-bordered-left\" ng-show=\"showRemove(property)\" ng-click=\"removeField(property)\" id=\"{{ fieldId }}-remove\">\n" +    "\t\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t</button> -->\n" +    "\t\t</div>\n" +    "\t</div>\n" +    "\t<div class=\"col-md-6 complex-label\" ng-show=\"mode === 'update'\">\n" +    "\t\t<span ng-show=\"label.length\">{{ label }}&nbsp;</span>\n" +    "\t</div>\n" +    "\t<div class=\"validation\">\n" +    "\t\t<div class=\"validation-pattern btn-danger\">{{\n" +    "\t\t\t'message.field-validation.pattern' | translate }}</div>\n" +    "\t\t<div class=\"validation-required btn-danger\">{{\n" +    "\t\t\t'message.field-validation.required' | translate }}</div>\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/single-select-modal.html',    "<single-select source-list=\"sourceList\" model=\"modal.temp\"></single-select>"  );  $templateCache.put('/konga/views/single-select.html',    "<div class=\"single-select\" ng-init=\"operations.init()\">\n" +    "\t<div class=\"modal-header\" ng-show=\"true\">\n" +    "\t\t\n" +    "\t\t<button id=\"singleselectModal.cancelX.id\" type=\"button\" class=\"close\" ng-click=\"singleselectModal.cancel()\">&times;</button>\n" +    "\n" +    "\t\t\n" +    "\t\t\n" +    "\t<div class=\"filter\">\n" +    "\t\t\t<div class=\"form-inline\" ng-repeat=\"quickSearchItem in quickSearch\">\n" +    "\t\t\t\t<div class=\"form-group\">\n" +    "\t\t\t\t\t<!-- <label for=\"filter\" class=\"control-label col-md-4\">5 r�sultats</label> -->\n" +    "\t\t\t\t\t<div class=\"col-md-12\">\n" +    "\t\t\t\t\t\t<div class=\"input-group\">\n" +    "\t\t\t\t\t\t  <span class=\"input-group-addon\">\n" +    "\t\t\t\t\t\t  \t&nbsp;\n" +    "\t\t\t\t\t\t  \t<i class=\"glyphicon glyphicon-filter\"></i>\n" +    "\t\t\t\t\t\t  \t&nbsp;\n" +    "\t\t\t\t\t\t  </span>\n" +    "\t\t\t\t\t\t  <input  id=\"single-select-filter.id\" type=\"text\" class=\"form-control\" name=\"filter\" ng-model=\"quickSearchItem.value\" placeholder=\"{{quickSearchItem.metadata.label | translate:quickSearchItem.extra }}\" ng-change=\"executeQuickSearch()\" />\n" +    "\t\t\t\t\t\t</div>\n" +    "\t\t\t\t\t</div>\n" +    "\t\t\t\t</div>\n" +    "\t\t\t</div>\n" +    "\t\t</div>\n" +    "\n" +    "\t\t\n" +    "\t\t<h4 class=\"modal-title\">{{ 'message.single-select.title' | translate }}</h4>\n" +    "\t</div>\n" +    "\t<div class=\"multiselect-list list-group\" scroll-watcher>\n" +    "\t\t<a class=\"list-group-item\"\n" +    "\t\t\tng-repeat=\"item in sourceList | filter:filter.value | orderBy: key\"\n" +    "\t\t\tng-click=\"operations.toggle(item)\"\n" +    "\t\t\tng-class=\"{selected: (item === selected)}\">\n" +    "\t\t\t<h5>\n" +    "\t\t\t\t{{ item.key }} <small>{{ item.value }}</small>\n" +    "\t\t\t</h5>\n" +    "\t\t</a>\n" +    "\t\t<div class=\"loading-data\" ng-if=\"loading\">&nbsp;</div>\n" +    "\t\t<div class=\"no-results\" ng-show=\"!loading && !sourceList.length\">{{ 'field.searchResults.noresults' | translate }}</div>\n" +    "\t</div>\n" +    "\t<div class=\"modal-footer\">\n" +    "\t\t\n" +    "\t\t<button  type=\"button\" class=\"btn btn-success\" ng-click=\"singleselectModal.save()\" id=\"single-select-save\">\n" +    "\t\t\t<i class=\"glyphicon glyphicon-ok\"></i>\n" +    "\t\t\t{{ 'message.action.validate' | translate }}\n" +    "\t\t</button>\n" +    "\t\t<button  type=\"button\" class=\"btn btn-default\" ng-click=\"singleselectModal.cancel()\" id=\"single-select-cancel\">\n" +    "\t\t\t<i class=\"glyphicon glyphicon-remove\"></i>\n" +    "\t\t\t{{ 'message.action.cancel' | translate }}\n" +    "\t\t</button>\n" +    "\t\t\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/tabbed-update-user.html',    "<vertical-tabs>\n" +    "\t<tab-content title=\"{{'category.informations.principales'| translate}}\">\n" +    "\t\t<raw-input \n" +    "\t\t\tproperty=\"field\"\n" +    "\t\t\tvertical=\"true\"\n" +    "\t\t\tsource-list=\"productCodes[field.name]\"\n" +    "\t\t\tng-repeat=\"field in fields | updateParams:metadata:'category.informations.principales' | orderBy:'+priority.update'\" \n" +    "\t\t\tentity=\"entity\" \n" +    "\t\t\ton-update=\"onUpdate\"\n" +    "\t\t\ton-change=\"onChange\"\n" +    "\t\t\tmetadata=\"metadata\"\n" +    "\t\t\tmode=\"update\"\n" +    "\t\t\tcreating=\"creating\">\n" +    "\t\t</raw-input>\n" +    "\t</tab-content>\n" +    "\t<tab-content title=\"{{'category.habilitations'| translate}}\">\n" +    "\t\t<div>\n" +    "\t\t\t<habilitations-user/>\n" +    "\t\t</div>\n" +    "\t</tab-content>\n" +    "</vertical-tabs>"  );  $templateCache.put('/konga/views/tabbed-update.html',    "<vertical-tabs>\n" +    "\t<tab-content ng-repeat=\"cat in categories\" title=\"{{cat | translate}}\" is-show=\"(fields | updateParams:metadata | filter: {category: cat}).length\">\n" +    "\t\t<raw-input \n" +    "\t\t\tproperty=\"field\"\n" +    "\t\t\tvertical=\"true\"\n" +    "\t\t\tsource-list=\"productCodes[field.name]\"\n" +    "\t\t\tng-repeat=\"field in fields | updateParams:metadata:cat | orderBy:'+priority.update' | allowed:'update'\" \n" +    "\t\t\tentity=\"entity\" \n" +    "\t\t\ton-update=\"onUpdate\"\n" +    "\t\t\ton-change=\"onChange\"\n" +    "\t\t\tmetadata=\"metadata\"\n" +    "\t\t\tmode=\"update\"\n" +    "\t\t\tcreating=\"creating\"\n" +    "\t\t\tindex=\"$index\">\n" +    "\t\t</raw-input>\n" +    "\t</tab-content>\n" +    "</vertical-tabs>"  );  $templateCache.put('/konga/views/table-cell.html',    "<div class=\"table-cell\" ng-class=\"styles\">\n" +    "\t<span class=\"table-cell-content\" ng-show=\"type === 'text'\"></span>\n" +    "\t<img ng-src=\"{{ content }}\" ng-if=\"type === 'image'\" width=\"{{ image.width }}\" height=\"{{ image.height }}\">\n" +    "\t<div class=\"{{ content }}\" ng-if=\"type === 'styling'\"></div>\n" +    "\t<div class=\"{{}}\" ng-if=\"type === 'plain-filtered'\">\n" +    "\t\t{{ content | customFilter:filter }}\n" +    "\t</div>\n" +    "</div>"  );  $templateCache.put('/konga/views/table-header.html',    "<div class=\"table-header {{ field.sortable ? 'sortable' : '' }}\" ng-class=\"styles\">\n" +    "\t<span class=\"header-label\">{{ label | translate:{label: owner} }}</span>\n" +    "\t<!-- <b ng-class=\"showSorting(field.sorting, true)\"><b ng-class=\"showSorting(field.sorting, false)\"></b></b> -->\n" +    "\t<span class=\"sorting\" ng-if=\"field.sortable\" ng-hide=\"field.derived\">\n" +    "\t\t<i class=\"select-sorting sorting-asc glyphicon glyphicon-chevron-up\" ng-click=\"sorting('asc')\" ng-class=\"{ active: sort === 'asc' }\"></i>\n" +    "\t\t<i class=\"select-sorting sorting-desc glyphicon glyphicon-chevron-down\" ng-click=\"sorting('desc')\" ng-class=\"{ active: sort === 'desc' }\"></i>\n" +    "\t</span>\n" +    "</div>"  );  $templateCache.put('/konga/views/table-input.html',    "<div class=\"table-input col-md-12 padding-cero\">\n" +    "\t<div ng-if=\"!rows || !columns || rows.length === 0 || columns.length === 0\" class=\"col-md-12 text-center text-danger\">{{ 'message.table-input.not-yet-configured' | translate }}</div>\n" +    "\t<table ng-if=\"rows.length > 0 && columns.length > 0\">\n" +    "\t\t\n" +    "\t\t<tr>\n" +    "\t\t\t\n" +    "\t\t\t<th class=\"table-input-category-separator\">&nbsp;</th>\n" +    "\n" +    "\t\t\t\n" +    "\t\t\t<th class=\"table-input-category horizontal\" colspan=\"{{ columns.length }}\">{{ configuration.xAxisProperty.label | translate }}</th>\n" +    "\t\t</tr>\n" +    "\n" +    "\t\t\n" +    "\t\t<tr>\n" +    "\t\t\t\n" +    "\t\t\t<th class=\"table-input-category vertical\">{{ configuration.yAxisProperty.label | translate }}</th>\n" +    "\n" +    "\t\t\t<th ng-repeat=\"column in columns\" class=\"table-input-header horizontal\">{{ column.value }}</th>\n" +    "\t\t</tr>\n" +    "\n" +    "\t\t\n" +    "\t\t<tr ng-repeat=\"row in rows\">\t\t\t\n" +    "\t\t\t\n" +    "\t\t\t<th class=\"table-input-header vertical\">{{ row.value }}</th>\n" +    "\n" +    "\t\t\t\n" +    "\t\t\t<td class=\"table-input-content\" ng-repeat=\"column in columns\">\n" +    "\t\t\t\t<input type=\"number\" size=\"2\" step=\"any\" class=\"text-center hideArrows\" ng-repeat=\"step in steps | filter:getQueryObj(row, column):true\" ng-model=\"step[valueField]\" ng-class=\"{ invalid: step.$invalid }\" ng-change=\"updateValue(step)\" />\n" +    "\t\t\t</td>\n" +    "\t\t</tr>\n" +    "\n" +    "\t</table>\n" +    "</div>"  );  $templateCache.put('/konga/views/vertical-tabs-element.tp.html',    "<div class=\"tab-pane\" ng-show=\"selected\" ng-class=\"active\" ng-transclude></div>"  );  $templateCache.put('/konga/views/verticaltab.tp.html',    "<div class=\"row tabbable\">\n" +    "\t<ul class=\"nav nav-pills nav-stacked konga-nav-vertical col-xs-12 col-sm-12 col-md-4 col-lg-3\">\n" +    "\t\t<li ng-repeat=\"tabContent in tabContentList\" ng-class=\"{active:tabContent.selected}\">\n" +    "\t\t\t<a href=\"\" ng-click=\"select(tabContent)\">{{tabContent.title}}</a>\n" +    "\t\t</li>\n" +    "\t</ul>\n" +    "\t<div class=\"tab-content col-xs-12 col-sm-12 col-md-8 col-lg-9\" ng-transclude></div>\n" +    "</div>\n"  );}]);